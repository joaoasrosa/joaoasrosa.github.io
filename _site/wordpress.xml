<?xml version="1.0" encoding="UTF-8"?>
<!--
 This is a WordPress eXtended RSS file generated by WordPress as an export of your site.
 It contains information about your site's posts, pages, comments, categories, and other content.
 You may use this file to transfer that content from one site to another.
 This file is not intended to serve as a complete backup of your site.

 To import this information into a WordPress site follow these steps:
 1. Log in to that site as an administrator.
 2. Go to Tools: Import in the WordPress admin panel.
 3. Install the "WordPress" importer from the list.
 4. Activate & Run Importer.
 5. Upload this file using the form provided on that page.
 6. You will first be asked to map the authors in this export file to users
    on the site. For each author, you may choose to map to an
    existing user on the site or to create a new user.
 7. WordPress will then import each of the posts, pages, comments, categories, etc.
    contained in this file into your site.
-->
<!-- generator="WordPress.com" created="2019-04-27 12:23"-->
<rss version="2.0" xmlns:excerpt="http://wordpress.org/export/1.2/excerpt/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:wfw="http://wellformedweb.org/CommentAPI/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:wp="http://wordpress.org/export/1.2/">
  <channel>
<title>Another look on tech</title>
<link>http://joaorosa.io</link>
<description>Yet another tech blog</description>
<pubDate>Sat, 27 Apr 2019 12:23:01 +0000</pubDate>
<language>pt-PT</language>
<wp:wxr_version>1.2</wp:wxr_version>
<wp:base_site_url>http://wordpress.com/</wp:base_site_url>
<wp:base_blog_url>http://joaorosa.io</wp:base_blog_url>
<wp:author>
  <wp:author_login>joaoasrosa</wp:author_login>
  <wp:author_email>joaoasrosa@gmail.com</wp:author_email>
  <wp:author_display_name><![CDATA[JoÃ£o Rosa]]></wp:author_display_name>
  <wp:author_first_name><![CDATA[]]></wp:author_first_name>
  <wp:author_last_name><![CDATA[]]></wp:author_last_name>
</wp:author>
<wp:category>
  <wp:term_id>162564</wp:term_id>
  <wp:category_nicename>cissp</wp:category_nicename>
  <wp:category_parent/>
  <wp:cat_name><![CDATA[CISSP]]></wp:cat_name>
</wp:category>
<wp:category>
  <wp:term_id>1715866</wp:term_id>
  <wp:category_nicename>cloud-computing</wp:category_nicename>
  <wp:category_parent/>
  <wp:cat_name><![CDATA[Cloud Computing]]></wp:cat_name>
</wp:category>
<wp:category>
  <wp:term_id>914396</wp:term_id>
  <wp:category_nicename>code-development</wp:category_nicename>
  <wp:category_parent/>
  <wp:cat_name><![CDATA[Code Development]]></wp:cat_name>
</wp:category>
<wp:category>
  <wp:term_id>9204</wp:term_id>
  <wp:category_nicename>conferences</wp:category_nicename>
  <wp:category_parent/>
  <wp:cat_name><![CDATA[Conferences]]></wp:cat_name>
</wp:category>
<wp:category>
  <wp:term_id>16668644</wp:term_id>
  <wp:category_nicename>continuous-deployment</wp:category_nicename>
  <wp:category_parent/>
  <wp:cat_name><![CDATA[Continuous Deployment]]></wp:cat_name>
</wp:category>
<wp:category>
  <wp:term_id>163615</wp:term_id>
  <wp:category_nicename>continuous-integration</wp:category_nicename>
  <wp:category_parent/>
  <wp:cat_name><![CDATA[Continuous Integration]]></wp:cat_name>
</wp:category>
<wp:category>
  <wp:term_id>172804</wp:term_id>
  <wp:category_nicename>domain-driven-design</wp:category_nicename>
  <wp:category_parent/>
  <wp:cat_name><![CDATA[Domain Driven Design]]></wp:cat_name>
</wp:category>
<wp:category>
  <wp:term_id>12805805</wp:term_id>
  <wp:category_nicename>magento-2</wp:category_nicename>
  <wp:category_parent/>
  <wp:cat_name><![CDATA[Magento 2]]></wp:cat_name>
</wp:category>
<wp:category>
  <wp:term_id>14650</wp:term_id>
  <wp:category_nicename>oss</wp:category_nicename>
  <wp:category_parent/>
  <wp:cat_name><![CDATA[OSS]]></wp:cat_name>
</wp:category>
<wp:category>
  <wp:term_id>801</wp:term_id>
  <wp:category_nicename>security</wp:category_nicename>
  <wp:category_parent/>
  <wp:cat_name><![CDATA[Security]]></wp:cat_name>
</wp:category>
<wp:category>
  <wp:term_id>5078</wp:term_id>
  <wp:category_nicename>sem-categoria</wp:category_nicename>
  <wp:category_parent/>
  <wp:cat_name><![CDATA[Sem categoria]]></wp:cat_name>
</wp:category>
<wp:category>
  <wp:term_id>39484</wp:term_id>
  <wp:category_nicename>speaking</wp:category_nicename>
  <wp:category_parent/>
  <wp:cat_name><![CDATA[Speaking]]></wp:cat_name>
</wp:category>
<wp:category>
  <wp:term_id>6407</wp:term_id>
  <wp:category_nicename>sql-server</wp:category_nicename>
  <wp:category_parent/>
  <wp:cat_name><![CDATA[SQL Server]]></wp:cat_name>
</wp:category>
<wp:category>
  <wp:term_id>943</wp:term_id>
  <wp:category_nicename>training</wp:category_nicename>
  <wp:category_parent/>
  <wp:cat_name><![CDATA[Training]]></wp:cat_name>
</wp:category>
<wp:tag>
  <wp:term_id>2427</wp:term_id>
  <wp:tag_slug>net</wp:tag_slug>
  <wp:tag_name><![CDATA[.NET]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>6277562</wp:term_id>
  <wp:tag_slug>net-core</wp:tag_slug>
  <wp:tag_name><![CDATA[.NET Core]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>11287</wp:term_id>
  <wp:tag_slug>agile</wp:tag_slug>
  <wp:tag_name><![CDATA[Agile]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>357</wp:term_id>
  <wp:tag_slug>applications</wp:tag_slug>
  <wp:tag_name><![CDATA[Applications]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>145113159</wp:term_id>
  <wp:tag_slug>appveyor</wp:tag_slug>
  <wp:tag_name><![CDATA[AppVeyor]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>144203</wp:term_id>
  <wp:tag_slug>aws</wp:tag_slug>
  <wp:tag_name><![CDATA[AWS]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>303515361</wp:term_id>
  <wp:tag_slug>aws-lambda</wp:tag_slug>
  <wp:tag_name><![CDATA[AWS Lambda]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>16204</wp:term_id>
  <wp:tag_slug>cake</wp:tag_slug>
  <wp:tag_name><![CDATA[Cake]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>40787434</wp:term_id>
  <wp:tag_slug>centos-7</wp:tag_slug>
  <wp:tag_name><![CDATA[CentOS 7]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>11198</wp:term_id>
  <wp:tag_slug>certification</wp:tag_slug>
  <wp:tag_name><![CDATA[Certification]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>27998418</wp:term_id>
  <wp:tag_slug>ci-cd</wp:tag_slug>
  <wp:tag_name><![CDATA[CI/CD]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>162564</wp:term_id>
  <wp:tag_slug>cissp</wp:tag_slug>
  <wp:tag_name><![CDATA[CISSP]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>328899</wp:term_id>
  <wp:tag_slug>code-coverage</wp:tag_slug>
  <wp:tag_name><![CDATA[Code Coverage]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>439156700</wp:term_id>
  <wp:tag_slug>codecov</wp:tag_slug>
  <wp:tag_name><![CDATA[Codecov]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>447884</wp:term_id>
  <wp:tag_slug>continuous-improvement</wp:tag_slug>
  <wp:tag_name><![CDATA[Continuous Improvement]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>14467918</wp:term_id>
  <wp:tag_slug>continuous-innovation</wp:tag_slug>
  <wp:tag_name><![CDATA[Continuous Innovation]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>23255</wp:term_id>
  <wp:tag_slug>ddd</wp:tag_slug>
  <wp:tag_name><![CDATA[DDD]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>8915</wp:term_id>
  <wp:tag_slug>deployment</wp:tag_slug>
  <wp:tag_name><![CDATA[Deployment]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>28070474</wp:term_id>
  <wp:tag_slug>devops</wp:tag_slug>
  <wp:tag_name><![CDATA[DevOps]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>4504191</wp:term_id>
  <wp:tag_slug>docker</wp:tag_slug>
  <wp:tag_name><![CDATA[Docker]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>4332312</wp:term_id>
  <wp:tag_slug>flyway</wp:tag_slug>
  <wp:tag_name><![CDATA[Flyway]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>1314806</wp:term_id>
  <wp:tag_slug>gist</wp:tag_slug>
  <wp:tag_name><![CDATA[Gist]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>5603054</wp:term_id>
  <wp:tag_slug>github</wp:tag_slug>
  <wp:tag_name><![CDATA[GitHub]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>77180337</wp:term_id>
  <wp:tag_slug>gitlab</wp:tag_slug>
  <wp:tag_name><![CDATA[GitLab]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>670390955</wp:term_id>
  <wp:tag_slug>google-container-structure-tests</wp:tag_slug>
  <wp:tag_name><![CDATA[Google Container Structure Tests]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>99959</wp:term_id>
  <wp:tag_slug>hackathon</wp:tag_slug>
  <wp:tag_name><![CDATA[Hackathon]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>1308057</wp:term_id>
  <wp:tag_slug>isc2</wp:tag_slug>
  <wp:tag_name><![CDATA[ISC2]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>351789</wp:term_id>
  <wp:tag_slug>jenkins</wp:tag_slug>
  <wp:tag_name><![CDATA[Jenkins]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>820203</wp:term_id>
  <wp:tag_slug>jetbrains</wp:tag_slug>
  <wp:tag_name><![CDATA[JetBrains]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>610</wp:term_id>
  <wp:tag_slug>linux</wp:tag_slug>
  <wp:tag_name><![CDATA[Linux]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>1465584</wp:term_id>
  <wp:tag_slug>live-coding</wp:tag_slug>
  <wp:tag_name><![CDATA[Live coding]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>2079165</wp:term_id>
  <wp:tag_slug>magento</wp:tag_slug>
  <wp:tag_name><![CDATA[Magento]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>90888208</wp:term_id>
  <wp:tag_slug>magento2</wp:tag_slug>
  <wp:tag_name><![CDATA[Magento2]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>4419</wp:term_id>
  <wp:tag_slug>mysql</wp:tag_slug>
  <wp:tag_name><![CDATA[MySQL]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>7872</wp:term_id>
  <wp:tag_slug>nant</wp:tag_slug>
  <wp:tag_name><![CDATA[nant]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>7874</wp:term_id>
  <wp:tag_slug>ndepend</wp:tag_slug>
  <wp:tag_name><![CDATA[NDepend]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>21555412</wp:term_id>
  <wp:tag_slug>nuget</wp:tag_slug>
  <wp:tag_name><![CDATA[NuGet]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>20810</wp:term_id>
  <wp:tag_slug>octopus</wp:tag_slug>
  <wp:tag_name><![CDATA[Octopus]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>62063896</wp:term_id>
  <wp:tag_slug>opencover</wp:tag_slug>
  <wp:tag_name><![CDATA[OpenCover]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>178495</wp:term_id>
  <wp:tag_slug>powershell</wp:tag_slug>
  <wp:tag_name><![CDATA[PowerShell]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>1548</wp:term_id>
  <wp:tag_slug>public-speaking</wp:tag_slug>
  <wp:tag_name><![CDATA[Public speaking]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>557092</wp:term_id>
  <wp:tag_slug>rds</wp:tag_slug>
  <wp:tag_name><![CDATA[RDS]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>801</wp:term_id>
  <wp:tag_slug>security</wp:tag_slug>
  <wp:tag_name><![CDATA[Security]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>66842619</wp:term_id>
  <wp:tag_slug>snyk</wp:tag_slug>
  <wp:tag_name><![CDATA[Snyk]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>108444</wp:term_id>
  <wp:tag_slug>soft-skills</wp:tag_slug>
  <wp:tag_name><![CDATA[Soft skills]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>8071</wp:term_id>
  <wp:tag_slug>team</wp:tag_slug>
  <wp:tag_name><![CDATA[Team]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>12</wp:term_id>
  <wp:tag_slug>testing</wp:tag_slug>
  <wp:tag_name><![CDATA[Testing]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>77458018</wp:term_id>
  <wp:tag_slug>travisci</wp:tag_slug>
  <wp:tag_name><![CDATA[TravisCI]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>97330580</wp:term_id>
  <wp:tag_slug>upsource</wp:tag_slug>
  <wp:tag_name><![CDATA[UpSource]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>42722</wp:term_id>
  <wp:tag_slug>vcs</wp:tag_slug>
  <wp:tag_name><![CDATA[VCS]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>6678</wp:term_id>
  <wp:tag_slug>visual-studio</wp:tag_slug>
  <wp:tag_name><![CDATA[Visual Studio]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>800</wp:term_id>
  <wp:tag_slug>windows</wp:tag_slug>
  <wp:tag_name><![CDATA[Windows]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>1986749</wp:term_id>
  <wp:tag_slug>windows-10</wp:tag_slug>
  <wp:tag_name><![CDATA[Windows 10]]></wp:tag_name>
</wp:tag>
<wp:term>
  <wp:term_id>162567</wp:term_id>
  <wp:term_taxonomy>nav_menu</wp:term_taxonomy>
  <wp:term_slug>main</wp:term_slug>
  <wp:term_name><![CDATA[Main]]></wp:term_name>
</wp:term>
<wp:term>
  <wp:term_id>162566</wp:term_id>
  <wp:term_taxonomy>nav_menu</wp:term_taxonomy>
  <wp:term_slug>social</wp:term_slug>
  <wp:term_name><![CDATA[Social]]></wp:term_name>
</wp:term>
<generator>http://wordpress.com/</generator>
<image>
		<url>https://s0.wp.com/i/buttonw-com.png</url>
		<title>Another look on tech</title>
		<link>http://joaorosa.io</link>
	</image>
	<item>
  <title>About</title>
  <link>http://joaorosa.io/about/</link>
  <pubDate>Thu, 06 Nov 2014 23:29:04 +0000</pubDate>
  <dc:creator>joaoasrosa</dc:creator>
  <guid isPermaLink="false">http://anotherlookontech.wordpress.com/?page_id=1</guid>
  <description/>
  <content:encoded><![CDATA[I'm a Portuguese Software Developer with a huge passion for technology and currently living in the Voorburg, The Netherlands. Compulsive traveler, I had the luck to visit some beautiful places.

This is a personal blog. The opinions expressed here represent my own and not those of my employer.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>1</wp:post_id>
  <wp:post_date>2014-11-06 23:29:04</wp:post_date>
  <wp:post_date_gmt>2014-11-06 23:29:04</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>about</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>page</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:postmeta>
    <wp:meta_key>_wp_page_template</wp:meta_key>
    <wp:meta_value><![CDATA[default]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpcom_is_markdown</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>6</wp:comment_id>
    <wp:comment_author><![CDATA[Tom Smith]]></wp:comment_author>
    <wp:comment_author_email>toms@dzone.com</wp:comment_author_email>
    <wp:comment_author_url>http://www.dzone.com</wp:comment_author_url>
    <wp:comment_author_IP>98.122.136.130</wp:comment_author_IP>
    <wp:comment_date>2016-12-16 22:15:51</wp:comment_date>
    <wp:comment_date_gmt>2016-12-16 22:15:51</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[If you'd like to share your blog content on DZone.com, please let me know. We're always looking for more information of value to help developers learn faster and become more successful.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:2:{s:4:"time";d:1481926552.470693111419677734375;s:5:"event";s:9:"check-ham";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_notqueued</wp:meta_key>
      <wp:meta_value>1481978498</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:2:{s:4:"time";d:1481930781.088654994964599609375;s:5:"event";s:9:"check-ham";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1481978499</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:3:{s:4:"time";d:1481978499.7130200862884521484375;s:5:"event";s:15:"status-approved";s:4:"user";s:10:"joaoasrosa";}</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>7</wp:comment_id>
    <wp:comment_author><![CDATA[joaoasrosa]]></wp:comment_author>
    <wp:comment_author_email>joaoasrosa@gmail.com</wp:comment_author_email>
    <wp:comment_author_url>http://anotherlookontech.wordpress.com</wp:comment_author_url>
    <wp:comment_author_IP>109.255.82.3</wp:comment_author_IP>
    <wp:comment_date>2016-12-17 12:43:04</wp:comment_date>
    <wp:comment_date_gmt>2016-12-17 12:43:04</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Hi Tom,
For sure, I can share blog content on DZone.com. Let's chat in private. Cheers]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>6</wp:comment_parent>
    <wp:comment_user_id>74848251</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1481978585</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:3:{s:4:"time";d:1481978585.7524530887603759765625;s:5:"event";s:9:"check-ham";s:4:"user";s:10:"joaoasrosa";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_notqueued</wp:meta_key>
      <wp:meta_value>1481978586</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title>My CISSP journey</title>
  <link>http://joaorosa.io/2016/05/22/my-cissp-journey/</link>
  <pubDate>Sun, 22 May 2016 20:01:28 +0000</pubDate>
  <dc:creator>joaoasrosa</dc:creator>
  <guid isPermaLink="false">https://anotherlookontech.wordpress.com/?p=5</guid>
  <description/>
  <content:encoded><![CDATA[In this post I'm writing about my CISSP journey. For those who aren't aware of what CISSP stand for, it's (probably) the most respectful security certification. It's under (ISC)<sup>2</sup> portfolio and you can find more information <a href="https://www.isc2.org/cissp/default.aspx" target="_blank">here</a>.

My journey started in November&nbsp;2015, when I asked myself "What about now?". Back then I'd some career considerations, and floating in the back on my head was the idea to continue to build&nbsp;a solid software development career, but what was the next step? Until then I did the typical technical certifications, without a major challenge.&nbsp;The first step was to research the market, building my opinion for&nbsp;the next move. During the research, the (ISC)<sup>2</sup> certifications always popped up, and I decided to give it a go, pursuing the CISSP certification.

Moved to the next&nbsp;round of research, I started to collect information about similar experiences in order to start the exam preparation. Among them I can point out the Facebook group <a href="https://www.facebook.com/groups/1525346961013038/" target="_blank">CISSP Exam Preparation - Study Notes and Theory</a>&nbsp;as the main source, due its social nature. I found out interesting testimonials, helping me to gauge the CISSP level of difficulty. Plus, during a business trip to Paris to prepare a product presentation with a partner, I had an amazing talk with a security expert about the pros and cons around CISSP.&nbsp;Having the opportunity to ask all the questions that had been floating in my mind, gave me the clarity into the right path.

When I returned to Dublin, I had a great conversation with my wife. Explained the nature of the exam, the time that would be consumed during the process, and the potential moments that we needed to give out in order to achieve the goal. As always, she supported my decision, and her effort was the biggest contribution towards the certification. I can't express my gratitude&nbsp;for all the support that I had received!

The first (real) step to crack the exam was to draw the "My CISSP" project plan. I laid down hard figures about the time it would take me to study and be ready. My assumptions were:
<ul>
	<li>Study every week days and 1 day over the&nbsp;weekend</li>
	<li>The study periods should never be less than 1 hour nor longer than 3 hours</li>
	<li>Read at least 2 good books</li>
</ul>
Based on this assumptions I assumed that I would be ready in 3 months. To make myself into it, I scheduled the exam for the 16<sup>th</sup> of August 2016. It was late April and until the exam date, I would have my summer holidays and I was leading a team in charge of delivering a mission-critical component for our company product. I added some time for it, knowing that, time may arise when I would be so busy that I couldn't handle the high demand of manage the release of a new component and focus on the CISSP exam.

During my research, 3 books stood out from&nbsp;the crowd:
<ul>
	<li><a href="https://www.amazon.co.uk/Certified-Information-Security-Professional-Official/dp/1119042712/" target="_blank">CISSP (ISC)<sup>2</sup> Certified Information Systems Security Professional Official Study Guide, 7<sup>th</sup> Edition by&nbsp;James M. Stewart, Mike Chapple and Darril Gibson</a></li>
	<li><a href="https://www.amazon.co.uk/CISSP-Study-Guide-Eric-Conrad/dp/0128024372/" target="_blank">CISSP Study Guide, 3<sup>rd</sup> Edition by&nbsp; Eric Conrad, Seth Misenar and&nbsp;Joshua Feldman</a></li>
	<li><a href="https://www.amazon.co.uk/CISSP-All---One-Exam-Guide/dp/0071781749/" target="_blank">CISSP All-in-One Exam Guide, 6<sup>th</sup> Edition by Shon Harris</a></li>
</ul>
From this list I chose CISSP Study Guide and CISSP (ISC)2 Certified Information Systems Security Professional Official Study Guide because:
<ul>
	<li>In 2015 (ISC)<sup>2</sup> change the CISSP CBK domains from 10 to 8 and update the contents, e. g., included topics about DevOps and Cloud Computing</li>
	<li>The contents of each book needed to be updated to match the updated CBK. Due to the unfortunately decease&nbsp;of Shon Harris, the CISSP All-in-One Exam Guide was out of date (but what the time that I'm writing this blog post a <a href="https://www.amazon.co.uk/CISSP-All---One-Guide-Seventh/dp/0071849270">new edition</a> is in the market)</li>
	<li>From my analysis I didn't like the writing style in CISSP All-in-One Exam Guide</li>
	<li>CISSP Study Guide summarize the CISSP CBK domains in an helpful&nbsp;way</li>
	<li>CISSP (ISC)<sup>2</sup> Certified Information Systems Security Professional Official Study Guide go one step further and have a logical chapter separation and repeat concepts throughout the&nbsp;chapters in order to reinforce it, plus have the perfect amount of information around each CISSP domain topic</li>
</ul>
The second step was to design the study strategy for&nbsp;the chosen resources. I chose to build a mind map and start with the CISSP Study Guide book since it&nbsp;have a good summary of the CISSP CBK; then move to the CISSP (ISC)<sup>2</sup> Certified Information Systems Security Professional Official Study Guide to get a comprehensive understanding of all the concepts details. As a fellow says "Dot the i's and cross the t's"! The final piece in my master plan was to do as many exams/questions in the last 2 weeks before the exam date. Back then it was unclear to me the questions source, but the runners were <a href="https://www.skillset.com/" target="_blank">Skillset</a> and <a href="https://cccure.training/" target="_blank">CCure</a>. I left this decision closer to the big date.

I ordered the&nbsp;CISSP Study Guide and started the study in early May 2016&nbsp;and&nbsp;started to build my <a href="https://dl.dropboxusercontent.com/u/8156472/CISSP%20mind%20map.smmx" target="_blank">mind map</a>&nbsp;(I used the <a href="https://play.google.com/store/apps/details?id=com.modelmakertools.simplemindpro" target="_blank">SimpleMind&nbsp;Android app</a> to build it). At the same time I started to use the <a href="https://play.google.com/store/apps/details?id=com.learnzapp.wileycissp" target="_blank">Official (ISC)<sup>2</sup> CISSP Android app</a>, in order to test my knowledge throughout the domains during my commute time. I found&nbsp;it useful, testing the knowledge with the domain flashcards and questions. Back to the first book, it really paid off as first resource. Concise, well written, lots of diagrams to illustrate the concepts/use cases, giving the core information. After it I moved on to&nbsp;the&nbsp;CISSP (ISC)<sup>2</sup> Certified Information Systems Security Professional Official Study Guide in early&nbsp;July. The book is more detailed than CISSP Study Guide, and I found it the best complement that I could get. Well written as well, have a lack of diagrams comparing to CISSP Study Guide, but compensates with the huge amount of details. From the 2 books IÂ´ve answered all the chapter questions, following the tips from the authors to try to get a mark of 80% or higher in order to be prepared for&nbsp;the exam. My lowest mark was 75% in 2 of the 8 domains, and that pointed out what were my weakest domains of knowledge.

We all know the time flies. I found myself in early&nbsp;August 2016 and I only had read the first chapters of the second book! Plus I'd just return from my holidays, and I was catching up with the latest company developments (we all know how hard it is to get back from vacations). I was not prepared for the exam, and I known that I would fail! So I decided to postpone the exam date to the 13<sup>th</sup> of September 2016, giving myself an extra month to prepare. I finished up the book 2 weeks before the exam date, and started the final preparation stage to it. Started with the research for the best suited exam questions to push my preparation. After a trial run, the option fallen over the Skillset website. To warm up I just used&nbsp;the&nbsp;CISSP (ISC)<sup>2</sup> Certified Information Systems Security Professional Official Study Guide online exams (it offers 4 training&nbsp;exams with the full 250 questions) and ticked the weakest domains (again) from the failed questions. During the 1<sup>st</sup> and Â½&nbsp;week I did 3 exams and revisited the contents where I felt that I would fail. The clock was ticking and I was 5 days from the exam date. I'd the Skillset account and 1 last training&nbsp;exam to do. I just dived into the Skillset questions, testing&nbsp;my knowledge throughout the domains, gauging my skills. Doing it this way, I just polished the outstanding concepts, and left the last training exam for the last day. Doing it as a rehearsal I've got a good mark, and it took me less than 4 hours to do the first round&nbsp;and review the exam. Not bad at all!

The last piece of&nbsp;the master plan was to get the right strategy for the exam. The exam has&nbsp;250 questions and we have 6 hours to complete it. Seems a lot of time, but in average we only get 90 seconds per question. Doesn't give room for blackouts... My plan was:
<ul>
	<li>Do regular breaks, ideally every 45/60 minutes</li>
	<li>Eat even if I wasn't hungry. That would keep the energy levels up, avoiding&nbsp;hunger distractions</li>
	<li>Be prepare to do a first round of questions, mark down the questions that the answer didn't pop up to my head for a second review, avoiding waste of time</li>
	<li>Keep calm, and write down the progress in paper (number of expected questions and the expected time to do it vs number of actual answered questions and the time used)</li>
</ul>
Sounds a reasonable plan, and I felt prepare to do it. The 13<sup>th</sup> of September 2016 arrived, and my exam was schedule for 9.30AM in <a href="http://www.nhireland.ie/" target="_blank">New Horizons facilities</a>. I'd a good breakfast and prepared a few snacks for the upcoming challenge. Light sandwichesâ, Red Bull, chocolate bar and peanut snacks. In addition to that, New Horizons provided fruit, cookies, water, tea and coffee. It was just enough for what I needed. I've arrived to the test centre and did the usual security process in order to start the exam. After the procedures were done, I walked into to testing room and sat down at my workstation. The final step of the challenge had just begun! A spike of adrenaline just rushed into my body and I took a deep breath and started to read the exam instructions. That was the moment to relax and get into it!

I went along with my plan. Did the questions that the answer popped up into my head, didn't waste time with more complicated questions, and marked some questions when I was not sure about the right answer. Followed the breaks that I planned, ate and drank in regular breaks and kept the focus. At one stage&nbsp;of&nbsp;the exam my mind started to drift away (is not easy to keep the focus for more than 2 hours), and I took a longer break to refocus. The exam started with some odd questions, and I just marked then down, and thought WTF?! and moved on. Then I'd some no-brainer questions that gave me the right level of confidence and I did the first round over the exam in 2:15 hours. Not bad, around 70% of the exam was done in less than 3 hours, 2 breaks done and anxiety under control! I took a longer break, and prepared myself for the second round of the exam. Kept the strategy and finished up the review after around 2:30 hours (4:45 hours in total). Just decided to commit to the exam, there was no point to have a brain meltdown, however I was not 100% sure that I would pass due the exam difficulty. But wait, I just prepared myself during 4 months, studied 2 books, answered more than 3000 questions, and I was having second thoughts? Naaa, it can't be! Submitted it and left the room... Once I arrived to the clerk desk, she just said: "Congratulations, you passed the exam!". The final spike just went down my spine. The task was done! Happy days, all the hard work paid off. A sense of realization just fulfilled my mind.

Next day I received the e-mail with the result confirmation and the invite to start the endorsement process. At the moment that I'm writing this post I submitted my career evidences, and I'm waiting for the endorsement process to finish. From now on a new challenge began,&nbsp;maintain the certification in a good condition.

As summary&nbsp;of this long post my advices are:
<ul>
	<li>Analyse if CISSP is the right career&nbsp;path</li>
	<li>Be prepare for a tough challenge</li>
	<li>Invest your personal time to prepare it, be on board to give up some quality time</li>
	<li>Get good resources</li>
	<li>Have a study strategy, measure the progress during that time in order to fill the gaps</li>
	<li>Do a lot of questions near the exam due date</li>
	<li>Revisit the weakest domains/topics&nbsp;to enforce the concepts</li>
	<li>Have an exam strategy, avoiding pitfalls</li>
	<li>Do not stress during the exam.&nbsp;Keep it together!</li>
	<li>READ all the questions properly, the devil is in the details. Some of the questions are tricky, pay attention to vital keywords</li>
</ul>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>5</wp:post_id>
  <wp:post_date>2016-05-22 20:01:28</wp:post_date>
  <wp:post_date_gmt>2016-05-22 20:01:28</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>my-cissp-journey</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="certification"><![CDATA[Certification]]></category>
  <category domain="post_tag" nicename="cissp"><![CDATA[CISSP]]></category>
  <category domain="post_tag" nicename="isc2"><![CDATA[ISC2]]></category>
  <category domain="category" nicename="security"><![CDATA[Security]]></category>
  <category domain="category" nicename="training"><![CDATA[Training]]></category>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[27188657783]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_google_plus_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://plus.google.com/105879670784970671735/posts/QiXrn3UzQfh]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_15567246</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_15420870</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:2:{s:7:"twitter";a:1:{i:15487188;s:56:"https://twitter.com/joaoasrosa/status/779984645651705856";}s:8:"facebook";a:1:{i:15487197;s:38:"https://facebook.com/10154763407093287";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_15638091</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_15487188</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[joaoasrosa]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_linkedin_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://www.linkedin.com/updates?discuss=&scope=27794317&stype=M&topic=6185750338113409024&type=U&a=7v6V]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_15638097</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_15487191</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_15638104</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_15487197</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Build a notepad++ plugin frio c#</title>
  <link>http://joaorosa.io/?p=9</link>
  <pubDate>Mon, 30 Nov -0001 00:00:00 +0000</pubDate>
  <dc:creator>joaoasrosa</dc:creator>
  <guid isPermaLink="false">https://anotherlookontech.wordpress.com/?p=9</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>9</wp:post_id>
  <wp:post_date>2016-06-18 13:44:21</wp:post_date>
  <wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name/>
  <wp:status>draft</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="sem-categoria"><![CDATA[Sem categoria]]></category>
</item>
<item>
  <title>Twitter</title>
  <link>http://joaorosa.io/2016/09/06/twitter/</link>
  <pubDate>Tue, 06 Sep 2016 08:29:44 +0000</pubDate>
  <dc:creator>joaoasrosa</dc:creator>
  <guid isPermaLink="false">https://anotherlookontech.wordpress.com/2016/09/06/twitter/</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>15</wp:post_id>
  <wp:post_date>2016-09-06 08:29:44</wp:post_date>
  <wp:post_date_gmt>2016-09-06 08:29:44</wp:post_date_gmt>
  <wp:comment_status>closed</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>twitter</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>1</wp:menu_order>
  <wp:post_type>nav_menu_item</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="nav_menu" nicename="social"><![CDATA[Social]]></category>
  <wp:postmeta>
    <wp:meta_key>_publicize_pending</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_menu_item_type</wp:meta_key>
    <wp:meta_value><![CDATA[custom]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_menu_item_menu_item_parent</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_menu_item_object_id</wp:meta_key>
    <wp:meta_value><![CDATA[15]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_menu_item_object</wp:meta_key>
    <wp:meta_value><![CDATA[custom]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_menu_item_target</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_menu_item_classes</wp:meta_key>
    <wp:meta_value><![CDATA[a:1:{i:0;s:0:"";}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_menu_item_xfn</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_menu_item_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://twitter.com/joaoasrosa]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>LinkedIn</title>
  <link>http://joaorosa.io/2016/09/06/linkedin/</link>
  <pubDate>Tue, 06 Sep 2016 08:29:44 +0000</pubDate>
  <dc:creator>joaoasrosa</dc:creator>
  <guid isPermaLink="false">https://anotherlookontech.wordpress.com/2016/09/06/linkedin/</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>16</wp:post_id>
  <wp:post_date>2016-09-06 08:29:44</wp:post_date>
  <wp:post_date_gmt>2016-09-06 08:29:44</wp:post_date_gmt>
  <wp:comment_status>closed</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>linkedin</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>2</wp:menu_order>
  <wp:post_type>nav_menu_item</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="nav_menu" nicename="social"><![CDATA[Social]]></category>
  <wp:postmeta>
    <wp:meta_key>_publicize_pending</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_menu_item_type</wp:meta_key>
    <wp:meta_value><![CDATA[custom]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_menu_item_menu_item_parent</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_menu_item_object_id</wp:meta_key>
    <wp:meta_value><![CDATA[16]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_menu_item_object</wp:meta_key>
    <wp:meta_value><![CDATA[custom]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_menu_item_target</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_menu_item_classes</wp:meta_key>
    <wp:meta_value><![CDATA[a:1:{i:0;s:0:"";}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_menu_item_xfn</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_menu_item_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://www.linkedin.com/in/joaoasrosa]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>GitHub</title>
  <link>http://joaorosa.io/2016/09/06/github/</link>
  <pubDate>Tue, 06 Sep 2016 08:29:44 +0000</pubDate>
  <dc:creator>joaoasrosa</dc:creator>
  <guid isPermaLink="false">https://anotherlookontech.wordpress.com/2016/09/06/github/</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>17</wp:post_id>
  <wp:post_date>2016-09-06 08:29:44</wp:post_date>
  <wp:post_date_gmt>2016-09-06 08:29:44</wp:post_date_gmt>
  <wp:comment_status>closed</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>github</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>3</wp:menu_order>
  <wp:post_type>nav_menu_item</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="nav_menu" nicename="social"><![CDATA[Social]]></category>
  <wp:postmeta>
    <wp:meta_key>_publicize_pending</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_menu_item_type</wp:meta_key>
    <wp:meta_value><![CDATA[custom]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_menu_item_menu_item_parent</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_menu_item_object_id</wp:meta_key>
    <wp:meta_value><![CDATA[17]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_menu_item_object</wp:meta_key>
    <wp:meta_value><![CDATA[custom]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_menu_item_target</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_menu_item_classes</wp:meta_key>
    <wp:meta_value><![CDATA[a:1:{i:0;s:0:"";}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_menu_item_xfn</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_menu_item_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://github.com/joaoasrosa/]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Home</title>
  <link>http://joaorosa.io/2016/09/06/home/</link>
  <pubDate>Tue, 06 Sep 2016 08:30:19 +0000</pubDate>
  <dc:creator>joaoasrosa</dc:creator>
  <guid isPermaLink="false">https://anotherlookontech.wordpress.com/2016/09/06/home/</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>18</wp:post_id>
  <wp:post_date>2016-09-06 08:30:19</wp:post_date>
  <wp:post_date_gmt>2016-09-06 08:30:19</wp:post_date_gmt>
  <wp:comment_status>closed</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>home</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>1</wp:menu_order>
  <wp:post_type>nav_menu_item</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="nav_menu" nicename="main"><![CDATA[Main]]></category>
  <wp:postmeta>
    <wp:meta_key>_publicize_pending</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_menu_item_type</wp:meta_key>
    <wp:meta_value><![CDATA[custom]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_menu_item_menu_item_parent</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_menu_item_object_id</wp:meta_key>
    <wp:meta_value><![CDATA[18]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_menu_item_object</wp:meta_key>
    <wp:meta_value><![CDATA[custom]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_menu_item_target</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_menu_item_classes</wp:meta_key>
    <wp:meta_value><![CDATA[a:1:{i:0;s:0:"";}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_menu_item_xfn</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_menu_item_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://anotherlookontech.wordpress.com/]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title/>
  <link>http://joaorosa.io/2016/09/06/19/</link>
  <pubDate>Tue, 06 Sep 2016 08:30:19 +0000</pubDate>
  <dc:creator>joaoasrosa</dc:creator>
  <guid isPermaLink="false">https://anotherlookontech.wordpress.com/2016/09/06/19/</guid>
  <description/>
  <content:encoded><![CDATA[ ]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>19</wp:post_id>
  <wp:post_date>2016-09-06 08:30:19</wp:post_date>
  <wp:post_date_gmt>2016-09-06 08:30:19</wp:post_date_gmt>
  <wp:comment_status>closed</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>19</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>3</wp:menu_order>
  <wp:post_type>nav_menu_item</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="nav_menu" nicename="main"><![CDATA[Main]]></category>
  <wp:postmeta>
    <wp:meta_key>_publicize_pending</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_menu_item_type</wp:meta_key>
    <wp:meta_value><![CDATA[post_type]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_menu_item_menu_item_parent</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_menu_item_object_id</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_menu_item_object</wp:meta_key>
    <wp:meta_value><![CDATA[page]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_menu_item_target</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_menu_item_classes</wp:meta_key>
    <wp:meta_value><![CDATA[a:1:{i:0;s:0:"";}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_menu_item_xfn</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_menu_item_url</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Update project.json version number in AppVeyor</title>
  <link>http://joaorosa.io/2016/09/14/update-project-json-version-number-in-appveyor/</link>
  <pubDate>Wed, 14 Sep 2016 13:34:40 +0000</pubDate>
  <dc:creator>joaoasrosa</dc:creator>
  <guid isPermaLink="false">https://anotherlookontech.wordpress.com/?p=28</guid>
  <description/>
  <content:encoded><![CDATA[Today was a debut using <a href="https://help.github.com/articles/about-gists/">GitHub Gist</a>. In one of my GitHub projects, I need a close integration between the Continuous Integration tool (in this case <a href="https://www.appveyor.com/">AppVeyor</a>) and my .NET Core project, specifically inÂ how to update the version of the DLL based on the version in AppVeyor?

To sort out this, I use my Powershell ninja skills to write the script:

https://gist.github.com/joaoasrosa/8b3a9681c6153f9abed94af7089b222a

And integrate it with the appveyor.yml before_build event! Simple and do the job!]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>28</wp:post_id>
  <wp:post_date>2016-09-14 13:34:40</wp:post_date>
  <wp:post_date_gmt>2016-09-14 13:34:40</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>update-project-json-version-number-in-appveyor</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="appveyor"><![CDATA[AppVeyor]]></category>
  <category domain="category" nicename="continuous-integration"><![CDATA[Continuous Integration]]></category>
  <category domain="post_tag" nicename="gist"><![CDATA[Gist]]></category>
  <category domain="post_tag" nicename="github"><![CDATA[GitHub]]></category>
  <category domain="category" nicename="oss"><![CDATA[OSS]]></category>
  <category domain="post_tag" nicename="powershell"><![CDATA[PowerShell]]></category>
  <wp:postmeta>
    <wp:meta_key>publicize_google_plus_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://plus.google.com/105879670784970671735/posts/LCszMFq8xq1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_published</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_client_id</wp:meta_key>
    <wp:meta_value><![CDATA[-1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[26817621406]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_15567246</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_15420870</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:2:{s:7:"twitter";a:1:{i:15487188;s:56:"https://twitter.com/joaoasrosa/status/776051553715105794";}s:8:"facebook";a:1:{i:15487197;s:38:"https://facebook.com/10154730599578287";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_15638091</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_15487188</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[joaoasrosa]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_linkedin_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://www.linkedin.com/updates?discuss=&scope=27794317&stype=M&topic=6181817245799325696&type=U&a=n_Id]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_15638097</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_15487191</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_15638104</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_15487197</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Software</title>
  <link>http://joaorosa.io/software/</link>
  <pubDate>Sun, 25 Sep 2016 10:10:16 +0000</pubDate>
  <dc:creator>joaoasrosa</dc:creator>
  <guid isPermaLink="false">https://anotherlookontech.wordpress.com/?page_id=534</guid>
  <description/>
  <content:encoded><![CDATA[I've contributed to some open source projects. Here is the (very short) list:

<ul>
    <li><a href="https://github.com/joaoasrosa/cake-ndepend" target="_blank" rel="noopener">Cake NDepend</a> - Cake Build Addin to invoke the <a href="https://www.ndepend.com/" target="_blank" rel="noopener">NDepend</a> Code Quality tool</li>
    <li><a href="https://cakebuild.net/">Cake Build</a> - Cake Build is a C# DSL to streamline your builds, running in a multi-OS scenario</li>
    <li><a href="https://github.com/aws-quickstart/quickstart-magento" target="_blank" rel="noopener noreferrer">AWS Quickstart Magento</a> - AWS Quickstart Magento is the bootstrap to deploy Magento 2.x on AWS infrastructure. Enhancements to installation scripts</li>
    <li><a href="https://github.com/OctopusDeploy/Library">Octopus Deploy Library</a> - The <a href="https://octopus.com/">Octopus Deploy</a> Library with common scripts from day to day tasks that aren't included in the core product. Bug fixing and enhancements to a few templates</li>
    <li><a href="https://github.com/joaoasrosa/nppxmltreeview">Notepad++ XML TreeView Plugin</a> - A Notepad++ plugin to display an XML document as treeview. Useful when working with large documents, has some features, such as, select a node in the treeview and the correspondent text is selected. Writing in C#, the plugin can be downloaded and enabled using the Notepad++ Plugin Manager</li>
</ul>

&nbsp;]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>534</wp:post_id>
  <wp:post_date>2016-09-25 12:10:16</wp:post_date>
  <wp:post_date_gmt>2016-09-25 10:10:16</wp:post_date_gmt>
  <wp:comment_status>closed</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>software</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>page</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:postmeta>
    <wp:meta_key>_publicize_pending</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpcom_is_markdown</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title/>
  <link>http://joaorosa.io/2016/09/26/541/</link>
  <pubDate>Mon, 26 Sep 2016 07:27:45 +0000</pubDate>
  <dc:creator>joaoasrosa</dc:creator>
  <guid isPermaLink="false">https://anotherlookontech.wordpress.com/2016/09/26/541/</guid>
  <description/>
  <content:encoded><![CDATA[ ]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>541</wp:post_id>
  <wp:post_date>2016-09-26 07:27:45</wp:post_date>
  <wp:post_date_gmt>2016-09-26 07:27:45</wp:post_date_gmt>
  <wp:comment_status>closed</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>541</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>2</wp:menu_order>
  <wp:post_type>nav_menu_item</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="nav_menu" nicename="main"><![CDATA[Main]]></category>
  <wp:postmeta>
    <wp:meta_key>_menu_item_target</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_menu_item_object</wp:meta_key>
    <wp:meta_value><![CDATA[page]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_menu_item_object_id</wp:meta_key>
    <wp:meta_value><![CDATA[534]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_menu_item_menu_item_parent</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_menu_item_type</wp:meta_key>
    <wp:meta_value><![CDATA[post_type]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_pending</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_menu_item_classes</wp:meta_key>
    <wp:meta_value><![CDATA[a:1:{i:0;s:0:"";}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_menu_item_xfn</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_menu_item_url</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Integrate .NET Core, AppVeyor, OpenCover and Codecov</title>
  <link>http://joaorosa.io/2016/10/12/integrate-net-core-appveyor-opencover-and-codecov/</link>
  <pubDate>Wed, 12 Oct 2016 15:10:55 +0000</pubDate>
  <dc:creator>joaoasrosa</dc:creator>
  <guid isPermaLink="false">https://anotherlookontech.wordpress.com/?p=543</guid>
  <description/>
  <content:encoded><![CDATA[As a developer, I need to take a good rest at night. In my line of workÂ the only way to achieve it is using an integrated workflow pipeline, aka Source Code Management (SCM), Continuous Integration (CI) and Continuous Deployment (CD) with some tools in the middle.

For my <a href="https://github.com/joaoasrosa/unittestsexternalsources">new pet project</a>Â (I will write about it once reach a good maturity level) I use this set of tools/technologies:
<ul>
	<li><a href="https://www.microsoft.com/net/core">.NET Core</a> as the framework</li>
	<li><a href="https://github.com/">GitHub</a> asÂ SCM</li>
	<li><a href="https://www.appveyor.com/">AppVeyor</a> as CI &amp; CD</li>
	<li><a href="https://github.com/OpenCover/opencover">OpenCover</a>Â as Code Coverage Reporting Generator</li>
	<li><a href="https://codecov.io/">CodeCov</a> as Code Coverage Repository</li>
	<li><a href="http://nuget.org/">NuGet</a> as repository for project packages</li>
</ul>
OpenCover is the most used framework to generate code coverage reports for .NET framework. It's open source and well maintain (updated to work with .NET Core).

Codecov is a commercial project from <a href="https://twitter.com/iopeak">Steve Peak</a>, free for open source projects, and hasÂ powerful visualisations from the code coverage report. Can be used with a tonne of frameworks/languages, using OpenCover report format for the .NET framework. Is my preferred platform, since Steve has a great customer service support.

MyÂ integrated workflow pipeline is:
<ol>
	<li>Commit to GitHub project</li>
	<li>AppVeyor is configured to be triggered when a new commit is done</li>
	<li>AppVeyor builds the solution, run the tests and generate the code coverage report</li>
	<li>AppVeyor publish the code coverage report to CodeCov</li>
</ol>
To manage the AppVeyor actions during the build and tests phases I just develop a PowerShell script to run the generate the code coverage report using OpenCover for the projects/classes under test:

https://gist.github.com/joaoasrosa/80a322d57ee6243374f2463f9a41d05f

The script instructions do the following:
<ol>
	<li>Set as parameters the general configurations, such as locations of the code coverage report, OpenCover and .NET, using the <a href="https://www.appveyor.com/docs/environment-variables/">AppVeyor environment variables</a> to set the correct path</li>
	<li>Set the parameters to test the WebAPplicationAssemblyStorage project, excluding a dummy class, running the OpenCover console using the parameters</li>
	<li>Set the parameters to test the WebApp project, excluding all the bootstrapping code generated by the .NET framework when a web app is created, running the OpenCover console using the parameters</li>
	<li>Copy the code coverage report to the AppVeyor artifacts</li>
	<li>Set the Python version in the PATH environment variable, installing Python Package Manager and Codecov script, and uploading the code coverage report to Codecov</li>
</ol>
TheÂ Powershell is integrated into <a href="https://github.com/joaoasrosa/unittestsexternalsources/blob/master/appveyor.yml">appveyor.yml</a> file, integrated into the project solution. The script runs in the 'test_script' step.

NOTE: at the time that you are reading this post the script can be different. If that is the case please leave a comment and I will update the Gist. :)]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>543</wp:post_id>
  <wp:post_date>2016-10-12 15:10:55</wp:post_date>
  <wp:post_date_gmt>2016-10-12 15:10:55</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>integrate-net-core-appveyor-opencover-and-codecov</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="appveyor"><![CDATA[AppVeyor]]></category>
  <category domain="post_tag" nicename="code-coverage"><![CDATA[Code Coverage]]></category>
  <category domain="post_tag" nicename="codecov"><![CDATA[Codecov]]></category>
  <category domain="category" nicename="continuous-deployment"><![CDATA[Continuous Deployment]]></category>
  <category domain="category" nicename="continuous-integration"><![CDATA[Continuous Integration]]></category>
  <category domain="post_tag" nicename="gist"><![CDATA[Gist]]></category>
  <category domain="post_tag" nicename="github"><![CDATA[GitHub]]></category>
  <category domain="post_tag" nicename="nuget"><![CDATA[NuGet]]></category>
  <category domain="post_tag" nicename="opencover"><![CDATA[OpenCover]]></category>
  <category domain="category" nicename="oss"><![CDATA[OSS]]></category>
  <category domain="post_tag" nicename="powershell"><![CDATA[PowerShell]]></category>
  <category domain="post_tag" nicename="testing"><![CDATA[Testing]]></category>
  <wp:postmeta>
    <wp:meta_key>_rest_api_published</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_client_id</wp:meta_key>
    <wp:meta_value><![CDATA[-1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_google_plus_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://plus.google.com/105879670784970671735/posts/ewE93EmDSew]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[27772446111]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_15567246</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_15420870</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:2:{s:7:"twitter";a:1:{i:15487188;s:56:"https://twitter.com/joaoasrosa/status/786232002001248256";}s:8:"facebook";a:1:{i:15487197;s:38:"https://facebook.com/10154816127488287";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_15638091</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_15487188</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[joaoasrosa]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_linkedin_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://www.linkedin.com/updates?discuss=&scope=27794317&stype=M&topic=6191997695515717632&type=U&a=W5mG]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_15638097</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_15487191</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_15638104</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_15487197</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>323</wp:comment_id>
    <wp:comment_author><![CDATA[AppVeyor, Travis CI and a .Net Core application - The running developer]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>https://marxiati.net/blog/2018/04/appveyor-travis-ci-and-a-net-core-application/</wp:comment_author_url>
    <wp:comment_author_IP>85.214.55.62</wp:comment_author_IP>
    <wp:comment_date>2018-04-08 20:26:57</wp:comment_date>
    <wp:comment_date_gmt>2018-04-08 18:26:57</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[&#8230;] work for me. I think it&#039;s describe the way for non .Net Core projects. Then I stumble upon this blog post that gives me more hints and also this one is a good read. After getting this all together and many [&#8230;]]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1523212141</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:3:{s:4:"time";d:1523212141.6178929805755615234375;s:5:"event";s:15:"status-approved";s:4:"user";s:10:"joaoasrosa";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:3:{s:4:"time";d:1523212143.745192050933837890625;s:5:"event";s:17:"status-unapproved";s:4:"user";s:10:"joaoasrosa";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:3:{s:4:"time";d:1523212144.53934001922607421875;s:5:"event";s:15:"status-approved";s:4:"user";s:10:"joaoasrosa";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:2:{s:4:"time";d:1523212018.400577068328857421875;s:5:"event";s:9:"check-ham";}</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title>Changing the operations of a Software Company - Part I</title>
  <link>http://joaorosa.io/2016/12/02/changing-the-operations-of-a-software-company-part-i/</link>
  <pubDate>Fri, 02 Dec 2016 14:23:08 +0000</pubDate>
  <dc:creator>joaoasrosa</dc:creator>
  <guid isPermaLink="false">https://anotherlookontech.wordpress.com/?p=631</guid>
  <description/>
  <content:encoded><![CDATA[Agile is great... and sometimes painful. Do not get me wrong, I love an Agile work environment when everyone is keen to "Try, Fail, Fix, Learn and Move On". For those ones that work in the software development space, we have more tasks than develop software.

One of the tasks, usually in Operations space. In the recent years we assist to the DevOps movement, however, most of the companies call themselves DevOps, "forgetting" the Ops bit, e. g., they continue to do Operations in an old fashion. Old fashion can be translated into doing manual deployments, minimal change control management, cumbersome&nbsp;release management, documentation everywhere, among others.

Due to the nature of a Distributed and Enterprise Software Application, the deployment of services and applications can be... well, complicated! Moreover when the software is metadata driven and allows multiple configurations that influence the product behaviour. On top of that, the software is deployed on customer premises, where the company do not have control over the deployment process, apart from (the obvious) installation notes.

Today we will focus on the first part of the problem: How can we improve the development process?

Let's put things in context: we already have a build automation using Jenkins, and using&nbsp;NAnt scripts the solution shell is built (the base web applications and services, with the default configuration). However, this is not enough, since it involves manual (and repetitive) tasks, such as overriding the configuration, or do the manual deployment. All this work, in an average&nbsp;case, can take up to a day for an experienced developer familiar with the operations.

Personally, I automate the tasks if I need to repeat it. And this scenario just bugs me... It's needed to be sorted out, ASAP! &nbsp;After a bit of investigation, and given the technological constraints&nbsp;(Microsoft Stack, and Jenkins as CI), we decided to give a try to <a href="https://octopus.com/">Octopus Deploy</a>. Octopus Deploy is an Automated deployment&nbsp;tool for .NET, develop from a good crowd in Australia!

To test if Octopus was viable, we decide to apply to a new project, decreasing the risk involved in the implementation of a new tool. The goal of the project was to create a new component that will be part of the product core, and the development team has multiple environments and wants to build a fair number of automated testing around the component. To speed up the development we need to cut the deployment time (and manual tasks by the way).

In the inception of the project, we identify the environments, the development workflow and the required configurations. We set up an Octopus project to address and fulfil the requirements, and we start the project development. As any technology adoption, we did some mistakes during the configuration of the tool, but we are in an Agile environment where the turnover is quick. After a couple of sprints, we start to see (and fell) the benefits. :) They were:
<ul>
	<li>End-to-end integration, since the commit to the source control, to the software deployment and automated testing</li>
	<li>Quick and dirty testing in the environments, without&nbsp;the fear of broke something. Since the configurations are centralised in Octopus, the team can test different configuration variants to tune the component, and even break the environment. &nbsp;If this happened it just redeploy the solution again</li>
	<li>Promotion between environments with one click</li>
	<li>Change management tracking, where all the configuration changes are logged</li>
	<li>Increase the resilience of the release management process, where within an application it is possible to improve the process</li>
	<li>Environment changes can be accommodated easily since it is a configuration, such as adding or removing machines from it</li>
</ul>
The test was a success, and it shown to other teams how we can optimise the development process without a huge disruption of the work environment. Currently, the process as been rollout to other projects, and everyone is happy with the new process. It requires upfront configuration and agreement on the workflow, but down the line, the team will save time with the repetitive and "trivial" tasks (how many times we arrive on morning and someone has broken the test environment?).

This experiment lead the company to address the second part of the problem: How can we&nbsp;bring the automation to our client installer?

The answer to the question will be answered in the next blog post. Stay tune!]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>631</wp:post_id>
  <wp:post_date>2016-12-02 14:23:08</wp:post_date>
  <wp:post_date_gmt>2016-12-02 14:23:08</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>changing-the-operations-of-a-software-company-part-i</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="net"><![CDATA[.NET]]></category>
  <category domain="category" nicename="continuous-deployment"><![CDATA[Continuous Deployment]]></category>
  <category domain="category" nicename="continuous-integration"><![CDATA[Continuous Integration]]></category>
  <category domain="post_tag" nicename="deployment"><![CDATA[Deployment]]></category>
  <category domain="post_tag" nicename="devops"><![CDATA[DevOps]]></category>
  <category domain="post_tag" nicename="jenkins"><![CDATA[Jenkins]]></category>
  <category domain="post_tag" nicename="nant"><![CDATA[nant]]></category>
  <category domain="post_tag" nicename="octopus"><![CDATA[Octopus]]></category>
  <category domain="post_tag" nicename="powershell"><![CDATA[PowerShell]]></category>
  <category domain="post_tag" nicename="testing"><![CDATA[Testing]]></category>
  <wp:postmeta>
    <wp:meta_key>publicize_google_plus_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://plus.google.com/105879670784970671735/posts/idAHEmQdke3]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_published</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_client_id</wp:meta_key>
    <wp:meta_value><![CDATA[-1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[29545737904]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_15567246</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_15420870</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:2:{s:7:"twitter";a:1:{i:15487188;s:56:"https://twitter.com/joaoasrosa/status/804692396000903168";}s:8:"facebook";a:1:{i:15487197;s:38:"https://facebook.com/10154992762963287";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_15638091</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_15487188</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[joaoasrosa]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_linkedin_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://www.linkedin.com/updates?discuss=&scope=27794317&stype=M&topic=6210458088906989568&type=U&a=Nvwi]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_15638097</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_15487191</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_15638104</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_15487197</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>3</wp:comment_id>
    <wp:comment_author><![CDATA[Changing the operations of a Software Company â Part II &#8211; Another look on tech]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>https://anotherlookontech.wordpress.com/2016/12/06/changing-the-operations-of-a-software-company-part-ii/</wp:comment_author_url>
    <wp:comment_author_IP>192.0.91.66</wp:comment_author_IP>
    <wp:comment_date>2016-12-06 17:09:22</wp:comment_date>
    <wp:comment_date_gmt>2016-12-06 17:09:22</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[&#8230;] the previous post, I wrote about my experience changing the operations of a Software Company, improving the [&#8230;]]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1481044592</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:3:{s:4:"time";d:1481044592.385798931121826171875;s:5:"event";s:15:"status-approved";s:4:"user";s:10:"joaoasrosa";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:2:{s:4:"time";d:1481044163.01206207275390625;s:5:"event";s:9:"check-ham";}</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title>Changing the operations of a Software Company â Part II</title>
  <link>http://joaorosa.io/2016/12/06/changing-the-operations-of-a-software-company-part-ii/</link>
  <pubDate>Tue, 06 Dec 2016 17:09:19 +0000</pubDate>
  <dc:creator>joaoasrosa</dc:creator>
  <guid isPermaLink="false">https://anotherlookontech.wordpress.com/?p=746</guid>
  <description/>
  <content:encoded><![CDATA[In the previous <a href="https://anotherlookontech.wordpress.com/2016/12/02/changing-the-operations-of-a-software-company-part-i/">post</a>, I wrote about my experience changing the operations of a Software Company, improving the development process.

After we tackle this problem, we move to the next one: How can weÂ bring the automation to our client installer?

To give some context, the software is installed on client premises, thus we have deployed a fair number of network, tiers and security configurations to met the customer requirements. When the software is metadata driven and has a Service Oriented Architecture (SOA), it's crucial to do the installation in the right way. Since it based on installation notes (sometimes with a dozen of pages), the operator will miss a step (we are all humans, and we get tired). And we know what that means... Everything will fall apart, a rollback needs to be applied to the environment, time is wasted, and ultimately the customer will be unhappy. Our first priority is the customer (as any business should focus), and we want to make sure that all the processes can run smoothly.

Using our experience with <a href="https://octopus.com/">Octopus Deploy</a>, we started to explore the <a href="http://docs.octopusdeploy.com/display/OD/Offline+Package+Drop">Offline Package Drop</a> feature whereby the target environment doesn't need an agent installed, which is the perfect scenario for a deployment in client premises (since the client will operate using isolated networks, and we can't access to them for security reasons).

After the initial experiments, the stakeholders decided to support the project, and we design and implement a client installer on top of an Octopus Process. This allows:
<ul>
	<li>Usage of the same internal process</li>
	<li>More control over the installation steps, thus removing the human factor of the equation</li>
	<li>GuaranteeÂ the steps run of the right order at the right time</li>
	<li>The deployment process Â is smooth since the customer only needs to start the installer application and follow the steps</li>
	<li>Security is paramount since the customer will not share passwords with us (as an example). The application requires the customer to input the parameters that can't be shared, and the application leverages the <a href="http://docs.octopusdeploy.com/display/OD/Calamari">Calamari API</a>Â (it's open source we can contribute to it) to replace it in the OctopusÂ Project settings files</li>
	<li>Reduce the installation time, since it is done in an automated fashion</li>
</ul>
Currently, we are rolling out the project internally, with one of the customers facing teams. Until now it had been a success, gathering feedback for further iterations (a software component is not static). Sooner it will be applied by the customer in a UAT environment and we will collect more metric statistics and feedback.

Happy customers, happy days! :)]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>746</wp:post_id>
  <wp:post_date>2016-12-06 17:09:19</wp:post_date>
  <wp:post_date_gmt>2016-12-06 17:09:19</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>changing-the-operations-of-a-software-company-part-ii</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="continuous-deployment"><![CDATA[Continuous Deployment]]></category>
  <category domain="category" nicename="continuous-integration"><![CDATA[Continuous Integration]]></category>
  <category domain="post_tag" nicename="deployment"><![CDATA[Deployment]]></category>
  <category domain="post_tag" nicename="devops"><![CDATA[DevOps]]></category>
  <category domain="post_tag" nicename="octopus"><![CDATA[Octopus]]></category>
  <wp:postmeta>
    <wp:meta_key>publicize_google_plus_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://plus.google.com/105879670784970671735/posts/5YG2UPn5kbN]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_published</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_client_id</wp:meta_key>
    <wp:meta_value><![CDATA[-1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[29695751377]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_15567246</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_15420870</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:2:{s:7:"twitter";a:1:{i:15487188;s:56:"https://twitter.com/joaoasrosa/status/806183770172686336";}s:8:"facebook";a:1:{i:15487197;s:38:"https://facebook.com/10155012788498287";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_15638091</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_15487188</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[joaoasrosa]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_linkedin_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://www.linkedin.com/updates?discuss=&scope=27794317&stype=M&topic=6211949463594889216&type=U&a=g-3f]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_15638097</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_15487191</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_15638104</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_15487197</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Running Docker SQL Server Linux container in Windows 10</title>
  <link>http://joaorosa.io/2016/12/21/running-docker-sql-server-linux-container-in-windows-10/</link>
  <pubDate>Wed, 21 Dec 2016 14:43:55 +0000</pubDate>
  <dc:creator>joaoasrosa</dc:creator>
  <guid isPermaLink="false">https://anotherlookontech.wordpress.com/?p=859</guid>
  <description/>
  <content:encoded><![CDATA[Microsoft is doing a huge effort to bring SQL Server 2016 to Linux. Back in the summer, during the <a href="http://www.sqlsaturday.com/501/eventhome.aspx">Dublin 2016 SQL Saturday #501</a>, <a href="https://twitter.com/mark_azurecat">Mark Souza</a> <a href="https://onedrive.live.com/view.aspx?resid=56E37AA660DF4C78!370&amp;ithint=file%2cpptx&amp;app=PowerPoint&amp;authkey=!AE6OLiox4aT1bNs">presented the SQL Server history</a>. One of the major features is the ability to run SQL Sever 2016 on Linux.

Since then I added on my TODO list a simple task, test SQL Server in Linux. The best way to do it is using a Docker container, provided by Microsoft. Plus, since the last time that I played with Docker in Windows, they run on Hyper-V instead of VirtualBox. For me this is a huge increment in the product, thus we do not need several virtualization technologies on my development machine.

After installing the latest version of Docker (at the time of this post is 1.12.5), I start to read the <a href="https://docs.microsoft.com/en-us/sql/linux/sql-server-linux-setup-docker">notes</a> on how to run the SQL Server Docker container. The first thing that jumped was this instruction:
<pre><code>docker run -e 'ACCEPT_EULA=Y' -e 'SA_PASSWORD=&lt;YourStrong!Passw0rd&gt;' -p 1433:1433 -v HOSTDIRECTORY:/var/opt/mssql -d microsoft/mssql-server-linux</code></pre>
Especially the port assignment, since I've SQL Server installed on my development machine using the standard port 1433. I've modified the instruction to be:
<pre><code>docker run -e 'ACCEPT_EULA=Y' -e 'SA_PASSWORD=&lt;YourStrong!Passw0rd&gt;' -p 7000:1433 -v C:\Temp\Docker\mssql:/var/opt/mssql -d microsoft/mssql-server-linux</code></pre>
Where I assigned the public port 7000 to the container port 1433 (SQL Server default), and the container will persist the files in my file system at C:\Temp\Docker\mssql.

Opening SQL Server Management Studio I can connect using my credentials:

<img class="alignnone size-full wp-image-901" src="https://anotherlookontech.files.wordpress.com/2016/12/001.png" alt="001" width="412" height="310" />

After I connect just run the famous command:
<pre><code>SELECT @@VERSION</code></pre>
and get the results:

<img class="alignnone size-full wp-image-907" src="https://anotherlookontech.files.wordpress.com/2016/12/002.png" alt="002" width="736" height="110" />

I've played around for a few hours, and it is a good candidate to start the test for a production environment. I've tried a few applications and all of them worked without any problem. Good work SQL team, keep them going!]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>859</wp:post_id>
  <wp:post_date>2016-12-21 14:43:55</wp:post_date>
  <wp:post_date_gmt>2016-12-21 14:43:55</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>running-docker-sql-server-linux-container-in-windows-10</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="docker"><![CDATA[Docker]]></category>
  <category domain="post_tag" nicename="linux"><![CDATA[Linux]]></category>
  <category domain="category" nicename="sql-server"><![CDATA[SQL Server]]></category>
  <category domain="post_tag" nicename="windows-10"><![CDATA[Windows 10]]></category>
  <wp:postmeta>
    <wp:meta_key>_rest_api_published</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_client_id</wp:meta_key>
    <wp:meta_value><![CDATA[-1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[30229744901]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_google_plus_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://plus.google.com/105879670784970671735/posts/SFUwgwFFQCL]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_15567246</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_15420870</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:2:{s:7:"twitter";a:1:{i:15487188;s:56:"https://twitter.com/joaoasrosa/status/811582997531160580";}s:8:"facebook";a:1:{i:15487197;s:38:"https://facebook.com/10155076857243287";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_15638091</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_15487188</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[joaoasrosa]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_linkedin_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://www.linkedin.com/updates?discuss=&scope=27794317&stype=M&topic=6217348691129298944&type=U&a=QuYP]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_15638097</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_15487191</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_15638104</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_15487197</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>001</title>
  <link>http://joaorosa.io/2016/12/21/running-docker-sql-server-linux-container-in-windows-10/attachment/001/</link>
  <pubDate>Wed, 21 Dec 2016 14:34:46 +0000</pubDate>
  <dc:creator>joaoasrosa</dc:creator>
  <guid isPermaLink="false">http://anotherlookontech.files.wordpress.com/2016/12/001.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>901</wp:post_id>
  <wp:post_date>2016-12-21 14:34:46</wp:post_date>
  <wp:post_date_gmt>2016-12-21 14:34:46</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>001</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>859</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://anotherlookontech.files.wordpress.com/2016/12/001.png</wp:attachment_url>
</item>
<item>
  <title>002</title>
  <link>http://joaorosa.io/2016/12/21/running-docker-sql-server-linux-container-in-windows-10/attachment/002/</link>
  <pubDate>Wed, 21 Dec 2016 14:39:21 +0000</pubDate>
  <dc:creator>joaoasrosa</dc:creator>
  <guid isPermaLink="false">http://anotherlookontech.files.wordpress.com/2016/12/002.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>907</wp:post_id>
  <wp:post_date>2016-12-21 14:39:21</wp:post_date>
  <wp:post_date_gmt>2016-12-21 14:39:21</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>002</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>859</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://anotherlookontech.files.wordpress.com/2016/12/002.png</wp:attachment_url>
</item>
<item>
  <title>Code development improvement with JetBrains UpSource (configuration and first impressions)</title>
  <link>http://joaorosa.io/2017/01/03/code-development-improvement-with-jetbrains-upsource-configuration-and-first-impressions/</link>
  <pubDate>Tue, 03 Jan 2017 14:45:55 +0000</pubDate>
  <dc:creator>joaoasrosa</dc:creator>
  <guid isPermaLink="false">https://anotherlookontech.wordpress.com/?p=915</guid>
  <description/>
  <content:encoded><![CDATA[We should seek excellence in our jobs,Â doesn't matter our line of work. As professionals, we should always aim to improve the quality of our outputs, either it is customer satisfaction, code quality or just faster builds and deployments.

As any developer knows, working with a Version Control System (VCS) is great, but it has some pain points. As an example, if you are working in a product framework and you have lots of branches, it's complicated to do cross-branch searches with parameters like commit comments, authors and time. Plus we have a strict rule of code reviews (what we call the 4 eyes rule) to assess the code standards and the implementation itself. The code review comments are on our ticket system, disconnected from the VCS (I know there are integrated systems, but for business reasons the products do not interact as we like).

To close this gap, improving the developers' performance, we did research for useful tools that can help us. The frontrunner was <a href="https://www.jetbrains.com/upsource/">UpSource</a> from JetBrains. UpSource supports most of the VCS, giving some cool visualisations, allowing us to do the code reviews and last but not the least provide us with a full range of searches over the code branches.

Before buying the license, we set up the free version of UpSource, and using Continuous Improvements techniques we start an experiment with of our development teams.

To configure UpSource (versionÂ 3.5.3597) we:
<ul>
	<li>Read the <a href="https://www.jetbrains.com/help/upsource/3.5/prerequisites.html">pre-requisites</a></li>
	<li>Spin up a VM with CentOS 7</li>
	<li>Install CentOS 7</li>
</ul>
In the bash command line for the VM we:
<ul>
	<li>UpdateÂ all packages
<code>yum -y update</code></li>
	<li>Install net-tools
<code>yum install net-tools</code></li>
	<li>Install wget
<code>yum installÂ wget</code></li>
	<li>Install unzip
<code>yum install unzip</code></li>
	<li>Download UpSource
<code>wget https://download.jetbrains.com/upsource/upsource-3.5.3597.zip</code></li>
	<li>Unzip it
<code>unzip upsource-3.5.3597.zip -d /usr/local</code></li>
	<li>Set the Linux configuration per <a href="https://www.jetbrains.com/help/upsource/3.5/things-to-configure-before-starting-upsource.html">UpSource recommendations</a> (using vi in my case)</li>
	<li>Restart the machine to enforce the changes
<code>shutdown -r now</code></li>
	<li>Set up the machine name to access it using the FQDN
<code>hostnameclt set-hostnameÂ my_machine_name</code></li>
	<li>Open the firewall port 8080
<code>firewall-cmd --zone=public --add-port=8080/tcp --permanent</code>
<code>firewall-cmd --reload</code></li>
	<li>Start UpSource
<code>/usr/local/upsource-3.5.3597/bin/upsource.sh start</code></li>
</ul>
Using a browser we:
<ul>
	<li>Navigate to http://my_machine_name:8080</li>
	<li>Login as admin</li>
	<li>Change the settings to use our Active Directory Domain as authentication provider
<ul>
	<li>Navigate to the Hub</li>
	<li>Under the Access Management, navigate to Auth Modules</li>
	<li>Click in Add Module and select Active Directory</li>
	<li>Fill all the input fields with the Active Directory Domain information</li>
	<li>Click in Create Module</li>
</ul>
</li>
	<li>Configure the e-mail provider
<ul>
	<li>Navigate to the Hub</li>
	<li>Under the Server Settings, navigate to System Settings</li>
	<li>Enable the Email notifications and fill all the input fields for the e-mail settings</li>
	<li>Test an email to make sureÂ the configuration is correct</li>
</ul>
</li>
	<li>Configure the UpSource project to analyse our branches</li>
</ul>
And at this point, we hit a roadblock... The certificate use by the VCS is self-signed. To fix it, we applied the following recipe:
<ul>
	<li>Get the self-signed certificate</li>
	<li>Upload it to the UpSource machine</li>
	<li>Following the <a href="https://upsource-support.jetbrains.com/hc/en-us/articles/206545609-Using-a-self-signed-certificate-to-connect-to-a-VCS-server">instructions</a> provided by JetBrains support</li>
</ul>
And UpSource started to get all the information of the configured branches. :)

As a security measure, we enabled HTTPS following these <a href="https://www.jetbrains.com/help/upsource/2.0/proxy_configuration.html">instructions</a>. We close the shop, go home, take a good rest and start using it in the next day, using the rules agreed between the teams' technical leads.

After a week of usage, we start to see the benefits. We can search the code and the reviews in a faster way, leveraging the index system of UpSource. Plus we have visualisations that help us to identify what are the commits without reviews. In one particular situation, we found one optimisation broke our verifications in one of the plugins. Due to the search and comparison capabilities of UpSource, we cross-reference between different branches, identifying the bug and fixing it in a matter of minutes. If we use the tools provided by the VCS it will take a couple of hours to do the same job.

Our plan is to keep the experience with the team, refining the development process, since we change the way of doing code reviews. So far, we like the tool, and we are looking for the integration with <a href="https://youtrack.jetbrains.com/issue/UP-4138">Visual Studio</a>. After we agree and settle on the process, we will roll out to all the development teams within the company.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>915</wp:post_id>
  <wp:post_date>2017-01-03 14:45:55</wp:post_date>
  <wp:post_date_gmt>2017-01-03 14:45:55</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>code-development-improvement-with-jetbrains-upsource-configuration-and-first-impressions</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="centos-7"><![CDATA[CentOS 7]]></category>
  <category domain="category" nicename="code-development"><![CDATA[Code Development]]></category>
  <category domain="category" nicename="continuous-deployment"><![CDATA[Continuous Deployment]]></category>
  <category domain="post_tag" nicename="continuous-improvement"><![CDATA[Continuous Improvement]]></category>
  <category domain="post_tag" nicename="continuous-innovation"><![CDATA[Continuous Innovation]]></category>
  <category domain="category" nicename="continuous-integration"><![CDATA[Continuous Integration]]></category>
  <category domain="post_tag" nicename="jetbrains"><![CDATA[JetBrains]]></category>
  <category domain="post_tag" nicename="linux"><![CDATA[Linux]]></category>
  <category domain="post_tag" nicename="upsource"><![CDATA[UpSource]]></category>
  <category domain="post_tag" nicename="vcs"><![CDATA[VCS]]></category>
  <category domain="post_tag" nicename="visual-studio"><![CDATA[Visual Studio]]></category>
  <wp:postmeta>
    <wp:meta_key>publicize_google_plus_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://plus.google.com/105879670784970671735/posts/hXtFuYtRYmG]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_published</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_client_id</wp:meta_key>
    <wp:meta_value><![CDATA[-1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[359848196]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_15567246</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_15420870</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:2:{s:7:"twitter";a:1:{i:15487188;s:56:"https://twitter.com/joaoasrosa/status/816294538348298240";}s:8:"facebook";a:1:{i:15487197;s:38:"https://facebook.com/10155122486288287";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_15638091</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_15487188</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[joaoasrosa]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_linkedin_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://www.linkedin.com/updates?discuss=&scope=27794317&stype=M&topic=6222060230943997952&type=U&a=mlMF]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_15638097</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_15487191</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_15638104</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_15487197</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Create an AWS Lambda function from an Octopus Deployment</title>
  <link>http://joaorosa.io/2017/01/10/create-an-aws-lambda-function-from-an-octopus-deployment/</link>
  <pubDate>Tue, 10 Jan 2017 12:27:40 +0000</pubDate>
  <dc:creator>joaoasrosa</dc:creator>
  <guid isPermaLink="false">https://anotherlookontech.wordpress.com/?p=1044</guid>
  <description/>
  <content:encoded><![CDATA[<a href="https://aws.amazon.com/lambda/">AWS Lambda</a> is one ofÂ the AWS ComputeÂ Services, alongside with <a href="https://aws.amazon.com/ec2/">Amazon EC2</a>Â or <a href="https://aws.amazon.com/ecs/">Amazon EC2 Container Service</a>. In a nutshell, AWS Lambda is the serverless offer from AWS, allowingÂ "you run code without provisioning or managing servers"[1].

In the DevOps spirit, and using <a href="https://octopus.com/">Octopus</a> as the Continuous Deployment tool, I couldn'tÂ find a step template to create an AWS Lambda function. IfÂ it doesn't exist, create it and give it away!
<h2>Background</h2>
AWS Lambda supports a broad range of technologies, such as Java, Python or NodeJS. The new kid on the block was .NET Core, <a href="https://aws.amazon.com/blogs/compute/announcing-c-sharp-support-for-aws-lambda/">announced</a> on 1<sup>st</sup> of December 2016. It was a good announcement for Microsoft tech shops, having another tool in the toolbelt.

The tools used for this demo were:
<ul>
	<li><a href="https://www.visualstudio.com/">Visual Studio 2015 Community Edition</a></li>
	<li><a href="https://aws.amazon.com/visualstudio/">AWS Toolkit for Visual Studio</a></li>
	<li><a href="https://aws.amazon.com/powershell/">AWS Tools for Windows Powershell</a></li>
	<li><a href="https://octopus.com/">Octopus Deploy Community Edition</a></li>
</ul>
<h2>Visual Studio and AWS Lambda Function Project</h2>
Using one of the Visual Studio AWS Lambda templates for the demo, the project was created and committedÂ <a href="https://github.com/joaoasrosa/AWSLambdaDemo">here</a>. In a nutshell, the AWS Lambda function receivesÂ an Amazon S3 event and returns the S3 object Content Type. Simple and straightforward.
<h2>Continuous Integration Server</h2>
You can use your preferred CI server. In your CI server will need to:
<ol>
	<li>Publish the AWS Lambda .NET project
<pre><code>dotnetÂ publish AWSLambdaDemo -c Release</code></pre>
</li>
	<li>Zip the published AWS Lambda .NET project</li>
	<li>Create the NuGet package for Octopus
<pre><code>Octo.exe pack --id AWSLambdaDemo --version 1.0.0.0</code></pre>
</li>
	<li>Upload the AWS Lambda NuGet package to Octopus Server
<pre><code>NuGet.exe push AWSLambdaDemo.1.0.0.0.nupkg -ApiKey myApiKey -Source https://myOctopusServer</code></pre>
</li>
</ol>
These instructions are generic, and depending on your CI server technology can be done in different ways. You can take them as generic steps, and adapt to your needs.
<h2>Â Create AWS Lambda function Octopus step template</h2>
The step template is simple and straightforward. The Powershell script:
<ol>
	<li>Checks if the AWS Tools for Windows Powershell is installed</li>
	<li>Get all the required parameters, such as the access keys, region, function name, among others</li>
	<li>Validate the parameters, e. g., if they have a value</li>
	<li>Execute the operation</li>
	<li>Feedback the user</li>
</ol>
The step template has a prerequisite, it depends on the AWS Tools for Windows Powershell. You need to download and install it on the machines where the step will run.
<h2>Octopus Project</h2>
To create the AWS Lambda function, we need to use a pivot machine. At the moment is not possible to publish it directly to AWS.

<img class=" size-full wp-image-1149 aligncenter" src="https://anotherlookontech.files.wordpress.com/2017/01/octopus2awslambda.png" alt="octopus2awslambda" width="476" height="155" />

We will use the Octopus out-of-the-box features to deploy the AWSLambdaDemo package to the Pivot Machine, and the new step template to publish the function to AWS.

The Demo OctopusÂ Project will look like this:

<img class=" size-full wp-image-1153 aligncenter" src="https://anotherlookontech.files.wordpress.com/2017/01/octopus-project.png" alt="octopus-project" width="1245" height="514" />

The first step just deploys the upload NuGet AWSLambdaDemo package to a custom location in the Pivot Machine (with the role AWS Lambda Demo).

The second step creates the AWS Lambda from the deployed NuGet AWSLambdaDemo package from the custom location.

<img class=" size-full wp-image-1158 aligncenter" src="https://anotherlookontech.files.wordpress.com/2017/01/octopus-aws-step.png" alt="octopus-aws-step" width="1138" height="912" />

After creating a release (potentially triggered by the CI server), Octopus Server can deploy it.

<img class=" size-full wp-image-1163 aligncenter" src="https://anotherlookontech.files.wordpress.com/2017/01/octopus-aws-deploy.png" alt="octopus-aws-deploy" width="906" height="839" />

And voilÃ¡! A new AWS Lambda function is deployed!

<img class=" size-full wp-image-1167 aligncenter" src="https://anotherlookontech.files.wordpress.com/2017/01/aws-lambda.png" alt="aws-lambda" width="934" height="255" />
<h2>Final thoughts</h2>
The step template is under the <a href="https://github.com/OctopusDeploy/Library">Octopus Library OSS</a>. You can fork and add new features to it, or open an issue in <a href="https://github.com/joaoasrosa/Library">my fork</a>. All suggestions are welcome.

&nbsp;

[1] -Â <a href="http://docs.aws.amazon.com/lambda/latest/dg/welcome.html">http://docs.aws.amazon.com/lambda/latest/dg/welcome.html</a>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>1044</wp:post_id>
  <wp:post_date>2017-01-10 12:27:40</wp:post_date>
  <wp:post_date_gmt>2017-01-10 12:27:40</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>create-an-aws-lambda-function-from-an-octopus-deployment</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="net"><![CDATA[.NET]]></category>
  <category domain="post_tag" nicename="net-core"><![CDATA[.NET Core]]></category>
  <category domain="post_tag" nicename="aws"><![CDATA[AWS]]></category>
  <category domain="post_tag" nicename="aws-lambda"><![CDATA[AWS Lambda]]></category>
  <category domain="category" nicename="cloud-computing"><![CDATA[Cloud Computing]]></category>
  <category domain="category" nicename="continuous-deployment"><![CDATA[Continuous Deployment]]></category>
  <category domain="category" nicename="continuous-integration"><![CDATA[Continuous Integration]]></category>
  <category domain="post_tag" nicename="deployment"><![CDATA[Deployment]]></category>
  <category domain="post_tag" nicename="devops"><![CDATA[DevOps]]></category>
  <category domain="post_tag" nicename="github"><![CDATA[GitHub]]></category>
  <category domain="post_tag" nicename="nuget"><![CDATA[NuGet]]></category>
  <category domain="post_tag" nicename="octopus"><![CDATA[Octopus]]></category>
  <category domain="category" nicename="oss"><![CDATA[OSS]]></category>
  <category domain="post_tag" nicename="powershell"><![CDATA[PowerShell]]></category>
  <category domain="post_tag" nicename="visual-studio"><![CDATA[Visual Studio]]></category>
  <wp:postmeta>
    <wp:meta_key>publicize_google_plus_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://plus.google.com/105879670784970671735/posts/KTpJMW2yTdY]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_published</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_client_id</wp:meta_key>
    <wp:meta_value><![CDATA[-1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[602035564]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_15567246</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_15420870</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:2:{s:7:"twitter";a:1:{i:15487188;s:56:"https://twitter.com/joaoasrosa/status/818796469658517505";}s:8:"facebook";a:1:{i:15487197;s:38:"https://facebook.com/10155143202503287";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_15638091</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_15487188</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[joaoasrosa]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_linkedin_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://www.linkedin.com/updates?discuss=&scope=27794317&stype=M&topic=6224562163344777216&type=U&a=liFo]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_15638097</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_15487191</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_15638104</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_15487197</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>53</wp:comment_id>
    <wp:comment_author><![CDATA[johnny]]></wp:comment_author>
    <wp:comment_author_email>johnny.chan@redington.co.uk</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>89.197.2.116</wp:comment_author_IP>
    <wp:comment_date>2017-08-03 15:44:04</wp:comment_date>
    <wp:comment_date_gmt>2017-08-03 13:44:04</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Hi, great post! however i am a newbie in deployments and using OctopusDeploy and was wondering whether you can share anymore information in your step 1 - i'm not sure how to unpack my lambda function to a custom location? I've also tried looking to find more information around the concept of a "pivot machine" without much success. Are there links that might help explain this concept.

Many thanks in advanced]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>email_notification_jobid</wp:meta_key>
      <wp:meta_value>7861240270</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:2:{s:4:"time";d:1501772873.3796451091766357421875;s:5:"event";s:9:"check-ham";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_queued</wp:meta_key>
      <wp:meta_value>1501792761</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1501792761</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:3:{s:4:"time";d:1501792761.1738030910491943359375;s:5:"event";s:15:"status-approved";s:4:"user";s:10:"joaoasrosa";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:2:{s:4:"time";d:1501767845.352241992950439453125;s:5:"event";s:9:"check-ham";}</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>54</wp:comment_id>
    <wp:comment_author><![CDATA[JoÃ£o Rosa]]></wp:comment_author>
    <wp:comment_author_email>joaoasrosa@gmail.com</wp:comment_author_email>
    <wp:comment_author_url>http://anotherlookontech.wordpress.com</wp:comment_author_url>
    <wp:comment_author_IP>217.129.143.72</wp:comment_author_IP>
    <wp:comment_date>2017-08-03 22:48:53</wp:comment_date>
    <wp:comment_date_gmt>2017-08-03 20:48:53</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Hi Johnny,
You can find more information here: <a href="https://octopus.com/docs/deploying-applications/custom-installation-directory" rel="nofollow">https://octopus.com/docs/deploying-applications/custom-installation-directory</a>.
Regarding the concept of a pivot machine, is a machine with deployment dependencies, however, is not the machine or service where the package will run. In this post, I configure the pivot machine with the AWS Powershell SDK, since it needs to upload the AWS Lambda function.
Please let me know if it makes sense.
Best regards, JoÃ£o Rosa]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>53</wp:comment_parent>
    <wp:comment_user_id>74848251</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:3:{s:4:"time";d:1501793333.3363590240478515625;s:5:"event";s:9:"check-ham";s:4:"user";s:10:"joaoasrosa";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1501793333</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_jobid</wp:meta_key>
      <wp:meta_value>7861472115</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_queued</wp:meta_key>
      <wp:meta_value>1501793333</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title>octopus2awslambda</title>
  <link>http://joaorosa.io/2017/01/10/create-an-aws-lambda-function-from-an-octopus-deployment/octopus2awslambda/</link>
  <pubDate>Tue, 10 Jan 2017 12:12:30 +0000</pubDate>
  <dc:creator>joaoasrosa</dc:creator>
  <guid isPermaLink="false">http://anotherlookontech.files.wordpress.com/2017/01/octopus2awslambda.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>1149</wp:post_id>
  <wp:post_date>2017-01-10 12:12:30</wp:post_date>
  <wp:post_date_gmt>2017-01-10 12:12:30</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>octopus2awslambda</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>1044</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://anotherlookontech.files.wordpress.com/2017/01/octopus2awslambda.png</wp:attachment_url>
</item>
<item>
  <title>octopus-project</title>
  <link>http://joaorosa.io/2017/01/10/create-an-aws-lambda-function-from-an-octopus-deployment/octopus-project/</link>
  <pubDate>Tue, 10 Jan 2017 12:15:20 +0000</pubDate>
  <dc:creator>joaoasrosa</dc:creator>
  <guid isPermaLink="false">http://anotherlookontech.files.wordpress.com/2017/01/octopus-project.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>1153</wp:post_id>
  <wp:post_date>2017-01-10 12:15:20</wp:post_date>
  <wp:post_date_gmt>2017-01-10 12:15:20</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>octopus-project</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>1044</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://anotherlookontech.files.wordpress.com/2017/01/octopus-project.png</wp:attachment_url>
</item>
<item>
  <title>octopus-aws-step</title>
  <link>http://joaorosa.io/2017/01/10/create-an-aws-lambda-function-from-an-octopus-deployment/octopus-aws-step/</link>
  <pubDate>Tue, 10 Jan 2017 12:18:03 +0000</pubDate>
  <dc:creator>joaoasrosa</dc:creator>
  <guid isPermaLink="false">http://anotherlookontech.files.wordpress.com/2017/01/octopus-aws-step.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>1158</wp:post_id>
  <wp:post_date>2017-01-10 12:18:03</wp:post_date>
  <wp:post_date_gmt>2017-01-10 12:18:03</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>octopus-aws-step</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>1044</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://anotherlookontech.files.wordpress.com/2017/01/octopus-aws-step.png</wp:attachment_url>
</item>
<item>
  <title>octopus-aws-deploy</title>
  <link>http://joaorosa.io/2017/01/10/create-an-aws-lambda-function-from-an-octopus-deployment/octopus-aws-deploy/</link>
  <pubDate>Tue, 10 Jan 2017 12:21:34 +0000</pubDate>
  <dc:creator>joaoasrosa</dc:creator>
  <guid isPermaLink="false">http://anotherlookontech.files.wordpress.com/2017/01/octopus-aws-deploy.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>1163</wp:post_id>
  <wp:post_date>2017-01-10 12:21:34</wp:post_date>
  <wp:post_date_gmt>2017-01-10 12:21:34</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>octopus-aws-deploy</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>1044</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://anotherlookontech.files.wordpress.com/2017/01/octopus-aws-deploy.png</wp:attachment_url>
</item>
<item>
  <title>aws-lambda</title>
  <link>http://joaorosa.io/2017/01/10/create-an-aws-lambda-function-from-an-octopus-deployment/aws-lambda/</link>
  <pubDate>Tue, 10 Jan 2017 12:22:54 +0000</pubDate>
  <dc:creator>joaoasrosa</dc:creator>
  <guid isPermaLink="false">http://anotherlookontech.files.wordpress.com/2017/01/aws-lambda.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>1167</wp:post_id>
  <wp:post_date>2017-01-10 12:22:54</wp:post_date>
  <wp:post_date_gmt>2017-01-10 12:22:54</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>aws-lambda</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>1044</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://anotherlookontech.files.wordpress.com/2017/01/aws-lambda.png</wp:attachment_url>
</item>
<item>
  <title>AWS templates</title>
  <link>http://joaorosa.io/?p=1179</link>
  <pubDate>Mon, 30 Nov -0001 00:00:00 +0000</pubDate>
  <dc:creator>joaoasrosa</dc:creator>
  <guid isPermaLink="false">https://anotherlookontech.wordpress.com/?p=1179</guid>
  <description/>
  <content:encoded><![CDATA[Create role if not exists

Add the triggers to the Lambda function

Create a container from Octopus and publish to AWS]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>1179</wp:post_id>
  <wp:post_date>2017-01-10 12:32:37</wp:post_date>
  <wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name/>
  <wp:status>draft</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="sem-categoria"><![CDATA[Sem categoria]]></category>
</item>
<item>
  <title>Create and Push a Docker Image from an Octopus Deployment</title>
  <link>http://joaorosa.io/2017/02/04/create-and-push-a-docker-image-from-an-octopus-deployment/</link>
  <pubDate>Sat, 04 Feb 2017 10:03:16 +0000</pubDate>
  <dc:creator>joaoasrosa</dc:creator>
  <guid isPermaLink="false">https://anotherlookontech.wordpress.com/?p=1198</guid>
  <description/>
  <content:encoded><![CDATA[<a href="https://www.docker.com/">Docker</a> is one of the disruptive technologies within virtualization, allowing the different containers to run on the same machine, sharing resources, reducing the overhead. The technology allows DevOps teams to have another tool to develop, build and ship software. One use case for containers is the Microservices Architecture Pattern.
<h2>Background</h2>
<a href="https://hub.docker.com/">DockerHub</a> is the image repository offered by Docker, where we can publish public repositories (the tech community is there) or use the private repositories feature (instead of building an infrastructure in the local environment). One of the features is theÂ <a href="https://docs.docker.com/docker-hub/builds/">Automated Builds</a> from a GitHub or Bitbucket account. Although it is a great feature, not all software shops uses this set of technologies.

For a software shop using Octopus, there are already <a href="https://octopus.com/docs/deploying-applications/docker-containers">features</a> to deploy Octopus images from an Octopus Deployment. However, is not possible to create and push a Docker Image based on packages stored in Octopus. To fill this gap, I create an Octopus step template where it is possible to create and push a Docker image to DockerHub.

This fits is an organisation moving from a VM environment to a Container environment, but keeping the current infrastructure, e. g., using Octopus to manage the releases (including where the packages are deployed).

The tools used for this tutorial were:
<ul>
	<li><a href="https://www.visualstudio.com/">Visual Studio 2015 Community Edition</a></li>
	<li><a href="https://docs.docker.com/docker-for-windows/">Docker for Windows</a></li>
	<li><a href="https://octopus.com/">Octopus Deploy Community Edition</a></li>
</ul>
<h2>Visual Studio and the Docker WebApp for the tutorial</h2>
Using the Visual Studio .NET Core Web Application template for this tutorial, the project was created and committedÂ <a href="https://github.com/joaoasrosa/DockerDotnetCoreDemo">here</a>. The WebApp is theÂ out-of-the-box web application.
<h2>Continuous Integration Server</h2>
You can use your preferred CI server. In your CI server will need to:
<ol>
	<li>Publish the DockerÂ WebApp.NET project
<pre><code>dotnetÂ publish WebAppDemo -c Release</code></pre>
</li>
	<li>Create the NuGet package for Octopus
<pre><code>Octo.exe pack --id DockerWebAppDemo --version 1.0.0</code></pre>
</li>
	<li>Upload the AWS Lambda NuGet package to Octopus Server
<pre><code>NuGet.exe push DockerWebAppDemo.1.0.0.nupkg -ApiKey myApiKey -Source https://myOctopusServer</code></pre>
</li>
</ol>
These instructions are generic, and depending on your CI server technology can be done in different ways. You can take them as generic steps, and adapt to your needs.
<h2>Create and Push a Docker Image Octopus step template</h2>
The step template is simple and straightforward. The Powershell script:
<ol>
	<li>Get all the required parameters, such as the DockerHub username, password, image name, among others</li>
	<li>Validate the parameters, e. g., if they have a value</li>
	<li>Creates the Docker image</li>
	<li>Pushes the Docker image</li>
	<li>Feedback the user</li>
</ol>
The step template has a prerequisite; it depends on the Docker for Windows. You need to download and install it on the machines where the step will run.
<h2>Octopus Project</h2>
To create the Octopus image we need to use a pivot machine with Docker for Windows installed.

<img class=" size-full wp-image-1254 aligncenter" src="https://anotherlookontech.files.wordpress.com/2017/02/octopus-docker.png" alt="octopus-docker" width="600" height="162" />

We will use the Octopus out-of-the-box features to deploy the DockerWebAppDemo package to the Pivot Machine, and the new step template to create and push the Docker image to DockerHub.

The Octopus Project will look like:

<img class=" size-full wp-image-1259 aligncenter" src="https://anotherlookontech.files.wordpress.com/2017/02/docker-octopus-project.png" alt="docker-octopus-project" width="1090" height="454" />

The first step deploys the NuGet DockerWebAppDemo package to a custom location in the Pivot Machine (with the Docker Machine role).

The second step creates and pushes the Docker image to DockerHub using the Dockerfile provided.

<img class=" size-full wp-image-1266 aligncenter" src="https://anotherlookontech.files.wordpress.com/2017/02/docker-octopus-step.png" alt="docker-octopus-step" width="741" height="741" />

After creating a release (potentially triggered by the CI server), Octopus Server can deploy it.

<img class="alignnone size-full wp-image-1269" src="https://anotherlookontech.files.wordpress.com/2017/02/docker-octopus-deploy.png" alt="docker-octopus-deploy" width="1372" height="902" />

If the step runs successfully we can check the Docker image in the repository.

<img class="alignnone size-full wp-image-1273" src="https://anotherlookontech.files.wordpress.com/2017/02/dockerhub-image.png" alt="dockerhub-image" width="1280" height="398" />

Or even run it in a machine running Docker, using the following command:
<pre><code>docker run -p 5000:80 -e "ASPNETCORE_URLS=http://+:80" -it --rm joaoasrosa/dockerwebappdemo</code></pre>
If we access to a browser using the URL:port for the Docker container, we can see the application running.

<img class="alignnone size-full wp-image-1280" src="https://anotherlookontech.files.wordpress.com/2017/02/docker-container-run.png" alt="docker-container-run" width="1402" height="554" />
<h2>Final thoughts</h2>
The step allows the creation of Docker images from an Octopus deployment, centralising and minimising the packages maintenance operations. Also, it is possible to deploy the same package to a machine or a Docker image, increasing the deployment scenarios for a DevOps team.

The step template is under the <a href="https://github.com/OctopusDeploy/Library">Octopus Library OSS</a>. You can fork and add new features to it, or open an issue in <a href="https://github.com/joaoasrosa/Library">my fork</a>. All suggestions are welcome.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>1198</wp:post_id>
  <wp:post_date>2017-02-04 10:03:16</wp:post_date>
  <wp:post_date_gmt>2017-02-04 10:03:16</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>create-and-push-a-docker-image-from-an-octopus-deployment</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="net"><![CDATA[.NET]]></category>
  <category domain="post_tag" nicename="net-core"><![CDATA[.NET Core]]></category>
  <category domain="category" nicename="continuous-deployment"><![CDATA[Continuous Deployment]]></category>
  <category domain="post_tag" nicename="continuous-improvement"><![CDATA[Continuous Improvement]]></category>
  <category domain="post_tag" nicename="continuous-innovation"><![CDATA[Continuous Innovation]]></category>
  <category domain="category" nicename="continuous-integration"><![CDATA[Continuous Integration]]></category>
  <category domain="post_tag" nicename="deployment"><![CDATA[Deployment]]></category>
  <category domain="post_tag" nicename="devops"><![CDATA[DevOps]]></category>
  <category domain="post_tag" nicename="docker"><![CDATA[Docker]]></category>
  <category domain="post_tag" nicename="github"><![CDATA[GitHub]]></category>
  <category domain="post_tag" nicename="octopus"><![CDATA[Octopus]]></category>
  <category domain="category" nicename="oss"><![CDATA[OSS]]></category>
  <category domain="post_tag" nicename="powershell"><![CDATA[PowerShell]]></category>
  <category domain="post_tag" nicename="vcs"><![CDATA[VCS]]></category>
  <wp:postmeta>
    <wp:meta_key>publicize_google_plus_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://plus.google.com/105879670784970671735/posts/MKqz2S6jUcZ]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_published</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_client_id</wp:meta_key>
    <wp:meta_value><![CDATA[-1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[1489352023]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_15567246</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_15420870</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:1:{s:7:"twitter";a:1:{i:15487188;s:56:"https://twitter.com/joaoasrosa/status/827819826349486081";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_15638091</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_15487188</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[joaoasrosa]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_linkedin_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://www.linkedin.com/updates?discuss=&scope=27794317&stype=M&topic=6233585522502041600&type=U&a=PADf]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_15638097</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_15487191</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>474</wp:comment_id>
    <wp:comment_author><![CDATA[sudheer464]]></wp:comment_author>
    <wp:comment_author_email>sudheer.sk3@gmail.com</wp:comment_author_email>
    <wp:comment_author_url>http://myfamily464.wordpress.com</wp:comment_author_url>
    <wp:comment_author_IP>75.69.107.86</wp:comment_author_IP>
    <wp:comment_date>2018-10-21 16:25:00</wp:comment_date>
    <wp:comment_date_gmt>2018-10-21 14:25:00</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Can i have your dockerfile please to verify mine?]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>91056163</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>email_notification_jobid</wp:meta_key>
      <wp:meta_value>23427697623</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_queued</wp:meta_key>
      <wp:meta_value>1540131903</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1540131901</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:3:{s:4:"time";d:1540131902.18571;s:5:"event";s:9:"check-ham";s:4:"user";s:10:"sudheer464";}</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>475</wp:comment_id>
    <wp:comment_author><![CDATA[JoÃ£o Rosa]]></wp:comment_author>
    <wp:comment_author_email>joaoasrosa@gmail.com</wp:comment_author_email>
    <wp:comment_author_url>http://anotherlookontech.wordpress.com</wp:comment_author_url>
    <wp:comment_author_IP>94.210.5.79</wp:comment_author_IP>
    <wp:comment_date>2018-10-21 16:28:11</wp:comment_date>
    <wp:comment_date_gmt>2018-10-21 14:28:11</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Sure thing, here: https://github.com/joaoasrosa/DockerDotnetCoreDemo/blob/master/Dockerfile]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>474</wp:comment_parent>
    <wp:comment_user_id>74848251</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>email_notification_jobid</wp:meta_key>
      <wp:meta_value>23427784277</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_queued</wp:meta_key>
      <wp:meta_value>1540132094</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1540132093</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:3:{s:4:"time";d:1540132094.046197;s:5:"event";s:9:"check-ham";s:4:"user";s:10:"joaoasrosa";}</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>473</wp:comment_id>
    <wp:comment_author><![CDATA[sudheer]]></wp:comment_author>
    <wp:comment_author_email>sudheer.sk3@gmail.com</wp:comment_author_email>
    <wp:comment_author_url>http://gravatar.com/sudheer464</wp:comment_author_url>
    <wp:comment_author_IP>75.69.107.86</wp:comment_author_IP>
    <wp:comment_date>2018-10-21 16:11:15</wp:comment_date>
    <wp:comment_date_gmt>2018-10-21 14:11:15</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[okay. initially i tried to use windows container and build the image and pushed to the docker hub but when i pull to my linux environment, getting below error.
[ec2-user@ip-172-12-0-227 ~]$ sudo docker pull sudheeramgothu/testdotnetcore
Using default tag: latest
latest: Pulling from sudheeramgothu/testdotnetcore
bce2fbc256ea: Downloading
4a14bdf6da80: Downloading
26714a2e6283: Download complete
3242c1a2bd2c: Waiting
59d6fcb1cafa: Waiting
19a189a0738d: Waiting
d9e309541597: Waiting
fdd4a346268a: Waiting
973e1b33350f: Waiting
0b705cc4da30: Waiting
07eb24f8f2c9: Waiting
5cff5b652ffd: Waiting
632f3800474b: Waiting
cd5493e8ad61: Waiting
4ab278ff4181: Waiting
image operating system "windows" cannot be used on this platform

but if i pull your docker image, i am able to pull to my linux environment and able to run the application too.

why in my environment, its failing?]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>472</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>email_notification_jobid</wp:meta_key>
      <wp:meta_value>23427323667</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_queued</wp:meta_key>
      <wp:meta_value>1540131079</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1540131077</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:3:{s:4:"time";d:1540131077.870329;s:5:"event";s:9:"check-ham";s:4:"user";s:10:"sudheer464";}</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>470</wp:comment_id>
    <wp:comment_author><![CDATA[JoÃ£o Rosa]]></wp:comment_author>
    <wp:comment_author_email>joaoasrosa@gmail.com</wp:comment_author_email>
    <wp:comment_author_url>http://anotherlookontech.wordpress.com</wp:comment_author_url>
    <wp:comment_author_IP>94.210.5.79</wp:comment_author_IP>
    <wp:comment_date>2018-10-21 09:55:21</wp:comment_date>
    <wp:comment_date_gmt>2018-10-21 07:55:21</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Hi Sudheer,

It has been a while, and back then there wasn't a Linux version. The article was written based on the Windows Version.
For the question that you posted, I also foresee problems with the permissions. But the script should be flexible enough to use any path, where the service account has privileges.

Does it make sense?

Best regards, JoÃ£o Rosa]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>469</wp:comment_parent>
    <wp:comment_user_id>74848251</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:3:{s:4:"time";d:1540108522.006426;s:5:"event";s:9:"check-ham";s:4:"user";s:10:"joaoasrosa";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1540108521</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_jobid</wp:meta_key>
      <wp:meta_value>23418835572</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_queued</wp:meta_key>
      <wp:meta_value>1540108522</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>471</wp:comment_id>
    <wp:comment_author><![CDATA[sudheer464]]></wp:comment_author>
    <wp:comment_author_email>sudheer.sk3@gmail.com</wp:comment_author_email>
    <wp:comment_author_url>http://myfamily464.wordpress.com</wp:comment_author_url>
    <wp:comment_author_IP>75.69.107.86</wp:comment_author_IP>
    <wp:comment_date>2018-10-21 13:40:01</wp:comment_date>
    <wp:comment_date_gmt>2018-10-21 11:40:01</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Yes, that make sense to me! So that you build the docker image in windows machine and trying to use this image in Linux machine , right?  And if I take your docker hub image and pull it in windows , itâs saying that Linux operating system images doesnât support on windows platform. 
How come it is possible? You are saying that you build the image in windows machine, so it should support windows machine right? 
Something I am missing here, could you please clarify details? 
And could you please share your step template script with me? 
Thanks,
Sudheer

And]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>470</wp:comment_parent>
    <wp:comment_user_id>91056163</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:3:{s:4:"time";d:1540122002.596878;s:5:"event";s:9:"check-ham";s:4:"user";s:10:"sudheer464";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_jobid</wp:meta_key>
      <wp:meta_value>23424178310</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_queued</wp:meta_key>
      <wp:meta_value>1540123226</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1540123226</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:3:{s:4:"time";d:1540123226.758465;s:5:"event";s:15:"status-approved";s:4:"user";s:10:"joaoasrosa";}</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>469</wp:comment_id>
    <wp:comment_author><![CDATA[sudheer amgothu]]></wp:comment_author>
    <wp:comment_author_email>sudheer.sk3@gmail.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>75.69.107.86</wp:comment_author_IP>
    <wp:comment_date>2018-10-21 00:04:19</wp:comment_date>
    <wp:comment_date_gmt>2018-10-20 22:04:19</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Hi Joaorosa, 
i have followed your blog. it is interesting to read. 
i am looking for custom bash script for create - push docker image and pivot machine-- Are you using docker installed linux machine or docker installed windows machine? i do see that you specified appLocation as C:/&lt;&gt; but in your docker image creation step, i do see linux permission thing. little bit confuse here.

could you please clarify?

Thanks,
Sudheer.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>email_notification_jobid</wp:meta_key>
      <wp:meta_value>23418834773</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_queued</wp:meta_key>
      <wp:meta_value>1540108520</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1540108387</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:3:{s:4:"time";d:1540108388.214561;s:5:"event";s:15:"status-approved";s:4:"user";s:10:"joaoasrosa";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:3:{s:4:"time";d:1540108403.484932;s:5:"event";s:17:"status-unapproved";s:4:"user";s:10:"joaoasrosa";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:3:{s:4:"time";d:1540073060.929773;s:5:"event";s:9:"check-ham";s:4:"user";s:10:"sudheer464";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:3:{s:4:"time";d:1540077156.700035;s:5:"event";s:9:"check-ham";s:4:"user";s:10:"sudheer464";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:3:{s:4:"time";d:1540108520.667908;s:5:"event";s:15:"status-approved";s:4:"user";s:10:"joaoasrosa";}</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>476</wp:comment_id>
    <wp:comment_author><![CDATA[JoÃ£o Rosa]]></wp:comment_author>
    <wp:comment_author_email>joaoasrosa@gmail.com</wp:comment_author_email>
    <wp:comment_author_url>http://anotherlookontech.wordpress.com</wp:comment_author_url>
    <wp:comment_author_IP>94.210.5.79</wp:comment_author_IP>
    <wp:comment_date>2018-10-21 16:28:30</wp:comment_date>
    <wp:comment_date_gmt>2018-10-21 14:28:30</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[To be honest I never tried to do the above.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>473</wp:comment_parent>
    <wp:comment_user_id>74848251</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>email_notification_jobid</wp:meta_key>
      <wp:meta_value>23427793133</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_queued</wp:meta_key>
      <wp:meta_value>1540132112</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1540132111</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:3:{s:4:"time";d:1540132111.841225;s:5:"event";s:9:"check-ham";s:4:"user";s:10:"joaoasrosa";}</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>472</wp:comment_id>
    <wp:comment_author><![CDATA[JoÃ£o Rosa]]></wp:comment_author>
    <wp:comment_author_email>joaoasrosa@gmail.com</wp:comment_author_email>
    <wp:comment_author_url>http://anotherlookontech.wordpress.com</wp:comment_author_url>
    <wp:comment_author_IP>94.210.5.79</wp:comment_author_IP>
    <wp:comment_date>2018-10-21 14:02:31</wp:comment_date>
    <wp:comment_date_gmt>2018-10-21 12:02:31</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Hi,

No, I didn't try to use it in a Linux environment. Did you try to build the container in a Linux environment?
Regarding the template, you can find it here: https://github.com/OctopusDeploy/Library/blob/1f9e0b558760b311db725b549a5c1fe931cbd0bc/step-templates/docker-create-and-push-image.json#L8
The line is the Powershell script.

Let me know how your experience goes.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>471</wp:comment_parent>
    <wp:comment_user_id>74848251</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>email_notification_jobid</wp:meta_key>
      <wp:meta_value>23424231391</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_queued</wp:meta_key>
      <wp:meta_value>1540123353</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1540123352</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:3:{s:4:"time";d:1540123352.873004;s:5:"event";s:9:"check-ham";s:4:"user";s:10:"joaoasrosa";}</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title>octopus-docker</title>
  <link>http://joaorosa.io/2017/02/04/create-and-push-a-docker-image-from-an-octopus-deployment/octopus-docker/</link>
  <pubDate>Fri, 03 Feb 2017 13:09:45 +0000</pubDate>
  <dc:creator>joaoasrosa</dc:creator>
  <guid isPermaLink="false">http://anotherlookontech.files.wordpress.com/2017/02/octopus-docker.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>1254</wp:post_id>
  <wp:post_date>2017-02-03 13:09:45</wp:post_date>
  <wp:post_date_gmt>2017-02-03 13:09:45</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>octopus-docker</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>1198</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://anotherlookontech.files.wordpress.com/2017/02/octopus-docker.png</wp:attachment_url>
</item>
<item>
  <title>docker-octopus-project</title>
  <link>http://joaorosa.io/2017/02/04/create-and-push-a-docker-image-from-an-octopus-deployment/docker-octopus-project/</link>
  <pubDate>Fri, 03 Feb 2017 13:11:59 +0000</pubDate>
  <dc:creator>joaoasrosa</dc:creator>
  <guid isPermaLink="false">http://anotherlookontech.files.wordpress.com/2017/02/docker-octopus-project.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>1259</wp:post_id>
  <wp:post_date>2017-02-03 13:11:59</wp:post_date>
  <wp:post_date_gmt>2017-02-03 13:11:59</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>docker-octopus-project</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>1198</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://anotherlookontech.files.wordpress.com/2017/02/docker-octopus-project.png</wp:attachment_url>
</item>
<item>
  <title>docker-octopus-step</title>
  <link>http://joaorosa.io/2017/02/04/create-and-push-a-docker-image-from-an-octopus-deployment/docker-octopus-step/</link>
  <pubDate>Fri, 03 Feb 2017 13:14:48 +0000</pubDate>
  <dc:creator>joaoasrosa</dc:creator>
  <guid isPermaLink="false">http://anotherlookontech.files.wordpress.com/2017/02/docker-octopus-step.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>1266</wp:post_id>
  <wp:post_date>2017-02-03 13:14:48</wp:post_date>
  <wp:post_date_gmt>2017-02-03 13:14:48</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>docker-octopus-step</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>1198</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://anotherlookontech.files.wordpress.com/2017/02/docker-octopus-step.png</wp:attachment_url>
</item>
<item>
  <title>docker-octopus-deploy</title>
  <link>http://joaorosa.io/2017/02/04/create-and-push-a-docker-image-from-an-octopus-deployment/docker-octopus-deploy/</link>
  <pubDate>Fri, 03 Feb 2017 13:17:48 +0000</pubDate>
  <dc:creator>joaoasrosa</dc:creator>
  <guid isPermaLink="false">http://anotherlookontech.files.wordpress.com/2017/02/docker-octopus-deploy.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>1269</wp:post_id>
  <wp:post_date>2017-02-03 13:17:48</wp:post_date>
  <wp:post_date_gmt>2017-02-03 13:17:48</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>docker-octopus-deploy</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>1198</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://anotherlookontech.files.wordpress.com/2017/02/docker-octopus-deploy.png</wp:attachment_url>
</item>
<item>
  <title>dockerhub-image</title>
  <link>http://joaorosa.io/2017/02/04/create-and-push-a-docker-image-from-an-octopus-deployment/dockerhub-image/</link>
  <pubDate>Fri, 03 Feb 2017 13:19:20 +0000</pubDate>
  <dc:creator>joaoasrosa</dc:creator>
  <guid isPermaLink="false">http://anotherlookontech.files.wordpress.com/2017/02/dockerhub-image.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>1273</wp:post_id>
  <wp:post_date>2017-02-03 13:19:20</wp:post_date>
  <wp:post_date_gmt>2017-02-03 13:19:20</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>dockerhub-image</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>1198</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://anotherlookontech.files.wordpress.com/2017/02/dockerhub-image.png</wp:attachment_url>
</item>
<item>
  <title>docker-container-run</title>
  <link>http://joaorosa.io/2017/02/04/create-and-push-a-docker-image-from-an-octopus-deployment/docker-container-run/</link>
  <pubDate>Fri, 03 Feb 2017 13:26:47 +0000</pubDate>
  <dc:creator>joaoasrosa</dc:creator>
  <guid isPermaLink="false">http://anotherlookontech.files.wordpress.com/2017/02/docker-container-run.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>1280</wp:post_id>
  <wp:post_date>2017-02-03 13:26:47</wp:post_date>
  <wp:post_date_gmt>2017-02-03 13:26:47</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>docker-container-run</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>1198</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://anotherlookontech.files.wordpress.com/2017/02/docker-container-run.png</wp:attachment_url>
</item>
<item>
  <title>Git pull requests viewer</title>
  <link>http://joaorosa.io/?p=1307</link>
  <pubDate>Mon, 30 Nov -0001 00:00:00 +0000</pubDate>
  <dc:creator>joaoasrosa</dc:creator>
  <guid isPermaLink="false">https://anotherlookontech.wordpress.com/?p=1307</guid>
  <description/>
  <content:encoded><![CDATA[Done with .net core

rider

changes to rider gitignore

<code class="highlighter-rouge">#RiderC#</code>
<code class="highlighter-rouge">.idea/</code>
<code class="highlighter-rouge">*.*.iml</code>

&nbsp;

built on mac

for git users

only supports github

reactive

etc

&nbsp;]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>1307</wp:post_id>
  <wp:post_date>2017-05-26 10:10:17</wp:post_date>
  <wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name/>
  <wp:status>draft</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="sem-categoria"><![CDATA[Sem categoria]]></category>
</item>
<item>
  <title>Actor model with aws lambda function/Azure functions</title>
  <link>http://joaorosa.io/?p=1327</link>
  <pubDate>Mon, 30 Nov -0001 00:00:00 +0000</pubDate>
  <dc:creator>joaoasrosa</dc:creator>
  <guid isPermaLink="false">https://anotherlookontech.wordpress.com/?p=1327</guid>
  <description/>
  <content:encoded><![CDATA[BUUU]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>1327</wp:post_id>
  <wp:post_date>2017-08-03 22:54:03</wp:post_date>
  <wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name/>
  <wp:status>draft</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="sem-categoria"><![CDATA[Sem categoria]]></category>
  <wp:postmeta>
    <wp:meta_key>_wpcom_is_markdown</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Build a .NET Core 2.0 Application in AppVeyor</title>
  <link>http://joaorosa.io/2017/08/10/build-a-net-core-2-0-application-in-appveyor/</link>
  <pubDate>Thu, 10 Aug 2017 09:45:01 +0000</pubDate>
  <dc:creator>joaoasrosa</dc:creator>
  <guid isPermaLink="false">https://anotherlookontech.wordpress.com/?p=1329</guid>
  <description/>
  <content:encoded><![CDATA[<a href="//www.appveyor.com/">AppVeyor</a> is one of the Continuous Integration Services in the cloud, ready to use, with minimal configuration. It provides a Windows Server image with tooling to build, test and deploy ours .NET applications. Among the baseline software is .NET Core, however, the version is 1.0.4 (at the time of writingÂ this post).

If we are playing around with .NET Core 2.0, AppVeyor doesn't offer the SDK (or the SDK build version that we need). Don't panic, it is possible to download and install other .NET Core SDKs into the instance during our build process. After poking the Internet, the .NET Team offers a <a href="//docs.microsoft.com/en-us/dotnet/core/tools/dotnet-install-script">Powershell and a Bash script</a> to download and install the SDK by version.

Following the documentation, we can install any SDK version using the terminal/command line. The version that my project needs isÂ <code>2.0.0-preview2-006497</code>. Let the games begin!

In a Powershell command line, I craft the command for my version, as:

<pre><code>.\dotnet-install.ps1 -Version 2.0.0-preview2-006497</code></pre>

And Powershell informed me:

<img src="https://anotherlookontech.files.wordpress.com/2017/08/ps_dotnetinstall.png" alt="Powershell dotnet_install.ps1 -Version 2.0.0-preview2-006497 command result" />

Hmmm, the required version doesn't exist in the blob. A roadblock... Nothing major. Opening the [source code]<a href="//github.com/dotnet/cli/blob/rel/1.0.0/scripts/obtain/dotnet-install.ps1">script_source_code</a> of the script, we can see that the <a href="//github.com/dotnet/cli/blob/rel/1.0.0/scripts/obtain/dotnet-install.ps1#L396">SDK download link is built</a> based on a few parameters.

The .NET Team already did all the work regarding downloading, unpacking and installing the SDK, and I can leverage the script to get the SDK from another source. The official download link is <a href="//download.microsoft.com/download/F/A/A/FAAE9280-F410-458E-8819-279C5A68EDCF/dotnet-sdk-2.0.0-preview2-006497-win-x64.zip">https://download.microsoft.com/download/F/A/A/FAAE9280-F410-458E-8819-279C5A68EDCF/dotnet-sdk-2.0.0-preview2-006497-win-x64.zip</a>.

Doing a little tweak to <a href="//github.com/joaoasrosa/pullrequests-viewer/blob/master/build/install-dotnet.ps1#L396">the file</a>, it is possible to point the download of the SDK to the official download link:

<pre><code># $DownloadLinks = Get-Download-Links -AzureFeed $AzureFeed -AzureChannel $AzureChannel -SpecificVersion $SpecificVersion -CLIArchitecture $CLIArchitecture
$DownloadLinks = @("https://download.microsoft.com/download/F/A/A/FAAE9280-F410-458E-8819-279C5A68EDCF/dotnet-sdk-2.0.0-preview2-006497-win-x64.zip")</code></pre>

At this point, I have all the individual components to make the final solution. The <code>appveyor.yml</code> file needs to execute the <code>dotnet_install</code> script before building the .NET Core 2 application:

<pre><code>version: 0.0.{build}
image: Visual Studio 2017 Preview
build_script:
- ps: &gt;-
    ./build/install-dotnet.ps1
    dotnet --version
    # Build application
test: off</code></pre>

And AppVeyor reports:

<img src="https://anotherlookontech.files.wordpress.com/2017/08/appveyor_build.png" alt="AppVeyor installs the .NET Core 2.0 SDK" />

Hurray, I have .NET Core 2.0 SDK installed, and my application is built successfully! :)

You can use this solution to install <em>any</em> version of the SDK that is not supported by the AppVeyor official image. You can jump to .NET Core 2.1!]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>1329</wp:post_id>
  <wp:post_date>2017-08-10 11:45:01</wp:post_date>
  <wp:post_date_gmt>2017-08-10 09:45:01</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>build-a-net-core-2-0-application-in-appveyor</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="net-core"><![CDATA[.NET Core]]></category>
  <category domain="post_tag" nicename="appveyor"><![CDATA[AppVeyor]]></category>
  <category domain="category" nicename="continuous-integration"><![CDATA[Continuous Integration]]></category>
  <category domain="post_tag" nicename="gist"><![CDATA[Gist]]></category>
  <category domain="post_tag" nicename="github"><![CDATA[GitHub]]></category>
  <category domain="category" nicename="oss"><![CDATA[OSS]]></category>
  <category domain="post_tag" nicename="powershell"><![CDATA[PowerShell]]></category>
  <wp:postmeta>
    <wp:meta_key>_wpcom_is_markdown</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:1:{s:7:"twitter";a:1:{i:15487188;s:56:"https://twitter.com/joaoasrosa/status/895581765506662400";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_published</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_client_id</wp:meta_key>
    <wp:meta_value><![CDATA[-1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[8122770253]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_google_plus_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://plus.google.com/105879670784970671735/posts/g2HZDC5hkC4]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_15567246</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_15420870</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_15638091</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_15487188</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[joaoasrosa]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_failed_15638097</wp:meta_key>
    <wp:meta_value><![CDATA[O:13:"Keyring_Error":2:{s:6:"errors";a:1:{s:21:"keyring-request-error";a:1:{i:0;a:6:{s:7:"headers";O:42:"Requests_Utility_CaseInsensitiveDictionary":1:{s:7:"]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>167</wp:comment_id>
    <wp:comment_author><![CDATA[Abstract from your CI. Use Cake! &#8211; Another look on tech]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>https://anotherlookontech.wordpress.com/2017/10/18/abstract-from-your-ci-use-cake/</wp:comment_author_url>
    <wp:comment_author_IP>192.0.86.76</wp:comment_author_IP>
    <wp:comment_date>2017-10-18 08:43:44</wp:comment_date>
    <wp:comment_date_gmt>2017-10-18 06:43:44</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[&#8230;] The development was simplified since the operations to build &amp; test my project was the same that the build server would execute. It avoids the old developer excuse &#8220;it works on my machine&#8221;, since the developer machine has the same software that the build server (during the development I face this problem with AppVeyor. The solution was published here). [&#8230;]]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:2:{s:4:"time";d:1508309024.8954689502716064453125;s:5:"event";s:9:"check-ham";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1508310426</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:3:{s:4:"time";d:1508310426.5966188907623291015625;s:5:"event";s:15:"status-approved";s:4:"user";s:10:"joaoasrosa";}</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title>PS_dotnetinstall</title>
  <link>http://joaorosa.io/2017/08/10/build-a-net-core-2-0-application-in-appveyor/ps_dotnetinstall/</link>
  <pubDate>Thu, 10 Aug 2017 09:10:07 +0000</pubDate>
  <dc:creator>joaoasrosa</dc:creator>
  <guid isPermaLink="false">http://anotherlookontech.files.wordpress.com/2017/08/ps_dotnetinstall.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>1365</wp:post_id>
  <wp:post_date>2017-08-10 11:10:07</wp:post_date>
  <wp:post_date_gmt>2017-08-10 09:10:07</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>ps_dotnetinstall</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>1329</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://anotherlookontech.files.wordpress.com/2017/08/ps_dotnetinstall.png</wp:attachment_url>
</item>
<item>
  <title>AppVeyor_Build</title>
  <link>http://joaorosa.io/2017/08/10/build-a-net-core-2-0-application-in-appveyor/appveyor_build/</link>
  <pubDate>Thu, 10 Aug 2017 09:37:00 +0000</pubDate>
  <dc:creator>joaoasrosa</dc:creator>
  <guid isPermaLink="false">http://anotherlookontech.files.wordpress.com/2017/08/appveyor_build.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>1403</wp:post_id>
  <wp:post_date>2017-08-10 11:37:00</wp:post_date>
  <wp:post_date_gmt>2017-08-10 09:37:00</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>appveyor_build</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>1329</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://anotherlookontech.files.wordpress.com/2017/08/appveyor_build.png</wp:attachment_url>
</item>
<item>
  <title>Logz.io and magento 2</title>
  <link>http://joaorosa.io/?p=1424</link>
  <pubDate>Mon, 30 Nov -0001 00:00:00 +0000</pubDate>
  <dc:creator>joaoasrosa</dc:creator>
  <guid isPermaLink="false">https://anotherlookontech.wordpress.com/?p=1424</guid>
  <description/>
  <content:encoded><![CDATA[configure per isntructions
install agent
open port on security group
do the config to the /var/www/html/var/log/*.log
start playing around

later on create the filters to have the date and level since it is a custom log (PSR-3)]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>1424</wp:post_id>
  <wp:post_date>2017-08-29 21:08:16</wp:post_date>
  <wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name/>
  <wp:status>draft</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="sem-categoria"><![CDATA[Sem categoria]]></category>
  <wp:postmeta>
    <wp:meta_key>_wpcom_is_markdown</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>NDepend, first impressions on a static code analyser</title>
  <link>http://joaorosa.io/2017/10/01/ndepend-first-impressions-on-a-static-code-analyser/</link>
  <pubDate>Sun, 01 Oct 2017 16:44:04 +0000</pubDate>
  <dc:creator>joaoasrosa</dc:creator>
  <guid isPermaLink="false">https://anotherlookontech.wordpress.com/?p=1437</guid>
  <description/>
  <content:encoded><![CDATA[During my career, I learned on the hardestÂ way how a poor codebase can be harmful to the business. I witness behavioursÂ in teams such as:

<ul>
    <li>Missing code reviews. How can we be a team, if we do not communicate?</li>
    <li>No coding standards. At least settleÂ the capitalisation style?</li>
    <li>Testing. Wait, spending time writingÂ tests?</li>
</ul>

Luckily, I also worked as part of great teams, whereby everyone was committed to the code quality, continuous learning and discussing in how we can improve it, moving us faster.

[caption id="attachment_1498" align="aligncenter" width="600"]<img class="size-full wp-image-1498 aligncenter" src="https://anotherlookontech.files.wordpress.com/2017/10/cb_3ijuugaaa7_4.jpg" alt="CB_3iJUUgAAA7_4" width="600" height="391" /> Technical debt for dummies. Source:Â <a href="https://twitter.com/carnage4life/status/585458646680670208" rel="noopener">https://twitter.com/carnage4life</a>[/caption]

Recently, I started investing some time understanding in how we can leverage the available tools in our technological space to enhance our codebase and at the same time reducing the time spent on some tasks, such as code reviews. I firmly believe that a (manual) code review should be focused on architectural principles (how the code fits in the grand scheme of our applications landscape), and less on topics as naming conventions or test coverage. The latter can be done by static code analysers, freeing up the time of the reviewers for the former.

<h2>NDepend, how can it help?</h2>

A goodÂ codebase not only is readable and maintainable but is it also performant. Sometimes we introduce potential bottlenecks in some forms or shapes, such as the usage of a class instead of a structure, or leaking the scope of a variable. The next developer responsible for extending or using the code will not know the initial intention (it only lives in our head), but she/he only knows the intention of our code. If a variable has a bigger scope that it should, someone will "leverage" it in the next feature iteration, introducing unintendedÂ behaviourÂ or even bugs. The previous scenario is an example of technical debt (introduced byÂ Ward Cunningham in <a href="http://c2.com/doc/oopsla92.html" rel="noopener">1992</a>, with a more verbose explanation by <a href="https://martinfowler.com/bliki/TechnicalDebt.html" rel="noopener">Martin Fowler</a>).

NDepend translates the technical debt and code smells to useful dashboards, using static code analysis technics. Let's give it a spin.

<h2>Apply it to a project</h2>

After install and configure NDepend, I decide to use it on a pet project. The pet project is relatively small, with a fair number of unit and acceptance tests. Running NDepend with the default settings I got:

[caption id="attachment_1521" align="alignnone" width="1769"]<img class="alignnone size-full wp-image-1521 aligncenter" src="https://anotherlookontech.files.wordpress.com/2017/10/pullrequestsviewer_ndepend_dashboard.png" alt="PullRequestsViewer_NDepend_Dashboard" width="1769" height="923" /> NDepend result on Pull Requests Viewer project[/caption]

I was surprised with the results since it failed some <a href="https://www.ndepend.com/docs/quality-gates">Quality Gates</a> and violated some Rules. Doing further digging, I found the "bad boy", who violate one of the quality gates:

[caption id="attachment_1531" align="aligncenter" width="703"]<img class="size-full wp-image-1531 aligncenter" src="https://anotherlookontech.files.wordpress.com/2017/10/pullrequestsviewer_ndepend_rulesviolated.png" alt="PullRequestsViewer_NDepend_RulesViolated" width="703" height="525" /> Violated rule for the quality gate[/caption]

If we expand the rule it pinpoints to the code line where the rule is violated, and at the same time provides the explanation of the rule, thus all the details behind the rationale of the rule, and how it impacts the current solution. No matter how careful we are with our codebase, sometimes some oversight happens, and it will pop up in the future. In the end, we are humans, and we have machines capable of run all these rules.

NDepend provides a wide range of pre-defined rules, but it also allows the user to tweak and tune them, or even create new rules based on the project/company standards. It implements a LINQ-based query language (CQLinq), the syntax is intuitive and user-friendly (for developers with C# background).

<h2>Where it can shine</h2>

Although we all envisionÂ a greenfield project, in reality, most of the time, we work with legacy codebases. Don't get me wrong, legacy code bases pay our salaries (borrow from Eric Evans through Mathias Verraesâ):

<blockquote class="twitter-tweet">
<p dir="ltr" lang="en">"Legacy systems make money. You should hope that one day your system becomes a legacy system." <a href="https://twitter.com/ericevans0?ref_src=twsrc%5Etfw">@ericevans0</a> at <a href="https://twitter.com/ExploreDDD?ref_src=twsrc%5Etfw">@ExploreDDD</a></p>
â Mathias Verraes (@mathiasverraes) <a href="https://twitter.com/mathiasverraes/status/910678206985973760?ref_src=twsrc%5Etfw">21 de setembro de 2017</a></blockquote>

I did a fair bit of code refactors on legacy code bases, morphing the state to a maintainable structure. Although I discover some useful techniques like the <a href="https://www.manning.com/books/the-mikado-method">Mikado Method</a>, a tool like NDepend would be helpful on the discovery of code/architecture smells, speeding up the refactoring work. Along with it, NDepend tracks the code base metrics across time, providing useful insights over the work done.

<h2>Continuous Integration and NDepend</h2>

The integration with some of the major CI technologies is a plus for this tool. The capability of generating reports on each commit/merge empowers the teams with the right metrics at the right team, helping them to tackle the problems sooner rather than later, avoiding the <a href="https://www.ndepend.com/docs/technical-debt">technical debt bogeyman</a>.

The documentation is extensive and detailed, most of the times providing images with feature examples over OSS code bases (<a href="https://www.ndepend.com/Sample-Reports/OnNodaTime/NDependReport.html#Main">here</a> it can be found the report of the popular NodaTime package).

<h2>Final thoughts</h2>

Although this was my first impression of the tool, and I used it for a couple of hours during the weekend, it proved to be a powerful tool to be added to my toolbox. It unveils some underline issues with a small project as the <a href="https://github.com/joaoasrosa/pullrequests-viewer">Pull Requests Viewer</a>, helping me to clean the codebase and think of better solutions to the reported issues.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>1437</wp:post_id>
  <wp:post_date>2017-10-01 18:44:04</wp:post_date>
  <wp:post_date_gmt>2017-10-01 16:44:04</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>ndepend-first-impressions-on-a-static-code-analyser</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="net"><![CDATA[.NET]]></category>
  <category domain="post_tag" nicename="net-core"><![CDATA[.NET Core]]></category>
  <category domain="post_tag" nicename="code-coverage"><![CDATA[Code Coverage]]></category>
  <category domain="category" nicename="code-development"><![CDATA[Code Development]]></category>
  <category domain="post_tag" nicename="continuous-improvement"><![CDATA[Continuous Improvement]]></category>
  <category domain="post_tag" nicename="continuous-innovation"><![CDATA[Continuous Innovation]]></category>
  <category domain="category" nicename="continuous-integration"><![CDATA[Continuous Integration]]></category>
  <category domain="post_tag" nicename="devops"><![CDATA[DevOps]]></category>
  <category domain="post_tag" nicename="ndepend"><![CDATA[NDepend]]></category>
  <category domain="post_tag" nicename="testing"><![CDATA[Testing]]></category>
  <category domain="post_tag" nicename="vcs"><![CDATA[VCS]]></category>
  <category domain="post_tag" nicename="visual-studio"><![CDATA[Visual Studio]]></category>
  <wp:postmeta>
    <wp:meta_key>_wpcom_is_markdown</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_google_plus_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://plus.google.com/105879670784970671735/posts/RZ17Zr1kgi3]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_published</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_client_id</wp:meta_key>
    <wp:meta_value><![CDATA[-1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[9861550841]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_15567246</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_15420870</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:1:{s:7:"twitter";a:1:{i:15487188;s:56:"https://twitter.com/joaoasrosa/status/914531416196698118";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_15638091</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_15487188</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[joaoasrosa]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_linkedin_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://www.linkedin.com/updates?discuss=&scope=27794317&stype=M&topic=6320297110621212672&type=U&a=pcHI]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_15638097</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_15487191</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>196</wp:comment_id>
    <wp:comment_author><![CDATA[When Cake meets NDepend &#8211; Another look on tech]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>https://anotherlookontech.wordpress.com/2017/12/31/when-cake-meets-ndepend/</wp:comment_author_url>
    <wp:comment_author_IP>192.0.86.139</wp:comment_author_IP>
    <wp:comment_date>2017-12-31 18:36:36</wp:comment_date>
    <wp:comment_date_gmt>2017-12-31 17:36:36</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[â¦] reviews, static code analyzers can be used, helping with the code analysis. Personally, I prefer NDepend, because of the wide range of reports and insights about the [â¦]]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:2:{s:4:"time";d:1514741796.3207080364227294921875;s:5:"event";s:9:"check-ham";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1514741817</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:3:{s:4:"time";d:1514741818.567576885223388671875;s:5:"event";s:15:"status-approved";s:4:"user";s:10:"joaoasrosa";}</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title>CB_3iJUUgAAA7_4</title>
  <link>http://joaorosa.io/2017/10/01/ndepend-first-impressions-on-a-static-code-analyser/cb_3ijuugaaa7_4/</link>
  <pubDate>Sun, 01 Oct 2017 10:10:45 +0000</pubDate>
  <dc:creator>joaoasrosa</dc:creator>
  <guid isPermaLink="false">http://anotherlookontech.files.wordpress.com/2017/10/cb_3ijuugaaa7_4.jpg</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>1498</wp:post_id>
  <wp:post_date>2017-10-01 12:10:45</wp:post_date>
  <wp:post_date_gmt>2017-10-01 10:10:45</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>cb_3ijuugaaa7_4</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>1437</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://anotherlookontech.files.wordpress.com/2017/10/cb_3ijuugaaa7_4.jpg</wp:attachment_url>
</item>
<item>
  <title>PullRequestsViewer_NDepend_Dashboard</title>
  <link>http://joaorosa.io/2017/10/01/ndepend-first-impressions-on-a-static-code-analyser/pullrequestsviewer_ndepend_dashboard/</link>
  <pubDate>Sun, 01 Oct 2017 14:57:39 +0000</pubDate>
  <dc:creator>joaoasrosa</dc:creator>
  <guid isPermaLink="false">http://anotherlookontech.files.wordpress.com/2017/10/pullrequestsviewer_ndepend_dashboard.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>1521</wp:post_id>
  <wp:post_date>2017-10-01 16:57:39</wp:post_date>
  <wp:post_date_gmt>2017-10-01 14:57:39</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>pullrequestsviewer_ndepend_dashboard</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>1437</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://anotherlookontech.files.wordpress.com/2017/10/pullrequestsviewer_ndepend_dashboard.png</wp:attachment_url>
</item>
<item>
  <title>PullRequestsViewer_NDepend_RulesViolated</title>
  <link>http://joaorosa.io/2017/10/01/ndepend-first-impressions-on-a-static-code-analyser/pullrequestsviewer_ndepend_rulesviolated/</link>
  <pubDate>Sun, 01 Oct 2017 15:05:01 +0000</pubDate>
  <dc:creator>joaoasrosa</dc:creator>
  <guid isPermaLink="false">http://anotherlookontech.files.wordpress.com/2017/10/pullrequestsviewer_ndepend_rulesviolated.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>1531</wp:post_id>
  <wp:post_date>2017-10-01 17:05:01</wp:post_date>
  <wp:post_date_gmt>2017-10-01 15:05:01</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>pullrequestsviewer_ndepend_rulesviolated</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>1437</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://anotherlookontech.files.wordpress.com/2017/10/pullrequestsviewer_ndepend_rulesviolated.png</wp:attachment_url>
</item>
<item>
  <title>Abstract from your CI. Use Cake!</title>
  <link>http://joaorosa.io/2017/10/18/abstract-from-your-ci-use-cake/</link>
  <pubDate>Wed, 18 Oct 2017 06:43:38 +0000</pubDate>
  <dc:creator>joaoasrosa</dc:creator>
  <guid isPermaLink="false">https://anotherlookontech.wordpress.com/?p=1633</guid>
  <description/>
  <content:encoded><![CDATA[Here at <a href="https://www.coolblue.nl" target="_blank" rel="noopener">Coolblue</a>, we can choose our tools from a range of technologies. A while ago, our team started moving from Microsoft MSTest to xUnit.

Although the code change was fairly simple, the build pipeline was tied with the MSTest framework, ignoring the xUnit tests. Between the requests to the deployment team to alter the team's deployment pipelines, <a href="https://nathanjohnstone.wordpress.com/" target="_blank" rel="noopener">Nathan</a> challenged us to use Cake.

<h2><a id="user-content-what-is-cake" class="anchor" href="#what-is-cake"></a>What is Cake?</h2>

<a href="https://camo.githubusercontent.com/37601742f9e68206e3ba9b4bd5da255b69d0b929/68747470733a2f2f63646e2d696d6167652e6d79726563697065732e636f6d2f73697465732f64656661756c742f66696c65732f7265642d76656c7665742d63616b652d636f636f6e75742d637265616d2d6368656573652d66726f7374696e672d63726f702d736c2e6a7067" target="_blank" rel="noopener"><img class=" aligncenter" style="max-width:100%;" src="https://camo.githubusercontent.com/37601742f9e68206e3ba9b4bd5da255b69d0b929/68747470733a2f2f63646e2d696d6167652e6d79726563697065732e636f6d2f73697465732f64656661756c742f66696c65732f7265642d76656c7665742d63616b652d636f636f6e75742d637265616d2d6368656573652d66726f7374696e672d63726f702d736c2e6a7067" alt="The Cake" /></a>
<em>Red Velvet cake; Photo: Jim Franco; Styling: Lydia Degaris Pursell; Original URL: <a href="http://www.myrecipes.com/recipe/red-velvet-cake-1" target="_blank" rel="noopener">http://www.myrecipes.com/recipe/red-velvet-cake-1</a></em>

Although I'm a cake monster, "Cake (C# Make) is a cross-platform build automation system with a C# DSL to do things like compiling code, copy files/folders, running unit tests, compress files and build NuGet packages <em>(source)</em>."

Great, this is the tool that was missing, allowing us to abstract from our CI server, speeding our development (at the end that is Agile)!

<h2><a id="user-content-the-roller-coast" class="anchor" href="#the-roller-coast"></a>The roller-coaster</h2>

Cake allow us to build our project in many different ways with a syntax that is our bread and butter (C#). The platform is open-source, meaning that we can fix any bug, or <a href="https://cakebuild.net/docs/contributing/contribution-guidelines" target="_blank" rel="noopener">contribute</a> with a module to increase the ecosystem.

During my spare time, I started playing around with Cake in a <a href="https://github.com/joaoasrosa/pullrequests-viewer" target="_blank" rel="noopener">pet project</a>. The pet project is built using .NET Core 2.0, and the ultimate goal was to build the project in <a href="https://www.appveyor.com/" target="_blank" rel="noopener">AppVeyor</a> and <a href="https://travis-ci.org/" target="_blank" rel="noopener">TravisCI</a>. The build steps were:

<ol>
    <li>Ensure the non-solution folders exists (for example, artifacts folder)</li>
    <li>Clean the solution</li>
    <li>Restore the NuGet packages</li>
    <li>Apply the <a href="http://semver.org/" target="_blank" rel="noopener">Semantic Versioning</a></li>
    <li>Build the solution</li>
    <li>Run the tests</li>
</ol>

As a bonus it should be able to:

<ol>
    <li>Package and push a NuGet package</li>
    <li>Create and push a Docker container</li>
</ol>

Cake offers support to all these steps, either out-of-the-box feature or as a module offered by the community.

The development was simplified since the operations to build &amp; test my project was the same that the build server would execute. It avoids the old developer excuse "it works on my machine", <em><strong>since</strong></em> the developer machine has the same software as the build server (during the development I face this problem with AppVeyor. The solution was published <a href="https://anotherlookontech.wordpress.com/2017/08/10/build-a-net-core-2-0-application-in-appveyor/" target="_blank" rel="noopener">here</a>).

<h2><a id="user-content-a-plethora-of-opportunities" class="anchor" href="#a-plethora-of-opportunities"></a>A plethora of opportunities</h2>

<a href="https://camo.githubusercontent.com/a65d613e7adede566d60cc8e0d87b90323ceec16/68747470733a2f2f6d656469612e6d616b65616d656d652e6f72672f637265617465642f4f50504f5254554e49544945532d4f50504f5254554e49544945532d455645525957484552452d316b657575732e6a7067" target="_blank" rel="noopener"><img class=" aligncenter" style="max-width:100%;" src="https://camo.githubusercontent.com/a65d613e7adede566d60cc8e0d87b90323ceec16/68747470733a2f2f6d656469612e6d616b65616d656d652e6f72672f637265617465642f4f50504f5254554e49544945532d4f50504f5254554e49544945532d455645525957484552452d316b657575732e6a7067" alt="Opportunities everywhere!" /></a>

This approach decreased the time to configure two different CI servers since it supports the executing of the scripts in Windows, Linux, and MacOS.

However, the opportunities are endless. In an enterprise environment, the software is a complex web of services and other moving parts; a team needs to be able to add a feature, test &amp; ship it quickly; at the same time ensuring the business is working as expected, and more important, it doesn't introduce any regression bugs.

Using Cake, we can setup the script to deploy the necessary components on our development machines, running the tests to assure that everything works before we push our changes. This level of automation and abstraction also enables the developers to focus on delivering value (coding a new feature), rather than spending time configuring and deploying (manually) all the components to run the tests. Raise your hand who was in this situation. Yeah, every developer. ð

<h2><a id="user-content-the-final-result" class="anchor" href="#the-final-result"></a>The final result</h2>

After a few hours around the script, both AppVeyor and TravisCI can execute it, predictably, as I do in my development environment. You can view a sample of the build logs <a href="https://ci.appveyor.com/project/joaoasrosa/pullrequests-viewer" target="_blank" rel="noopener">here</a> and <a href="https://travis-ci.org/joaoasrosa/pullrequests-viewer" target="_blank" rel="noopener">here</a>.

Within our team, we started to move towards this direction. All the new projects are bootstrapped with a basic Cake script (Clean, Restore, Build, Test and Create NuGet package), but the team iteratively adapts it to our development needs. In the end, a development team should be proud of the software delivered, because it improves the business, but also the team has to be able to use its time in an effective way.

<h2><a id="user-content-and-for-other-languagesframeworks" class="anchor" href="#and-for-other-languagesframeworks"></a>And for other languages/frameworks?</h2>

The same concept exists in other languages/frameworks. As short list we can:

<ul>
    <li><a href="https://cmake.org/" target="_blank" rel="noopener">CMake</a></li>
    <li><a href="https://gradle.org/" target="_blank" rel="noopener">Gradle</a></li>
    <li><a href="https://fake.build/" target="_blank" rel="noopener">Fake</a></li>
    <li><a href="https://github.com/psake/psake" target="_blank" rel="noopener">PSake</a></li>
    <li><a href="https://ruby.github.io/rake/" target="_blank" rel="noopener">Rake</a></li>
</ul>

Be aware that this is a <em>short list</em>. Out there exists other build platforms that allow you to abstract from your CI server.

&nbsp;]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>1633</wp:post_id>
  <wp:post_date>2017-10-18 08:43:38</wp:post_date>
  <wp:post_date_gmt>2017-10-18 06:43:38</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>abstract-from-your-ci-use-cake</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="net"><![CDATA[.NET]]></category>
  <category domain="post_tag" nicename="net-core"><![CDATA[.NET Core]]></category>
  <category domain="post_tag" nicename="applications"><![CDATA[Applications]]></category>
  <category domain="post_tag" nicename="appveyor"><![CDATA[AppVeyor]]></category>
  <category domain="post_tag" nicename="cake"><![CDATA[Cake]]></category>
  <category domain="category" nicename="code-development"><![CDATA[Code Development]]></category>
  <category domain="category" nicename="continuous-deployment"><![CDATA[Continuous Deployment]]></category>
  <category domain="post_tag" nicename="continuous-improvement"><![CDATA[Continuous Improvement]]></category>
  <category domain="post_tag" nicename="continuous-innovation"><![CDATA[Continuous Innovation]]></category>
  <category domain="category" nicename="continuous-integration"><![CDATA[Continuous Integration]]></category>
  <category domain="post_tag" nicename="devops"><![CDATA[DevOps]]></category>
  <category domain="post_tag" nicename="docker"><![CDATA[Docker]]></category>
  <category domain="post_tag" nicename="jenkins"><![CDATA[Jenkins]]></category>
  <category domain="post_tag" nicename="linux"><![CDATA[Linux]]></category>
  <category domain="post_tag" nicename="travisci"><![CDATA[TravisCI]]></category>
  <category domain="post_tag" nicename="windows"><![CDATA[Windows]]></category>
  <wp:postmeta>
    <wp:meta_key>_wpcom_is_markdown</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_published</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_client_id</wp:meta_key>
    <wp:meta_value><![CDATA[-1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[10449975814]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_google_plus_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://plus.google.com/105879670784970671735/posts/eacqRYCL518]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_15567246</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_15420870</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:1:{s:7:"twitter";a:1:{i:15487188;s:56:"https://twitter.com/joaoasrosa/status/920540881828155392";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_15638091</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_15487188</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[joaoasrosa]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_linkedin_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://www.linkedin.com/updates?discuss=&scope=27794317&stype=M&topic=6326306575438876672&type=U&a=YlCS]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_15638097</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_15487191</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>348</wp:comment_id>
    <wp:comment_author><![CDATA[Life of a C# Developer: How to build and test an AWS Lambda locally &#8211; Another look on tech]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>http://joaorosa.io/2018/05/21/life-of-a-c-developer-how-to-build-and-test-an-aws-lambda-locally/</wp:comment_author_url>
    <wp:comment_author_IP>192.0.101.243</wp:comment_author_IP>
    <wp:comment_date>2018-05-21 18:17:39</wp:comment_date>
    <wp:comment_date_gmt>2018-05-21 16:17:39</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[&#8230;] Since we are in the .NET world, we use Cake to script our local testing. The script allows the build, deploy and test the involved components in the same way locally and in the CI server. [&#8230;]]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:2:{s:4:"time";d:1526919460.125833;s:5:"event";s:9:"check-ham";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:2:{s:4:"time";d:1526923387.539325;s:5:"event";s:9:"check-ham";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1526984261</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:3:{s:4:"time";d:1526984261.650834;s:5:"event";s:15:"status-approved";s:4:"user";s:10:"joaoasrosa";}</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>195</wp:comment_id>
    <wp:comment_author><![CDATA[When Cake meets NDepend &#8211; Another look on tech]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>https://anotherlookontech.wordpress.com/2017/12/31/when-cake-meets-ndepend/</wp:comment_author_url>
    <wp:comment_author_IP>192.0.86.139</wp:comment_author_IP>
    <wp:comment_date>2017-12-31 18:36:34</wp:comment_date>
    <wp:comment_date_gmt>2017-12-31 17:36:34</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[&#8230;] manual scripts, to test &amp; deploy it. To help me automate my software development tasks, I use Cake, &#8220;a cross platform build automation system with a C# [&#8230;]]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:2:{s:4:"time";d:1514741794.4305279254913330078125;s:5:"event";s:9:"check-ham";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1514741820</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:3:{s:4:"time";d:1514741820.855679988861083984375;s:5:"event";s:15:"status-approved";s:4:"user";s:10:"joaoasrosa";}</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>419</wp:comment_id>
    <wp:comment_author><![CDATA[Life of a C# Developer: How to build and test an AWS Lambda locally &mdash; Xebia Blog]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>https://xebia.com/blog/life-of-a-c-developer-how-to-build-and-test-an-aws-lambda-locally/</wp:comment_author_url>
    <wp:comment_author_IP>35.205.52.216</wp:comment_author_IP>
    <wp:comment_date>2018-08-17 16:54:09</wp:comment_date>
    <wp:comment_date_gmt>2018-08-17 14:54:09</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[â¦] Since we are in the .NET world, we use Cake to script our local testing. The script allows the build, deploy and test the involved components in the same way locally and in the CI server. [â¦]]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:2:{s:4:"time";d:1534517650.340876;s:5:"event";s:9:"check-ham";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1534517778</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:3:{s:4:"time";d:1534517778.204098;s:5:"event";s:15:"status-approved";s:4:"user";s:10:"joaoasrosa";}</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title>My first Coolblue Hackathon. How to be hacked</title>
  <link>http://joaorosa.io/2017/10/22/my-first-coolblue-hackathon-how-to-be-hacked/</link>
  <pubDate>Sun, 22 Oct 2017 10:01:53 +0000</pubDate>
  <dc:creator>joaoasrosa</dc:creator>
  <guid isPermaLink="false">https://anotherlookontech.wordpress.com/?p=1667</guid>
  <description/>
  <content:encoded><![CDATA[Last week we had our annual Hackathon, my first at Coolblue. Here we are taken to a remote location for 3 days to hack away. I joined a team who wants to build an application to measure the happiness in Coolblue. Wait, measure happiness? How?

It's a straightforward concept: after a meeting, the participants click on one of the three available buttons, and the results are collected. Since the data is anonymous, we believe people will vote in an appropriate manner, giving insights about the mood of the group. It's a powerful tool, fits in our culture and can allow us to be proactive insteadÂ of reactive.

<h2>Day 1 - Being hacked</h2>

Our team had a mix of skills, experience and expertise, and I was looking forward to startingÂ the hackathon. In our first meeting, our Agile Jedi suggested usingÂ the <a href="https://en.wikipedia.org/wiki/Pomodoro_Technique" rel="noopener">Pomodoro technique</a>, to timebox our activities. We all know, a hackathon should be a free flow, but sometimes the work drifts with people notice it.

<img class="size-full wp-image-1723 aligncenter" src="https://anotherlookontech.files.wordpress.com/2017/10/img_20171010_135327.jpg" alt="IMG_20171010_135327.jpg" width="4608" height="3456" />

Although not all elements knew the Pomodoro technique, after a brief introduction, the team was on board. For me was the first time to apply the method at team scale. :)

We outline the architecture, as well the components and technologies to use, and more importantly our goal. At the end of the second day, we need a fully functional prototype, where it is possible to vote in the context of a meeting and display the results per meeting. The team agreed to split it in half, handling the frontend and backend in separate streams. That kicked off our first Pomodoro!

<img class="size-full wp-image-1722 aligncenter" src="https://anotherlookontech.files.wordpress.com/2017/10/img_20171010_115856.jpg" alt="IMG_20171010_115856.jpg" width="3456" height="4608" />

Between Pomodoros, the team sat down together and discuss what we did, ifÂ we will invest more time on the task at hand, or even if we need to adjust or change the tasks to achieve our goal. Also, embody theÂ agile spirit, here and there we had a broader discussion of adjusting the way we were doing the project, pretty much as a retrospective.

On the first day, I was working on the backend, doing part of our services infrastructure to support the application. We did lots of pair programming, on different fashions, and we speed up the development of our project. It allows us to be in constant communication, a key ingredient to a successful team. To share the components between the team members, we deploy the services in Docker containers with the help of Cake scripts. Hurray, scripting for the way!

<img class="size-full wp-image-1726 aligncenter" src="https://anotherlookontech.files.wordpress.com/2017/10/img_20171010_232703.jpg" alt="IMG_20171010_232703.jpg" width="3880" height="5184" />

On the first day, I was happy with our progress, we had the services and main application up and running. We were able to commit the changes to our repositories, build the services and application and running it locally using Docker. Now is time for the barbecue and a few beers with my colleagues.

<img class="size-full wp-image-1725 aligncenter" src="https://anotherlookontech.files.wordpress.com/2017/10/img_20171010_183555.jpg" alt="IMG_20171010_183555.jpg" width="4608" height="3456" />

<h2>Day 2 - Sleep is for the weak</h2>

Sleep is for the weak. This was the motto for this year. And the room on the morning of Day 2:

<img class="size-full wp-image-1727 aligncenter" src="https://anotherlookontech.files.wordpress.com/2017/10/img_20171011_095248.jpg" alt="IMG_20171011_095248.jpg" width="4608" height="3456" />

After our breakfastÂ and a morning walk, we decide to polish the UI of application and finish implementing the reports. I volunteeredÂ to work on the frontend, namely the display of the meetings reports. It has a chill morning, and we completed our application. Happy days, we need to prepare the demo for the Friday Hackathon Fair.

We laid down our strategy, gather some real-life data, generate our datasets and test the application in several machines, close to a real-life situation. We were tired, but with a smile on our faces, the mission was accomplished!

<img class="size-full wp-image-1728 aligncenter" src="https://anotherlookontech.files.wordpress.com/2017/10/img_20171011_182037.jpg" alt="IMG_20171011_182037.jpg" width="4608" height="3456" />

On the afternoon was reserved a hackathon activity, which involved being outside. We had a little competition in a bouncy castle. Good laughs.

<img class="size-full wp-image-1772 aligncenter" src="https://anotherlookontech.files.wordpress.com/2017/10/img_20171011_171048-1.jpg" alt="IMG_20171011_171048-1.jpg" width="4608" height="3456" />

After this relaxing moment, we head for our dinner. On the second day, he had a food truck. Excellent curry with a fresh beer.

<img class="size-full wp-image-1729 aligncenter" src="https://anotherlookontech.files.wordpress.com/2017/10/img_20171011_190135.jpg" alt="IMG_20171011_190135.jpg" width="4608" height="3456" />

The second day was almost wrap up, we had Hackathon party. Good vibes, some drinking games, an opportunity to know other colleagues from other domains.

<h2>Demo fair</h2>

On the third day, we returned to Rotterdam, and we were given the afternoon off. However for me was the time to go to Amsterdam for TechDays. I will write about the conference in the following post. To showcase our projects, Coolblue hosted a demo fair on the next day in the afternoon. We had the opportunity to demo our application to our colleagues, showing the benefits of measure happiness. We had some interesting feedback to factor into the project.

<img class="size-full wp-image-1789 aligncenter" src="https://anotherlookontech.files.wordpress.com/2017/10/image-uploaded-from-ios.jpg" alt="Image uploaded from iOS" width="3264" height="2448" />

<h2>Final Thoughts</h2>

Personally, it was a great experience. 7 months ago I arrived at Coolblue (and to The Netherlands), and it was an opportunity to know my colleagues outside of my bubble. I had interesting chats, and today I know a little bit better other business domains.

Regarding the project, I liked to be hacked and be part of the experiment of applying the Pomodoro technique at a team level. It was an interesting experience in how a team can be in sync in a hectic environment as an hackathon. We keep our eyes on the ball, adjusting the work and at the same time having fun. Thanks, team! :)

To close this post, here is the video from the hackathon:

https://youtu.be/2QBmy1AmGvA]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>1667</wp:post_id>
  <wp:post_date>2017-10-22 12:01:53</wp:post_date>
  <wp:post_date_gmt>2017-10-22 10:01:53</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>my-first-coolblue-hackathon-how-to-be-hacked</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="code-development"><![CDATA[Code Development]]></category>
  <category domain="post_tag" nicename="hackathon"><![CDATA[Hackathon]]></category>
  <wp:postmeta>
    <wp:meta_key>_wpcom_is_markdown</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_google_plus_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://plus.google.com/105879670784970671735/posts/AJsGSdoA1xX]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_published</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_client_id</wp:meta_key>
    <wp:meta_value><![CDATA[-1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[10599193547]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_15567246</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_15420870</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:1:{s:7:"twitter";a:1:{i:15487188;s:56:"https://twitter.com/joaoasrosa/status/922040353733177344";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_15638091</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_15487188</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[joaoasrosa]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_linkedin_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://www.linkedin.com/updates?discuss=&scope=27794317&stype=M&topic=6327806050770653184&type=U&a=PRUo]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_15638097</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_15487191</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>IMG_20171010_115856.jpg</title>
  <link>http://joaorosa.io/img_20171010_115856/</link>
  <pubDate>Sun, 22 Oct 2017 08:38:25 +0000</pubDate>
  <dc:creator>joaoasrosa</dc:creator>
  <guid isPermaLink="false">http://anotherlookontech.files.wordpress.com/2017/10/img_20171010_115856.jpg</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>1722</wp:post_id>
  <wp:post_date>2017-10-22 10:38:25</wp:post_date>
  <wp:post_date_gmt>2017-10-22 08:38:25</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>img_20171010_115856</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://anotherlookontech.files.wordpress.com/2017/10/img_20171010_115856.jpg</wp:attachment_url>
</item>
<item>
  <title>IMG_20171010_135327.jpg</title>
  <link>http://joaorosa.io/img_20171010_135327/</link>
  <pubDate>Sun, 22 Oct 2017 08:38:42 +0000</pubDate>
  <dc:creator>joaoasrosa</dc:creator>
  <guid isPermaLink="false">http://anotherlookontech.files.wordpress.com/2017/10/img_20171010_135327.jpg</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>1723</wp:post_id>
  <wp:post_date>2017-10-22 10:38:42</wp:post_date>
  <wp:post_date_gmt>2017-10-22 08:38:42</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>img_20171010_135327</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://anotherlookontech.files.wordpress.com/2017/10/img_20171010_135327.jpg</wp:attachment_url>
</item>
<item>
  <title>IMG_20171010_135354.jpg</title>
  <link>http://joaorosa.io/img_20171010_135354/</link>
  <pubDate>Sun, 22 Oct 2017 08:39:01 +0000</pubDate>
  <dc:creator>joaoasrosa</dc:creator>
  <guid isPermaLink="false">http://anotherlookontech.files.wordpress.com/2017/10/img_20171010_135354.jpg</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>1724</wp:post_id>
  <wp:post_date>2017-10-22 10:39:01</wp:post_date>
  <wp:post_date_gmt>2017-10-22 08:39:01</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>img_20171010_135354</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://anotherlookontech.files.wordpress.com/2017/10/img_20171010_135354.jpg</wp:attachment_url>
</item>
<item>
  <title>IMG_20171010_183555.jpg</title>
  <link>http://joaorosa.io/img_20171010_183555/</link>
  <pubDate>Sun, 22 Oct 2017 08:39:12 +0000</pubDate>
  <dc:creator>joaoasrosa</dc:creator>
  <guid isPermaLink="false">http://anotherlookontech.files.wordpress.com/2017/10/img_20171010_183555.jpg</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>1725</wp:post_id>
  <wp:post_date>2017-10-22 10:39:12</wp:post_date>
  <wp:post_date_gmt>2017-10-22 08:39:12</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>img_20171010_183555</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://anotherlookontech.files.wordpress.com/2017/10/img_20171010_183555.jpg</wp:attachment_url>
</item>
<item>
  <title>IMG_20171010_232703.jpg</title>
  <link>http://joaorosa.io/img_20171010_232703/</link>
  <pubDate>Sun, 22 Oct 2017 08:39:25 +0000</pubDate>
  <dc:creator>joaoasrosa</dc:creator>
  <guid isPermaLink="false">http://anotherlookontech.files.wordpress.com/2017/10/img_20171010_232703.jpg</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>1726</wp:post_id>
  <wp:post_date>2017-10-22 10:39:25</wp:post_date>
  <wp:post_date_gmt>2017-10-22 08:39:25</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>img_20171010_232703</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://anotherlookontech.files.wordpress.com/2017/10/img_20171010_232703.jpg</wp:attachment_url>
</item>
<item>
  <title>IMG_20171011_095248.jpg</title>
  <link>http://joaorosa.io/img_20171011_095248/</link>
  <pubDate>Sun, 22 Oct 2017 08:39:56 +0000</pubDate>
  <dc:creator>joaoasrosa</dc:creator>
  <guid isPermaLink="false">http://anotherlookontech.files.wordpress.com/2017/10/img_20171011_095248.jpg</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>1727</wp:post_id>
  <wp:post_date>2017-10-22 10:39:56</wp:post_date>
  <wp:post_date_gmt>2017-10-22 08:39:56</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>img_20171011_095248</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://anotherlookontech.files.wordpress.com/2017/10/img_20171011_095248.jpg</wp:attachment_url>
</item>
<item>
  <title>IMG_20171011_182037.jpg</title>
  <link>http://joaorosa.io/img_20171011_182037/</link>
  <pubDate>Sun, 22 Oct 2017 08:40:12 +0000</pubDate>
  <dc:creator>joaoasrosa</dc:creator>
  <guid isPermaLink="false">http://anotherlookontech.files.wordpress.com/2017/10/img_20171011_182037.jpg</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>1728</wp:post_id>
  <wp:post_date>2017-10-22 10:40:12</wp:post_date>
  <wp:post_date_gmt>2017-10-22 08:40:12</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>img_20171011_182037</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://anotherlookontech.files.wordpress.com/2017/10/img_20171011_182037.jpg</wp:attachment_url>
</item>
<item>
  <title>IMG_20171011_190135.jpg</title>
  <link>http://joaorosa.io/img_20171011_190135/</link>
  <pubDate>Sun, 22 Oct 2017 08:40:38 +0000</pubDate>
  <dc:creator>joaoasrosa</dc:creator>
  <guid isPermaLink="false">http://anotherlookontech.files.wordpress.com/2017/10/img_20171011_190135.jpg</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>1729</wp:post_id>
  <wp:post_date>2017-10-22 10:40:38</wp:post_date>
  <wp:post_date_gmt>2017-10-22 08:40:38</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>img_20171011_190135</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://anotherlookontech.files.wordpress.com/2017/10/img_20171011_190135.jpg</wp:attachment_url>
</item>
<item>
  <title>IMG_20171011_184443.jpg</title>
  <link>http://joaorosa.io/img_20171011_184443/</link>
  <pubDate>Sun, 22 Oct 2017 08:41:02 +0000</pubDate>
  <dc:creator>joaoasrosa</dc:creator>
  <guid isPermaLink="false">http://anotherlookontech.files.wordpress.com/2017/10/img_20171011_184443.jpg</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>1730</wp:post_id>
  <wp:post_date>2017-10-22 10:41:02</wp:post_date>
  <wp:post_date_gmt>2017-10-22 08:41:02</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>img_20171011_184443</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://anotherlookontech.files.wordpress.com/2017/10/img_20171011_184443.jpg</wp:attachment_url>
</item>
<item>
  <title>IMG_20171011_171048-1.jpg</title>
  <link>http://joaorosa.io/img_20171011_171048-1/</link>
  <pubDate>Sun, 22 Oct 2017 09:38:14 +0000</pubDate>
  <dc:creator>joaoasrosa</dc:creator>
  <guid isPermaLink="false">http://anotherlookontech.files.wordpress.com/2017/10/img_20171011_171048-1.jpg</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>1772</wp:post_id>
  <wp:post_date>2017-10-22 11:38:14</wp:post_date>
  <wp:post_date_gmt>2017-10-22 09:38:14</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>img_20171011_171048-1</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://anotherlookontech.files.wordpress.com/2017/10/img_20171011_171048-1.jpg</wp:attachment_url>
</item>
<item>
  <title>Image uploaded from iOS</title>
  <link>http://joaorosa.io/2017/10/22/my-first-coolblue-hackathon-how-to-be-hacked/image-uploaded-from-ios/</link>
  <pubDate>Sun, 22 Oct 2017 09:47:42 +0000</pubDate>
  <dc:creator>joaoasrosa</dc:creator>
  <guid isPermaLink="false">http://anotherlookontech.files.wordpress.com/2017/10/image-uploaded-from-ios.jpg</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>1789</wp:post_id>
  <wp:post_date>2017-10-22 11:47:42</wp:post_date>
  <wp:post_date_gmt>2017-10-22 09:47:42</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>image-uploaded-from-ios</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>1667</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://anotherlookontech.files.wordpress.com/2017/10/image-uploaded-from-ios.jpg</wp:attachment_url>
</item>
<item>
  <title>TechDays NL 2017</title>
  <link>http://joaorosa.io/2017/12/09/techdays-nl-2017/</link>
  <pubDate>Sat, 09 Dec 2017 14:45:54 +0000</pubDate>
  <dc:creator>joaoasrosa</dc:creator>
  <guid isPermaLink="false">https://anotherlookontech.wordpress.com/?p=1812</guid>
  <description/>
  <content:encoded><![CDATA[The first conference that I attend since we arrived in The Netherlands was the <a href="https://www.techdays.nl">TechDays NL </a>2017. The conference is sponsored by Microsoft, and it's one of the most significant tech events in the Benelux area. However, even being sponsored by Microsoft, other streams of the industry were present, showing that Microsoft is no longer "the evil".

<h2>Location &amp; Facilities</h2>

The conference was hosted by RAI Amsterdam, on the south of Amsterdam. The convention center is connected to all the main public transports (train, metro, and bus), and primary roads and highways. The facilities also have a private parking lot, but it's The Netherlands, where the bicycles are the preferred transport.

The conference offered all the necessary amenities, with the exhibitors, food court, and rooms in a layout where was possible to discuss, eat or relax without the feeling of a full place. The most significant difference between the conferences in Ireland was the food was free. And we had a good range, from hamburgers to sushi. But the piece de la resistance was the famous Portuguese tart, Pastel de Nata.

<img class="size-full wp-image-1814 aligncenter" src="https://anotherlookontech.files.wordpress.com/2017/12/img_20171013_081630.jpg" alt="IMG_20171013_081630.jpg" width="3456" height="4608" />

<h2>Talks</h2>

TechDays had a good range of speakers, since known names of the global community to some familiar faces in the Benelux region. The talks were distributed between the main stage to smaller rooms, and there were around 5 parallel talks at a given time.

<h2>Trends</h2>

The trend in this conference was CI/CD. Part of the VSTS team was present, but we had a fair share of Benelux speakers delivering talks on the topic. It could range from technology to solve a particular problem to lessons learned during the transformation of delivering pipeline. The key takeaway is to automate as much as possible to achieve the goals. However, we should measure every step during the process to make informed decisions. It is essential to set up a baseline before introducing new tools/processes into our software development practices.

Another growing trend was security. We had several speakers delivering talks, and it ranged from social hacking to improvements in our .NET code bases.

&nbsp;]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>1812</wp:post_id>
  <wp:post_date>2017-12-09 15:45:54</wp:post_date>
  <wp:post_date_gmt>2017-12-09 14:45:54</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>techdays-nl-2017</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="net"><![CDATA[.NET]]></category>
  <category domain="post_tag" nicename="net-core"><![CDATA[.NET Core]]></category>
  <category domain="post_tag" nicename="applications"><![CDATA[Applications]]></category>
  <category domain="category" nicename="conferences"><![CDATA[Conferences]]></category>
  <category domain="post_tag" nicename="continuous-improvement"><![CDATA[Continuous Improvement]]></category>
  <category domain="post_tag" nicename="deployment"><![CDATA[Deployment]]></category>
  <category domain="post_tag" nicename="docker"><![CDATA[Docker]]></category>
  <category domain="post_tag" nicename="github"><![CDATA[GitHub]]></category>
  <category domain="post_tag" nicename="jetbrains"><![CDATA[JetBrains]]></category>
  <category domain="post_tag" nicename="linux"><![CDATA[Linux]]></category>
  <category domain="post_tag" nicename="nuget"><![CDATA[NuGet]]></category>
  <category domain="post_tag" nicename="powershell"><![CDATA[PowerShell]]></category>
  <category domain="post_tag" nicename="testing"><![CDATA[Testing]]></category>
  <category domain="post_tag" nicename="visual-studio"><![CDATA[Visual Studio]]></category>
  <category domain="post_tag" nicename="windows"><![CDATA[Windows]]></category>
  <wp:postmeta>
    <wp:meta_key>_wpcom_is_markdown</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_published</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_client_id</wp:meta_key>
    <wp:meta_value><![CDATA[-1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[12323725810]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_google_plus_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://plus.google.com/105879670784970671735/posts/ECszHTHXkWe]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_15567246</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_15420870</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:1:{s:7:"twitter";a:1:{i:15487188;s:56:"https://twitter.com/joaoasrosa/status/939506464938479617";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_15638091</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_15487188</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[joaoasrosa]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_linkedin_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://www.linkedin.com/updates?discuss=&scope=27794317&stype=M&topic=6345272160562479104&type=U&a=uNmn]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_15638097</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_15487191</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>IMG_20171013_081630.jpg</title>
  <link>http://joaorosa.io/img_20171013_081630/</link>
  <pubDate>Sat, 09 Dec 2017 14:35:13 +0000</pubDate>
  <dc:creator>joaoasrosa</dc:creator>
  <guid isPermaLink="false">http://anotherlookontech.files.wordpress.com/2017/12/img_20171013_081630.jpg</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>1814</wp:post_id>
  <wp:post_date>2017-12-09 15:35:13</wp:post_date>
  <wp:post_date_gmt>2017-12-09 14:35:13</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>img_20171013_081630</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://anotherlookontech.files.wordpress.com/2017/12/img_20171013_081630.jpg</wp:attachment_url>
</item>
<item>
  <title>When Cake meets NDepend</title>
  <link>http://joaorosa.io/2017/12/31/when-cake-meets-ndepend/</link>
  <pubDate>Sun, 31 Dec 2017 17:36:27 +0000</pubDate>
  <dc:creator>joaoasrosa</dc:creator>
  <guid isPermaLink="false">https://anotherlookontech.wordpress.com/?p=1830</guid>
  <description/>
  <content:encoded><![CDATA[As a developer, I'm a big fan of automation. I can't create software where I need to push buttons and run manual scripts, to test &amp; deploy it. To help me automate my software development tasks, I use <a href="https://anotherlookontech.wordpress.com/2017/10/18/abstract-from-your-ci-use-cake/" rel="noopener">Cake</a>, "a cross platform build automation system with a C# DSL".

Working as a team, there are specificÂ tasks to be carried, such as code reviews. A code review canÂ be focused on architectural principles, naming conventions, test coverage, among others. To aid the code reviews, static code analyzers can be used, helping with the code analysis. Personally, I prefer <a href="https://anotherlookontech.wordpress.com/2017/10/01/ndepend-first-impressions-on-a-static-code-analyser/">NDepend</a>, because of the wide range of reports and insights about the codebase.

<h2>Joining the best of both worlds</h2>

After a bit of research, I couldn't find a Cake Addin that interfaces NDepend. Given Cake is Open Source Software, why not create one?

<img class="size-full wp-image-1831 aligncenter" src="https://anotherlookontech.files.wordpress.com/2017/12/this-is-open-source.jpg" alt="This-is-open-source" width="400" height="300" />

From this thought was created the <a href="https://github.com/joaoasrosa/cake-ndepend">Cake NDepend Addin</a>. It is a regular Cake Addin based on NDepend Console. Although NDepend offers integration with the major CI servers, the usage of Cake allows a layer of abstraction, avoiding the "works on my machine" principle. :)

<h2>A live example</h2>

<a href="https://en.wikipedia.org/wiki/Eating_your_own_dog_food">Eat your own dog food</a>. That's it, the Cake NDepend Addin uses itself to create a build artifact in each commit to GitHub. Inception?

<img class="size-full wp-image-1832 aligncenter" src="https://anotherlookontech.files.wordpress.com/2017/12/inception.jpg" alt="inception" width="620" height="258" />

I want to report on every commit to my git repo. AppVeyor is instrumented to configure NDepend (the way to configure external software on each CI server is different) and uses the Cake NDepend Addin through the Cake script,Â producing the reports as artifacts. You can inspect an example <a href="https://ci.appveyor.com/project/joaoasrosa/cake-ndepend/build/artifacts">here</a>.

After download and uncompress the reports artifacts, it is something similar to this:

<img class="size-full wp-image-1833 aligncenter" src="https://anotherlookontech.files.wordpress.com/2017/12/screen-shot-2017-12-31-at-17-45-02.png" alt="Screen Shot 2017-12-31 at 17.45.02" width="2002" height="1230" />

<h2>The Holy Graal</h2>

The Holy Graal would be the integration of the report's metrics with a Pull Request. It would give visibility to the reviewers about the code quality trends, enabling the developers to be proactive to maintain the quality standards, rather than reactive.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>1830</wp:post_id>
  <wp:post_date>2017-12-31 18:36:27</wp:post_date>
  <wp:post_date_gmt>2017-12-31 17:36:27</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>when-cake-meets-ndepend</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="net"><![CDATA[.NET]]></category>
  <category domain="post_tag" nicename="agile"><![CDATA[Agile]]></category>
  <category domain="post_tag" nicename="applications"><![CDATA[Applications]]></category>
  <category domain="post_tag" nicename="cake"><![CDATA[Cake]]></category>
  <category domain="category" nicename="code-development"><![CDATA[Code Development]]></category>
  <category domain="post_tag" nicename="continuous-improvement"><![CDATA[Continuous Improvement]]></category>
  <category domain="category" nicename="continuous-integration"><![CDATA[Continuous Integration]]></category>
  <category domain="post_tag" nicename="deployment"><![CDATA[Deployment]]></category>
  <category domain="post_tag" nicename="linux"><![CDATA[Linux]]></category>
  <category domain="post_tag" nicename="ndepend"><![CDATA[NDepend]]></category>
  <category domain="category" nicename="oss"><![CDATA[OSS]]></category>
  <category domain="post_tag" nicename="windows"><![CDATA[Windows]]></category>
  <wp:postmeta>
    <wp:meta_key>_wpcom_is_markdown</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_15487188</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_published</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_client_id</wp:meta_key>
    <wp:meta_value><![CDATA[-1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[13069378625]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_google_plus_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://plus.google.com/105879670784970671735/posts/fDHYkxdSRqw]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_15567246</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_15420870</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_linkedin_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://www.linkedin.com/updates?discuss=&scope=27794317&stype=M&topic=6353287575322521601&type=U&a=Hc-y]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_15638097</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_15487191</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>197</wp:comment_id>
    <wp:comment_author><![CDATA[Gerard Patrick Hayden]]></wp:comment_author>
    <wp:comment_author_email>gph2000@gmail.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>78.16.251.234</wp:comment_author_IP>
    <wp:comment_date>2017-12-31 22:16:56</wp:comment_date>
    <wp:comment_date_gmt>2017-12-31 21:16:56</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Happy new year Joao]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:2:{s:4:"time";d:1514755016.45965290069580078125;s:5:"event";s:9:"check-ham";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_notqueued</wp:meta_key>
      <wp:meta_value>1514755029</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1514755029</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:3:{s:4:"time";d:1514755030.5581510066986083984375;s:5:"event";s:15:"status-approved";s:4:"user";s:10:"joaoasrosa";}</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title>This-is-open-source</title>
  <link>http://joaorosa.io/2017/12/31/when-cake-meets-ndepend/this-is-open-source/</link>
  <pubDate>Sun, 31 Dec 2017 14:25:27 +0000</pubDate>
  <dc:creator>joaoasrosa</dc:creator>
  <guid isPermaLink="false">http://anotherlookontech.files.wordpress.com/2017/12/this-is-open-source.jpg</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>1831</wp:post_id>
  <wp:post_date>2017-12-31 15:25:27</wp:post_date>
  <wp:post_date_gmt>2017-12-31 14:25:27</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>this-is-open-source</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>1830</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://anotherlookontech.files.wordpress.com/2017/12/this-is-open-source.jpg</wp:attachment_url>
</item>
<item>
  <title>inception</title>
  <link>http://joaorosa.io/2017/12/31/when-cake-meets-ndepend/inception/</link>
  <pubDate>Sun, 31 Dec 2017 16:41:05 +0000</pubDate>
  <dc:creator>joaoasrosa</dc:creator>
  <guid isPermaLink="false">http://anotherlookontech.files.wordpress.com/2017/12/inception.jpg</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>1832</wp:post_id>
  <wp:post_date>2017-12-31 17:41:05</wp:post_date>
  <wp:post_date_gmt>2017-12-31 16:41:05</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>inception</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>1830</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://anotherlookontech.files.wordpress.com/2017/12/inception.jpg</wp:attachment_url>
</item>
<item>
  <title>Screen Shot 2017-12-31 at 17.45.02</title>
  <link>http://joaorosa.io/2017/12/31/when-cake-meets-ndepend/screen-shot-2017-12-31-at-17-45-02/</link>
  <pubDate>Sun, 31 Dec 2017 16:45:40 +0000</pubDate>
  <dc:creator>joaoasrosa</dc:creator>
  <guid isPermaLink="false">http://anotherlookontech.files.wordpress.com/2017/12/screen-shot-2017-12-31-at-17-45-02.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>1833</wp:post_id>
  <wp:post_date>2017-12-31 17:45:40</wp:post_date>
  <wp:post_date_gmt>2017-12-31 16:45:40</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>screen-shot-2017-12-31-at-17-45-02</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>1830</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://anotherlookontech.files.wordpress.com/2017/12/screen-shot-2017-12-31-at-17-45-02.png</wp:attachment_url>
</item>
<item>
  <title>Migrate Magento from on-premises to the cloud</title>
  <link>http://joaorosa.io/2018/01/14/migrate-magento-from-on-premises-to-the-cloud/</link>
  <pubDate>Sun, 14 Jan 2018 18:56:42 +0000</pubDate>
  <dc:creator>joaoasrosa</dc:creator>
  <guid isPermaLink="false">https://anotherlookontech.wordpress.com/?p=1844</guid>
  <description/>
  <content:encoded><![CDATA[Last summer a good friend of mine challenged me to help him move his Magento webshop from an on-premises server to the cloud. Also, to upgrade the webshop to the newest version (Magento 2).

<h2>The starting point</h2>

The webshop is the online spot for a small streetwear Portuguese shop. The crew supporting the shop is 3 persons, and the online channel is extremely important to the growth.

<h2>Select a cloud provider</h2>

[caption id="attachment_1845" align="alignnone" width="768"]<img src="https://anotherlookontech.files.wordpress.com/2018/01/gettyimages-482252-001-570a81d93df78c7d9edc0d78.jpg" class="alignnone wp-image-1845 size-full" height="511" alt="Clouds. Clouds everywhere!" width="768"> Ryan Beyer | The Image Bank | Getty Images[/caption]

The cloud provider offer is huge. We've put some effort into the investigation of the right cloud provider for us. The key points are:

<ul>
    <li>Maturity. We need a mature cloud platform, and at this moment there are a few providers ticking this box</li>
    <li>The range of services. The plan is to grow, and with that, we need a cloud provider with a variety of services that will allow the platform expansion</li>
    <li>Quality of service. Given today we are used to the Google speed, and Apple minimalisticÂ design, everyone expects the same level of service. We need a cloud provider with a proven record regarding the quality of service,Â allowing us to serve the audience with the quality they deserve</li>
    <li>Price. A good bang for the buck, providing Return on Investment quickly</li>
    <li>Community. Today we are interconnected, and we tend to share our ideas and engage in discussions. We need a cloud provider with an engaged community, whereby we can Q&amp;A our ideas</li>
</ul>

We chose AWS, since it ticks all the boxes, having a good offer for the price tag. The community support is excellent, and we can find useful open source resources from the AWS folks (one of them is described in the next section).

Also, AWS offers a range of services that allow the webshop to grow sustainably. An example is the AWS Simple Email Service (SES), where it can be used as e-mail service to support the marketing campaigns.

<h2>Create a playground</h2>

[caption id="attachment_1847" align="alignnone" width="940"]<img src="https://anotherlookontech.files.wordpress.com/2018/01/5612_product_detail.jpeg" class="alignnone size-full wp-image-1847" height="658" alt="Create a playground" width="940"> Playmobil Playground[/caption]

In order to do a smooth migration, we've created a playground in AWS. We used the <a href="https://docs.aws.amazon.com/quickstart/latest/magento/welcome.html">Magento 2 Quick Start</a>Â provided by AWS, to build the Magento 2 infrastructure. It allowsÂ us to reduce the time to market, and we were able to focus on the webshop content, rather than the infrastructure.

In our playground, we tested all the variations, namely themes, modules, and integrations. To name a few:

<ul>
    <li>Composer. It is the PHP package manager, and most of the Magento 2 modules are distributed using it</li>
    <li>Theme. We tested several themes, testing the variations in all the devices</li>
    <li>Performance. We developed our own performance test suite. Given the data from the on-premises usage, we extrapolate the data tenfold and execute the performance tests to discover the resources needed to operate the webshop</li>
</ul>

<h2>Migration Plan</h2>

<img src="https://anotherlookontech.files.wordpress.com/2018/01/0hsfnsw.jpg" class="wp-image-1848 size-full" height="369" alt="Testing code in Production!" width="555">

We created a migration plan, to mitigate potential issues when we triggered the migration. We planned to do a hot migration, e. g., put the old webshop in read-only mode until all traffic is redirected to the new webshop.

To develop this migration plan we read the <a href="http://devdocs.magento.com/guides/v2.0/migration/migration-plan.html">official documentation</a>, where Magento states the steps to migrate a webshop. Our migration plan was based on the official documentation, adding the possibility to recover the old webshop from backups, minimizing the data loss. We did the dry run 3 times before the final move, testing the backup recovering strategy. We wanted to be sure that we covered all the bases, and we were able to recover from backups.

<h2>Lessons learned</h2>

[caption id="attachment_1849" align="alignnone" width="760"]<img src="https://anotherlookontech.files.wordpress.com/2018/01/adobestock_87364193-760x507.jpeg" class="alignnone size-full wp-image-1849" height="507" alt="Phil McKinney Blog" width="760"> cycle to reach success: try, fail, try again, success[/caption]

From the migration we learned a few good lessons:

<ul>
    <li>Create a playground. It is essential to test the webshop in a safe environment. We tested the UI, backup strategy, migration amongst others</li>
    <li>Contribute to the Open Source Community. We used the Magento 2 Quick Start offered by AWS. It is available on <a href="https://github.com/aws-quickstart/quickstart-magento">GitHub</a>, and we made small contributions based on the tweaks that we did in our playground area</li>
    <li>Test, test &amp; test! We tested as much as we could, ranging from the UI, the UX, the modules to the performance. We based our testing targets on assumptions, but the assumptions were generated from data collected over the years</li>
    <li>Create the migration plan. The Magento documentation is in a good shape and provides a solid direction. We used it to our migration plan</li>
    <li>Rehearsal the migration. To mitigate the risks we rehearsal the migration several times, learning the pitfalls and potential issues after the data is migrated to the new platform</li>
    <li>Have a backup plan. We had a plan B if the migration failed. We were able to revert to the old webshop if we needed to, having the capability to inspect and analyze the problem with the migration</li>
</ul>

This was the start of our journey. In the upcoming weeks we will post more implementation details, such as monitoring &amp; logging, security measures, build &amp; deployment pipelines, amongst others.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>1844</wp:post_id>
  <wp:post_date>2018-01-14 19:56:42</wp:post_date>
  <wp:post_date_gmt>2018-01-14 18:56:42</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>migrate-magento-from-on-premises-to-the-cloud</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="aws"><![CDATA[AWS]]></category>
  <category domain="category" nicename="cloud-computing"><![CDATA[Cloud Computing]]></category>
  <category domain="post_tag" nicename="magento"><![CDATA[Magento]]></category>
  <category domain="post_tag" nicename="magento2"><![CDATA[Magento2]]></category>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[13594271913]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_client_id</wp:meta_key>
    <wp:meta_value><![CDATA[-1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_published</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>timeline_notification</wp:meta_key>
    <wp:meta_value><![CDATA[1515956206]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_google_plus_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://plus.google.com/105879670784970671735/posts/R29dWKBD4Dq]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:1:{s:7:"twitter";a:1:{i:15487188;s:56:"https://twitter.com/joaoasrosa/status/952615509987680256";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpcom_is_markdown</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_15567246</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_15420870</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_15638091</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_15487188</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[joaoasrosa]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_linkedin_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://www.linkedin.com/updates?discuss=&scope=27794317&stype=M&topic=6358381204122714112&type=U&a=XIJz]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_15638097</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_15487191</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>258</wp:comment_id>
    <wp:comment_author><![CDATA[How to solve Magento 2 upgrade errors &#8211; Another look on tech]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>https://anotherlookontech.wordpress.com/2018/03/11/how-to-solve-magento-2-upgrade-errors/</wp:comment_author_url>
    <wp:comment_author_IP>192.0.89.50</wp:comment_author_IP>
    <wp:comment_date>2018-03-11 12:54:23</wp:comment_date>
    <wp:comment_date_gmt>2018-03-11 11:54:23</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[â¦] environment is deployed in AWS, using an immutable infrastructure. It allowsÂ us to deployÂ several development/testing [â¦]]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1520769306</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:3:{s:4:"time";d:1520769306.2722759246826171875;s:5:"event";s:15:"status-approved";s:4:"user";s:10:"joaoasrosa";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:2:{s:4:"time";d:1520769263.444262027740478515625;s:5:"event";s:9:"check-ham";}</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title>Selecting a cloud provider</title>
  <link>http://joaorosa.io/2018/01/14/migrate-magento-from-on-premises-to-the-cloud/gettyimages-482252-001-570a81d93df78c7d9edc0d78/</link>
  <pubDate>Sun, 14 Jan 2018 11:52:23 +0000</pubDate>
  <dc:creator>joaoasrosa</dc:creator>
  <guid isPermaLink="false">http://anotherlookontech.files.wordpress.com/2018/01/gettyimages-482252-001-570a81d93df78c7d9edc0d78.jpg</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[Ryan Beyer | The Image Bank | Getty Images]]></excerpt:encoded>
  <wp:post_id>1845</wp:post_id>
  <wp:post_date>2018-01-14 12:52:23</wp:post_date>
  <wp:post_date_gmt>2018-01-14 11:52:23</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>gettyimages-482252-001-570a81d93df78c7d9edc0d78</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>1844</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://anotherlookontech.files.wordpress.com/2018/01/gettyimages-482252-001-570a81d93df78c7d9edc0d78.jpg</wp:attachment_url>
  <wp:postmeta>
    <wp:meta_key>_wp_attachment_image_alt</wp:meta_key>
    <wp:meta_value><![CDATA[Clouds. Clouds everywhere!]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Create a playground</title>
  <link>http://joaorosa.io/2018/01/14/migrate-magento-from-on-premises-to-the-cloud/5612_product_detail/</link>
  <pubDate>Sun, 14 Jan 2018 17:56:08 +0000</pubDate>
  <dc:creator>joaoasrosa</dc:creator>
  <guid isPermaLink="false">http://anotherlookontech.files.wordpress.com/2018/01/5612_product_detail.jpeg</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[Playmobil Playground]]></excerpt:encoded>
  <wp:post_id>1847</wp:post_id>
  <wp:post_date>2018-01-14 18:56:08</wp:post_date>
  <wp:post_date_gmt>2018-01-14 17:56:08</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>5612_product_detail</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>1844</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://anotherlookontech.files.wordpress.com/2018/01/5612_product_detail.jpeg</wp:attachment_url>
</item>
<item>
  <title>Testing code in Production!</title>
  <link>http://joaorosa.io/2018/01/14/migrate-magento-from-on-premises-to-the-cloud/0hsfnsw/</link>
  <pubDate>Sun, 14 Jan 2018 17:58:22 +0000</pubDate>
  <dc:creator>joaoasrosa</dc:creator>
  <guid isPermaLink="false">http://anotherlookontech.files.wordpress.com/2018/01/0hsfnsw.jpg</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>1848</wp:post_id>
  <wp:post_date>2018-01-14 18:58:22</wp:post_date>
  <wp:post_date_gmt>2018-01-14 17:58:22</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>0hsfnsw</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>1844</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://anotherlookontech.files.wordpress.com/2018/01/0hsfnsw.jpg</wp:attachment_url>
</item>
<item>
  <title>try, fail, repeat, success</title>
  <link>http://joaorosa.io/2018/01/14/migrate-magento-from-on-premises-to-the-cloud/try-fail-repeat-success/</link>
  <pubDate>Sun, 14 Jan 2018 17:59:51 +0000</pubDate>
  <dc:creator>joaoasrosa</dc:creator>
  <guid isPermaLink="false">http://anotherlookontech.files.wordpress.com/2018/01/adobestock_87364193-760x507.jpeg</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[cycle to reach success: try, fail, try again, success]]></excerpt:encoded>
  <wp:post_id>1849</wp:post_id>
  <wp:post_date>2018-01-14 18:59:51</wp:post_date>
  <wp:post_date_gmt>2018-01-14 17:59:51</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>try-fail-repeat-success</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>1844</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://anotherlookontech.files.wordpress.com/2018/01/adobestock_87364193-760x507.jpeg</wp:attachment_url>
  <wp:postmeta>
    <wp:meta_key>_wp_attachment_image_alt</wp:meta_key>
    <wp:meta_value><![CDATA[Phil McKinney Blog]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Learning DDD as a team</title>
  <link>http://joaorosa.io/2017/12/10/learning-ddd-as-a-team/</link>
  <pubDate>Sun, 10 Dec 2017 21:04:09 +0000</pubDate>
  <dc:creator>joaoasrosa</dc:creator>
  <guid isPermaLink="false">https://anotherlookontech.wordpress.com/?p=1852</guid>
  <description/>
  <content:encoded><![CDATA[A few sprints ago my team and I decided to invest heavily in Domain Driven Desing. We already started to develop the new microservices in a DDD fashion, with our domain as the central component. However, we wanted to formalize it and move the old microservices to this new paradigm.

During this period we used several tools and techniques, to aid us toÂ figure out what was the best approach for us. And we are Agile;Â <em><strong>probe, experiment and evaluate</strong></em>. If it doesnâtÂ work, learn from it and move on!

<h2>Activities as a development team</h2>

<h3>Whiteboard sessions</h3>

As a developer, one of the best tools is a pen and paper. As a development team, nothing better than a whiteboard and markers. Before or during the development of a component we gather the team around our whiteboard, and we scatch potential solutions for the problems in hand. It helped the team to focus, and reach a common understanding, making theÂ software implementation easier.

<h3>Coffee &amp; lunch breaks</h3>

We have around 150 software developers, itâs common to take a coffee or have lunch together. Most of the times, during our chats, it drifts to the problems that we are facing. Itâs a great informal platform to share our ideas, struggles, and solutions for the problems. AsÂ <a href="https://twitter.com/thesqlguru">Kevin Boles</a>Â onceÂ <a href="https://www.google.nl/url?sa=t&amp;rct=j&amp;q=&amp;esrc=s&amp;source=web&amp;cd=4&amp;ved=0ahUKEwiH_62F8v_XAhVRIewKHZk9Cb4QFgg5MAM&amp;url=http%3A%2F%2Fwww.pass.org%2FDownloadFile.aspx%3FFile%3D76767a5e&amp;usg=AOvVaw1sgE1vPjWc_tr5BVetjiYB">wrote</a>: âSmart people learn from their mistakes. Wise peoples learn from other people mistakesâ.

<h3>Craftsmanship sessions</h3>

Here at Coolblue, we host privateÂ craftsmanship sessions. During the meetings, we have the opportunity to work on a particular problem, sharing our thoughts and discussÂ possible solutions. Itâs more formalizedÂ than the coffee &amp; lunch breaks.

<h3>Event Storming sessions</h3>

Another activity used by our team is Event Storming sessions. We use this activity to help us to match the new business requirements and all the technical debt that we need to catch. This is an opportunity to optimize the work to be carried, minimizing the creative tension between the developers and the business. It also raises the business awareness for software risks, since our domain has goals to help the company grown; to achieve the goals, we need to minimize the risks or acknowledgeÂ them. Transparency is the keyword!

<h2>Lessons Learned</h2>

<h3>Language definition</h3>

One of the challenges is to set the correct language, terms, and definitions. Although we are developing software, we are doing it to achieve a business goal, and given that, the software should be read like a book. Also, the software naming should match the business terms, makingÂ everyone lives easier. Please raise the hand, who never found variables names thatÂ <strong><em>donât</em></strong>Â match the business terms?

Itâs paramount for the development team to speak the same domain language; it will pay the dividends in the future once, for instance, a refactor is needed, or even when the software goes into maintenance mode.

<h3>Boundaries</h3>

Any good resource in this space points to the bounded context as the central pattern for the DDD. When we are building software for a new domain, discovering the bounded context is the first challenge that a development team faces.

However, in my experience, in a growing company, the development team needs to be actively looking forÂ <em><strong>changes</strong></em>Â in the bounded context, since the software should serve the business, not in the other way around. This is a massive challenge, not only requires the ability to have useful metrics in place (especially business KPIs) but also to keep asking if the software continues to have the same positive effect within the user base.

<h2>Value to the Business</h2>

<h3>Close the gap between development and business</h3>

Itâs important to keep the development teams as close as possible to the business. Applying DDD techniques, it helps the development team to bring the domain concepts to the center of the software development, closing the gap between the development and the business.

<h3>Use of the same language</h3>

Once the developers start to use the same domain language as the business, it decreases the time in the discussions between the business and development, since it is not needed to translate technical terms to business terms.

<h3>Helps the Product Owner to make informed decisions</h3>

All these activities end with valuable insights to the Product Owner. She/He can prioritize the work, based on the teamâs feedback and the business necessities. It also reduces the creative tension between the developers, trying to improve the speed of the features delivery.

<h2>Value to the Development Team</h2>

<h3>Long-termÂ sustainability</h3>

Software long-term sustainability is essential. In other words, creating and deliver software at a high pace, minimizing the technical debt. During my career, I foundÂ the DDD concepts and techniques more useful to increase the long-term sustainability of the software, since it uses theÂ <em><strong>same domain language</strong></em>Â as the business. It helps the development teams to add new features to an existent component since it matches the business processes.

<h3>Vision and goals</h3>

The activities carried by the development team help to state the vision and goals for the upcoming period. Although its impossible to create a roadmap six-months ahead, due to quick company growth, it empowers the team to help the business to achieve our (domain) goals.

<h3>Removes ambiguity</h3>

Sometimes we (developers) make assumptions that turn out wrong. Even in an Agile environment, whereby the feedback cycle is the centerpiece, and we work in an iterative process, we prefer to get it right since the beginning. Since we start to focus on DDD, I observed, the team began to remove the ambiguity during the software development process, thus increasing theÂ <em><strong>speed and quality</strong></em>Â of the deliveries.

<h3>Clear dependencies &amp; Visibility</h3>

We work in one of the biggest e-commerce companies in the Benelux area, and itâs near impossible for a team toÂ <em><strong>own all the software</strong></em>Â to cover a business process. During this time we started to improve our documentation, focusing on the boundaries of the software that my team is responsible. It created a clear image of the upstream and downstream dependencies. It helped in the discussions with our peers accountable for the upstream dependencies, whereby we presented documentation in the sameÂ (technical) language. Using these artifacts, we are able to discuss the importance of the upstream dependencies, since it raises visibility and awareness for the inter-dependencies between the teams (and software systems).

It also raises the visibilityÂ since we hanged in our glass walls the software diagrams of our system. As a learning opportunity, we choose to document our software using theÂ <a href="https://c4model.com/" rel="noopener">C4 model</a>Â fromÂ <a href="https://twitter.com/simonbrown" rel="noopener">Simon Brown</a>.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>1852</wp:post_id>
  <wp:post_date>2017-12-10 22:04:09</wp:post_date>
  <wp:post_date_gmt>2017-12-10 21:04:09</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>learning-ddd-as-a-team</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="agile"><![CDATA[Agile]]></category>
  <category domain="post_tag" nicename="continuous-improvement"><![CDATA[Continuous Improvement]]></category>
  <category domain="post_tag" nicename="ddd"><![CDATA[DDD]]></category>
  <category domain="category" nicename="domain-driven-design"><![CDATA[Domain Driven Design]]></category>
  <category domain="post_tag" nicename="team"><![CDATA[Team]]></category>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_15487191</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[13639328010]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_15487188</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_15420870</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_published</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_client_id</wp:meta_key>
    <wp:meta_value><![CDATA[-1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>timeline_notification</wp:meta_key>
    <wp:meta_value><![CDATA[1516050341]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpcom_is_markdown</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>How to solve Magento 2 upgrade errors</title>
  <link>http://joaorosa.io/2018/03/11/how-to-solve-magento-2-upgrade-errors/</link>
  <pubDate>Sun, 11 Mar 2018 11:54:21 +0000</pubDate>
  <dc:creator>joaoasrosa</dc:creator>
  <guid isPermaLink="false">https://anotherlookontech.wordpress.com/?p=1854</guid>
  <description/>
  <content:encoded><![CDATA[Magento 2 is the leading Open Source Software for e-commerce, with a vibrant community and proper product documentation.

The development team releases bug fixes and new features in a regular cadence, given support to security threats, market trends, amongst others.

<h2>Environment</h2>

The environment is <a href="https://anotherlookontech.wordpress.com/2018/01/14/migrate-magento-from-on-premises-to-the-cloud/" rel="noopener">deployed in AWS</a>, using an immutable infrastructure. It allowsÂ us to deployÂ several development/testing environments where we can develop the scripts to automate the upgrade process for our CI/CD pipeline. Also, it is our workbench for testing UI changes, new plugins, amongstÂ others.

<h2>Upgrading</h2>

However, trying to upgrade to the latest version (at the moment of writing this post is 2.2.3), using the <a href="http://devdocs.magento.com/guides/v2.2/comp-mgr/cli/cli-upgrade.html" rel="noopener">official documentation</a>, we receive the following error:

[caption id="attachment_1858" align="aligncenter" width="982"]<img class="size-full wp-image-1858 aligncenter" src="https://anotherlookontech.files.wordpress.com/2018/03/magento2_upgrade_004.png" alt="magento2_upgrade_004" width="982" height="618" /> Magento 2 upgrade command - failed to open stream error[/caption]

This is annoying. So far, we had reliableÂ platform upgrades. Using my developer hat, we followed the error. A file was missing in the <code>magento 2 installation path\setup\</code>Â folder.

Doing a quick search with the <code>ls</code> command, we had the folder structure:

[caption id="attachment_1857" align="aligncenter" width="982"]<img class="size-full wp-image-1857 aligncenter" src="https://anotherlookontech.files.wordpress.com/2018/03/magento2_upgrade_003.png" alt="magento2_upgrade_003" width="982" height="674" /> Magento 2 root folder - after the ls command[/caption]

The code never lies. The <code>setup</code>/ folder doesn't exist. It intriguedÂ us, getting us to investigate why the folder wasn't there. We verified:

<ul>
    <li>The <a href="https://github.com/magento/magento2/tree/2.2" rel="noopener">official GitHub repo</a>. The <code>setup/</code> folder exists, and it has content</li>
    <li>Download the official <a href="https://magento.com/tech-resources/download" rel="noopener">Magento 2 Full Release</a>, inspecting the contents. Again, the <code>setup/</code> folder exists, and it has content</li>
    <li>Deploy a new AWS development environment with the current infrastructure, inspecting the folder structure. The <code>setup/</code> folder <strong>exists</strong> in the current installation</li>
</ul>

[caption id="attachment_1855" align="aligncenter" width="980"]<img class="size-full wp-image-1855 aligncenter" src="https://anotherlookontech.files.wordpress.com/2018/03/magento2_upgrade_001.png" alt="magento2_upgrade_001" width="980" height="608" /> Magento 2 root folder - current installation[/caption]

Given the information from our investigation, it seemed to point out to the PHP Composer, which doesn't deploy the <code>setup/</code> folder during the upgrade process. To prove it, we tried to upgrade the environment again, using the same commands:

[caption id="attachment_1856" align="aligncenter" width="976"]<img class="size-full wp-image-1856 aligncenter" src="https://anotherlookontech.files.wordpress.com/2018/03/magento2_upgrade_002.png" alt="magento2_upgrade_002" width="976" height="674" /> Magento 2 composer - update command[/caption]

And we were able to reproduce the initial error. At least it is reproducible and supports our theory. :)

<h2>The (temporary) solution</h2>

Since the PHP Composer package should containÂ (apart from the metadata file) the same files asÂ  the downloadableÂ Magento 2 installation package, we've tried to:

<ul>
    <li>Follow the upgrade steps from the official guide <strong>until step 6</strong> (<em>Update the database schema and data</em>)</li>
    <li>Download the Magento 2 installation package</li>
    <li>Extract the <code>setup/</code> folder to the Magento 2 installation folder</li>
    <li>Resume the Magento 2 upgrade process</li>
</ul>

And voilÃ¡, it finished the Magento 2 upgrade to the version 2.2.3. Happy days, we can do our testing on the new version of the shop, before promoting it to production.

This error had been reported to the Magento development team, however, they can't reproduce it. Nevertheless, we can use this workaround to upgrade our (your) shop.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>1854</wp:post_id>
  <wp:post_date>2018-03-11 12:54:21</wp:post_date>
  <wp:post_date_gmt>2018-03-11 11:54:21</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>how-to-solve-magento-2-upgrade-errors</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="continuous-deployment"><![CDATA[Continuous Deployment]]></category>
  <category domain="category" nicename="continuous-integration"><![CDATA[Continuous Integration]]></category>
  <category domain="post_tag" nicename="linux"><![CDATA[Linux]]></category>
  <category domain="category" nicename="magento-2"><![CDATA[Magento 2]]></category>
  <category domain="post_tag" nicename="magento2"><![CDATA[Magento2]]></category>
  <category domain="category" nicename="oss"><![CDATA[OSS]]></category>
  <wp:postmeta>
    <wp:meta_key>_wpcom_is_markdown</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_published</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_client_id</wp:meta_key>
    <wp:meta_value><![CDATA[-1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[15609200966]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>timeline_notification</wp:meta_key>
    <wp:meta_value><![CDATA[1520769261]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_google_plus_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://plus.google.com/105879670784970671735/posts/8btbv89ZeT7]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_15567246</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_15420870</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:1:{s:7:"twitter";a:1:{i:15487188;s:56:"https://twitter.com/joaoasrosa/status/972802946042867713";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_15638091</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_15487188</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[joaoasrosa]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_linkedin_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://www.linkedin.com/updates?discuss=&scope=27794317&stype=M&topic=6378568641138421760&type=U&a=71My]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_15638097</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_15487191</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_a2fb2f0e69076690c87567fab3364dd7</wp:meta_key>
    <wp:meta_value><![CDATA[<div class="embed-twitter"><blockquote class="twitter-tweet" data-width="500" data-dnt="true"><p lang="en" dir="ltr">If you want to tweet or blog about how serverless actually runs on servers, let me save you some time: Nobody thinks that serverless doesn&#39;t run on servers. Nobody. You&#39;re just taking cheap shots at a catchy name.</p>&mdash; Mathias Verraes (@mathiasverraes) <a href="https://twitter.com/mathiasverraes/status/995317295072382976?ref_src=twsrc%5Etfw">May 12, 2018</a></blockquote><script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script></div>]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_time_a2fb2f0e69076690c87567fab3364dd7</wp:meta_key>
    <wp:meta_value><![CDATA[1526479963]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>magento2_upgrade_001</title>
  <link>http://joaorosa.io/2018/03/11/how-to-solve-magento-2-upgrade-errors/magento2_upgrade_001/</link>
  <pubDate>Sun, 11 Mar 2018 11:18:25 +0000</pubDate>
  <dc:creator>joaoasrosa</dc:creator>
  <guid isPermaLink="false">http://anotherlookontech.files.wordpress.com/2018/03/magento2_upgrade_001.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>1855</wp:post_id>
  <wp:post_date>2018-03-11 12:18:25</wp:post_date>
  <wp:post_date_gmt>2018-03-11 11:18:25</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>magento2_upgrade_001</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>1854</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://anotherlookontech.files.wordpress.com/2018/03/magento2_upgrade_001.png</wp:attachment_url>
</item>
<item>
  <title>magento2_upgrade_002</title>
  <link>http://joaorosa.io/2018/03/11/how-to-solve-magento-2-upgrade-errors/magento2_upgrade_002/</link>
  <pubDate>Sun, 11 Mar 2018 11:18:26 +0000</pubDate>
  <dc:creator>joaoasrosa</dc:creator>
  <guid isPermaLink="false">http://anotherlookontech.files.wordpress.com/2018/03/magento2_upgrade_002.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>1856</wp:post_id>
  <wp:post_date>2018-03-11 12:18:26</wp:post_date>
  <wp:post_date_gmt>2018-03-11 11:18:26</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>magento2_upgrade_002</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>1854</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://anotherlookontech.files.wordpress.com/2018/03/magento2_upgrade_002.png</wp:attachment_url>
</item>
<item>
  <title>magento2_upgrade_003</title>
  <link>http://joaorosa.io/2018/03/11/how-to-solve-magento-2-upgrade-errors/magento2_upgrade_003/</link>
  <pubDate>Sun, 11 Mar 2018 11:18:29 +0000</pubDate>
  <dc:creator>joaoasrosa</dc:creator>
  <guid isPermaLink="false">http://anotherlookontech.files.wordpress.com/2018/03/magento2_upgrade_003.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>1857</wp:post_id>
  <wp:post_date>2018-03-11 12:18:29</wp:post_date>
  <wp:post_date_gmt>2018-03-11 11:18:29</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>magento2_upgrade_003</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>1854</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://anotherlookontech.files.wordpress.com/2018/03/magento2_upgrade_003.png</wp:attachment_url>
</item>
<item>
  <title>magento2_upgrade_004</title>
  <link>http://joaorosa.io/2018/03/11/how-to-solve-magento-2-upgrade-errors/magento2_upgrade_004/</link>
  <pubDate>Sun, 11 Mar 2018 11:18:32 +0000</pubDate>
  <dc:creator>joaoasrosa</dc:creator>
  <guid isPermaLink="false">http://anotherlookontech.files.wordpress.com/2018/03/magento2_upgrade_004.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>1858</wp:post_id>
  <wp:post_date>2018-03-11 12:18:32</wp:post_date>
  <wp:post_date_gmt>2018-03-11 11:18:32</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>magento2_upgrade_004</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>1854</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://anotherlookontech.files.wordpress.com/2018/03/magento2_upgrade_004.png</wp:attachment_url>
</item>
<item>
  <title>Life of a C# Developer: How to build and test an AWS Lambda locally</title>
  <link>http://joaorosa.io/2018/05/21/life-of-a-c-developer-how-to-build-and-test-an-aws-lambda-locally/</link>
  <pubDate>Mon, 21 May 2018 16:17:21 +0000</pubDate>
  <dc:creator>joaoasrosa</dc:creator>
  <guid isPermaLink="false">http://joaorosa.io/?p=1863</guid>
  <description/>
  <content:encoded><![CDATA[Today Serverless is a thing. Although everyone can write a blog post about how Serverless run on servers, I share the same visions as <a href="https://twitter.com/mathiasverraes" rel="noopener">Mathias Verraes</a>:

https://twitter.com/mathiasverraes/status/995317295072382976

Given that, I decided to share my developer experience building, testing and deploying AWS Lambda functions in the .NET world. Not a "Hello World" example, but rather a real-world scenario, where some services integrate with each other. Since a Serverless function is a tiny piece of code in a much larger process, <strong>how can I test the flow on my development machine?</strong>

<h2>Challenge</h2>

In this example, we will have an AWS Lambda that receives a Notification from the Web Application and sends an SMSÂ using a 3<sup>rd</sup> party provider. The requests and responses to the AWS Lambda function are proxied using AWS API Gateway, given all goodness of HTTP.

[caption id="attachment_1865" align="aligncenter" width="1280"]<img class="size-full wp-image-1865 aligncenter" src="https://anotherlookontech.files.wordpress.com/2018/05/aws-lambda-for-sms.png" alt="AWS Lambda for SMS" width="1280" height="460" /> Representation of the interaction between the components[/caption]

However, the SMS provider does not have a sandbox which we can use for our acceptance tests, and we do not want to spend all of our credits. Since we want to be sure that our business code handles all the use cases, we need to build the behavior of the SMS provider ourselves. At least the documentation is up to a good standard. :)

[caption id="attachment_1864" align="aligncenter" width="546"]<img class="size-full wp-image-1864 aligncenter" src="https://anotherlookontech.files.wordpress.com/2018/05/challenge-accepted-barney-stinson-06.jpg" alt="challenge-accepted-barney-stinson-06" width="546" height="513" /> Credits to <a href="http://www.quickmeme.com" rel="noopener">http://www.quickmeme.com</a>[/caption]

<h3>Use Cases</h3>

We identified several uses cases which our business code (AWS Lambda) needs to handle:

<ol>
    <li>The account credentials are wrong. The authentication with the SMS provider will fail, and the SMS will not be sent</li>
    <li>The account doesn't have sufficient credits. To execute the operation, some credits will be used</li>
    <li>The SMS is sent. All good, SMS sent, credits deducted, happy days</li>
    <li>Rainy day. For some reason, the SMS provider doesn't return an expected result (described in the previous points). Thus we need to catch and handle it</li>
</ol>

<h3>Testing Strategy</h3>

We want to have the feedback as quickly as we can, with different levels of testing. We have unit testing to make sure the business logic behaves based on the use cases. However, we also have acceptance tests in a Given/When/Then format, having a broader scope than the unit tests.

<h2>Implementation</h2>

Given the constraints described earlier, and to achieve the level of testing, we need to build a TestingÂ API with the same behavior as the SMS provider.

<h3>Testing API</h3>

The Testing API needs to be instrumented to behave according to the use case. The easiest route to do it is using an environmentÂ variable:

<pre><code>switch (Environment.GetEnvironmentVariable("API_BEHAVIOUR"))
{
  case "ok":
    return new OkResult();
  case "invalid_credentials":
    return new UnauthorizedResult();
  case "insufficient_credits":
    return new StatusCodeResult((int) HttpStatusCode.Forbidden);;
  default:
    return new StatusCodeResult((int) HttpStatusCode.InternalServerError);
}</code></pre>

Using this approach we can control the response from the Testing API, allowing to assert the correct behavior of the Lambda function.

The Testing API is deployed in a Docker container, the same technology used by SAM Local. ReusingÂ the same technology reduces the risk of friction in our development environment. However, it is possible to deploy the Testing API in other hosting technologies.

<h3>SAM Local</h3>

AWS has built and released the Serverless Application Model (SAM) Local tooling. "<strong><code>sam</code></strong>Â is the AWS CLI tool for managing Serverless applications written withÂ <a href="https://github.com/awslabs/serverless-application-model" rel="noopener">AWS Serverless Application Model (SAM)</a>. SAM CLI can be used to test functions locally, start a local API Gateway from a SAM template, validate a SAM template, generate sample payloads for various event sources, and generate a SAM project in your favorite Lambda Runtime." [1]

The AWS Lambda function is triggered by an APIÂ Gateway event, sending the notification as SMS to the SMS provider.

The template has all the necessary components:

<pre><code>AWSTemplateFormatVersion: 2010-09-09
Transform: AWS::Serverless-2016-10-31
Description: AWS SAM Local blog example

Resources:
  Lambda:
    Type: AWS::Serverless::Function
    Properties:
      Handler: Lambda::Lambda.Function::Handler
      CodeUri: ./Lambda.zip
      Runtime: dotnetcore2.0
      Environment:
        Variables:
          SMS_API_URL: http://testing-api:80/
          SMS_API_USERNAME: foo
          SMS_API_PASSWORD: bar
      Events:
        PostEvent:
          Type: Api
          Properties:
            Path: /
            Method: post</code></pre>

As the template describes, the API Gateway will proxy a POST request to the AWS Lambda, which is responsible for executing the business code.

<h3>Acceptance Tests</h3>

The Acceptance Tests aim to test the system behavior based on the specifications. The specifications were coded based on a set of Given/When/Then, where the tests are executed in a black box fashion (e. g. the system is tested without knowledge of the internals).

For every test run, a report is created. This is the default behavior of the testing framework (<a href="https://github.com/LightBDD/LightBDD" rel="noopener">LightBDD</a>). However, you can implement using your preferred poison. :)

The Acceptance Tests are responsible for starting the Testing API with the required behavior for the scenario under test; and also starts the SAM Local, calling the API Gateway command (<code>sam local start-api --docker-network testing</code>).

<h3>Putting Everything Together</h3>

Since we are in the .NET world, we use <a href="https://cakebuild.net" rel="noopener">Cake</a> to script our local testing. The script allows the build, deploy and test the involved components in the <a href="http://joaorosa.io/2017/10/18/abstract-from-your-ci-use-cake/">same way locally and in the CI server</a>.

In this case, the script:

<ol>
    <li>Cleans the files from the previous build (binaries, artifacts, etc.)</li>
    <li>Restores the dependencies (NuGet)</li>
    <li>Builds the solution</li>
    <li>Run the Unit Tests</li>
    <li>Publish the AWS Lambda and the Testing API</li>
    <li>Package the AWS Lambda into a zip file</li>
    <li>Deploys the previously compressed AWS Lambda and the SAM template</li>
    <li>Creates the Docker container image for the Testing API</li>
    <li>Creates the Docker network for the components</li>
    <li>Run the Acceptance Tests</li>
    <li>Removes the Docker network</li>
    <li>Removes the Docker container image</li>
</ol>

The steps can be executed locally or on the CI server (see here for <a href="https://travis-ci.org/joaoasrosa/aws-sam-local-blog" rel="noopener">TravisCI</a>. We have some limitations running in AppVeyor).

You can find the code here:Â <a href="https://github.com/joaoasrosa/aws-sam-local-blog" rel="noopener">https://github.com/joaoasrosa/aws-sam-local-blog</a>

<h2>Final thoughts</h2>

Serverless is a great technology, decreasing the necessary maintenance of the cloud components. However, like any technology, we should use it pragmatically. Since it's easy to put our code in a Function (or Lambda depending on the vendor), we can end with multiple asynchronous triggers in the cloud. Remember, back in the day, the use of triggers in the databases? Easy to develop, a pain to maintain. Same with Serverless code...

To decrease the risk of unintended behavior we need to have a sane CI/CD pipeline with a good level of testing. Also, we need to use the correct tools to allow faster feedback loops, starting in our development environment.

This post describes one possible way for .NET developers using AWS technologies. If you have a different but sane approach to achieve the same goal, just shout! ;)

<h4>References</h4>

[1] -Â <a href="https://github.com/awslabs/aws-sam-cli" rel="noopener">https://github.com/awslabs/aws-sam-cli</a>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>1863</wp:post_id>
  <wp:post_date>2018-05-21 18:17:21</wp:post_date>
  <wp:post_date_gmt>2018-05-21 16:17:21</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>life-of-a-c-developer-how-to-build-and-test-an-aws-lambda-locally</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="net-core"><![CDATA[.NET Core]]></category>
  <category domain="post_tag" nicename="agile"><![CDATA[Agile]]></category>
  <category domain="post_tag" nicename="aws"><![CDATA[AWS]]></category>
  <category domain="post_tag" nicename="aws-lambda"><![CDATA[AWS Lambda]]></category>
  <category domain="category" nicename="cloud-computing"><![CDATA[Cloud Computing]]></category>
  <category domain="category" nicename="continuous-deployment"><![CDATA[Continuous Deployment]]></category>
  <category domain="post_tag" nicename="continuous-improvement"><![CDATA[Continuous Improvement]]></category>
  <category domain="post_tag" nicename="linux"><![CDATA[Linux]]></category>
  <category domain="category" nicename="oss"><![CDATA[OSS]]></category>
  <category domain="post_tag" nicename="testing"><![CDATA[Testing]]></category>
  <category domain="post_tag" nicename="windows"><![CDATA[Windows]]></category>
  <wp:postmeta>
    <wp:meta_key>_wpcom_is_markdown</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_354a84d346d285379f34b2457b718e93</wp:meta_key>
    <wp:meta_value><![CDATA[<div class="embed-twitter"><blockquote class="twitter-tweet" data-width="550" data-dnt="true"><p lang="en" dir="ltr">If you want to tweet or blog about how serverless actually runs on servers, let me save you some time: Nobody thinks that serverless doesn&#39;t run on servers. Nobody. You&#39;re just taking cheap shots at a catchy name.</p>&mdash; Mathias Verraes (@mathiasverraes) <a href="https://twitter.com/mathiasverraes/status/995317295072382976?ref_src=twsrc%5Etfw">May 12, 2018</a></blockquote><script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script></div>]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_time_354a84d346d285379f34b2457b718e93</wp:meta_key>
    <wp:meta_value><![CDATA[1526545246]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_a2fb2f0e69076690c87567fab3364dd7</wp:meta_key>
    <wp:meta_value><![CDATA[<div class="embed-twitter"><blockquote class="twitter-tweet" data-width="500" data-dnt="true"><p lang="en" dir="ltr">If you want to tweet or blog about how serverless actually runs on servers, let me save you some time: Nobody thinks that serverless doesn&#39;t run on servers. Nobody. You&#39;re just taking cheap shots at a catchy name.</p>&mdash; Mathias Verraes (@mathiasverraes) <a href="https://twitter.com/mathiasverraes/status/995317295072382976?ref_src=twsrc%5Etfw">May 12, 2018</a></blockquote><script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script></div>]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_time_a2fb2f0e69076690c87567fab3364dd7</wp:meta_key>
    <wp:meta_value><![CDATA[1526912746]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_15420870</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_15487188</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_15487191</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_9072bbbb58144ed848d74e41f10e5b65</wp:meta_key>
    <wp:meta_value><![CDATA[<div class="embed-twitter"><blockquote class="twitter-tweet" data-width="550" data-dnt="true"><p lang="en" dir="ltr">If you want to tweet or blog about how serverless actually runs on servers, let me save you some time: Nobody thinks that serverless doesn&#39;t run on servers. Nobody. You&#39;re just taking cheap shots at a catchy name.</p>&mdash; Mathias Verraes (@mathiasverraes) <a href="https://twitter.com/mathiasverraes/status/995317295072382976?ref_src=twsrc%5Etfw">May 12, 2018</a></blockquote><script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script></div>]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_time_9072bbbb58144ed848d74e41f10e5b65</wp:meta_key>
    <wp:meta_value><![CDATA[1526919446]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>timeline_notification</wp:meta_key>
    <wp:meta_value><![CDATA[1526919446]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_published</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_client_id</wp:meta_key>
    <wp:meta_value><![CDATA[-1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[18094889510]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_e19b105537fbf15de15b920db573ac23</wp:meta_key>
    <wp:meta_value><![CDATA[<div class="embed-twitter"><blockquote class="twitter-tweet" data-width="550" data-dnt="true"><p lang="en" dir="ltr">If you want to tweet or blog about how serverless actually runs on servers, let me save you some time: Nobody thinks that serverless doesn&#39;t run on servers. Nobody. You&#39;re just taking cheap shots at a catchy name.</p>&mdash; Mathias Verraes (@mathiasverraes) <a href="https://twitter.com/mathiasverraes/status/995317295072382976?ref_src=twsrc%5Etfw">May 12, 2018</a></blockquote><script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script></div>]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_time_e19b105537fbf15de15b920db573ac23</wp:meta_key>
    <wp:meta_value><![CDATA[1526919448]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_a125551a0f0efe616910e938f848f5a2</wp:meta_key>
    <wp:meta_value><![CDATA[<div class="embed-twitter"><blockquote class="twitter-tweet" data-width="550" data-dnt="true"><p lang="en" dir="ltr">If you want to tweet or blog about how serverless actually runs on servers, let me save you some time: Nobody thinks that serverless doesn&#39;t run on servers. Nobody. You&#39;re just taking cheap shots at a catchy name.</p>&mdash; Mathias Verraes (@mathiasverraes) <a href="https://twitter.com/mathiasverraes/status/995317295072382976?ref_src=twsrc%5Etfw">May 12, 2018</a></blockquote><script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script></div>]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_time_a125551a0f0efe616910e938f848f5a2</wp:meta_key>
    <wp:meta_value><![CDATA[1538935315]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_ccbf0636c0e8dfcfd9949c7cfa2afd75</wp:meta_key>
    <wp:meta_value><![CDATA[<div class="embed-twitter"><blockquote class="twitter-tweet" data-width="550" data-dnt="true"><p lang="en" dir="ltr">If you want to tweet or blog about how serverless actually runs on servers, let me save you some time: Nobody thinks that serverless doesn&#39;t run on servers. Nobody. You&#39;re just taking cheap shots at a catchy name.</p>&mdash; Mathias Verraes (@mathiasverraes) <a href="https://twitter.com/mathiasverraes/status/995317295072382976?ref_src=twsrc%5Etfw">May 12, 2018</a></blockquote><script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script></div>]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_time_ccbf0636c0e8dfcfd9949c7cfa2afd75</wp:meta_key>
    <wp:meta_value><![CDATA[1547386665]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>350</wp:comment_id>
    <wp:comment_author><![CDATA[Life of a C# Developer: How to build and test an AWS Lambda locally - How to Code .NET]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>https://howtocode.net/2018/05/life-of-a-c-developer-how-to-build-and-test-an-aws-lambda-locally/</wp:comment_author_url>
    <wp:comment_author_IP>104.131.136.28</wp:comment_author_IP>
    <wp:comment_date>2018-05-22 11:30:57</wp:comment_date>
    <wp:comment_date_gmt>2018-05-22 09:30:57</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[â¦] on May 21, 2018by admin       submitted by  /u/joaoasrosa  [link] [comments]    No comments [â¦]]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:2:{s:4:"time";d:1526981458.188873;s:5:"event";s:9:"check-ham";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1526982145</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:3:{s:4:"time";d:1526982145.126855;s:5:"event";s:15:"status-approved";s:4:"user";s:10:"joaoasrosa";}</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>354</wp:comment_id>
    <wp:comment_author><![CDATA[Venkatesh]]></wp:comment_author>
    <wp:comment_author_email>venkatehsrini3@gmail.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>49.207.186.5</wp:comment_author_IP>
    <wp:comment_date>2018-05-28 03:22:12</wp:comment_date>
    <wp:comment_date_gmt>2018-05-28 01:22:12</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Hi,
I think the easiest way to external service is to mock it even for functional test. The scope is that you have to see how your app behaves when something goes wrong with external service. So why not simply mock the external service using an Http Handler.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:2:{s:4:"time";d:1527470534.412144;s:5:"event";s:9:"check-ham";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_notqueued</wp:meta_key>
      <wp:meta_value>1527499350</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:2:{s:4:"time";d:1527475533.15795;s:5:"event";s:9:"check-ham";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1527499350</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:3:{s:4:"time";d:1527499351.107424;s:5:"event";s:15:"status-approved";s:4:"user";s:10:"joaoasrosa";}</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>355</wp:comment_id>
    <wp:comment_author><![CDATA[JoÃ£o Rosa]]></wp:comment_author>
    <wp:comment_author_email>joaoasrosa@gmail.com</wp:comment_author_email>
    <wp:comment_author_url>http://anotherlookontech.wordpress.com</wp:comment_author_url>
    <wp:comment_author_IP>217.129.143.72</wp:comment_author_IP>
    <wp:comment_date>2018-05-28 11:25:24</wp:comment_date>
    <wp:comment_date_gmt>2018-05-28 09:25:24</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Hi Venkatesh,
That level of functional testing is done with the Unit Tests (as you can see in the GitHub repo) as you suggest. The idea to do the Acceptance Tests is to recreate the infrastructure locally (for instance, using the API Gateway to proxy the requests/responses). Also, in a complex system we should test the process as a whole, not only the units of work. The post reflects that intention, increasing the testing scope.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>354</wp:comment_parent>
    <wp:comment_user_id>74848251</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1527499525</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_notqueued</wp:meta_key>
      <wp:meta_value>1527499526</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:3:{s:4:"time";d:1527499526.014109;s:5:"event";s:9:"check-ham";s:4:"user";s:10:"joaoasrosa";}</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>420</wp:comment_id>
    <wp:comment_author><![CDATA[Life of a C# Developer: How to build and test an AWS Lambda locally &mdash; Xebia Blog]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>https://xebia.com/blog/life-of-a-c-developer-how-to-build-and-test-an-aws-lambda-locally/</wp:comment_author_url>
    <wp:comment_author_IP>35.205.52.216</wp:comment_author_IP>
    <wp:comment_date>2018-08-17 16:55:12</wp:comment_date>
    <wp:comment_date_gmt>2018-08-17 14:55:12</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[â¦] This post was also published on my personal blog. [â¦]]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:2:{s:4:"time";d:1534517713.647676;s:5:"event";s:9:"check-ham";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1534517784</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:3:{s:4:"time";d:1534517784.354046;s:5:"event";s:15:"status-approved";s:4:"user";s:10:"joaoasrosa";}</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title>challenge-accepted-barney-stinson-06</title>
  <link>http://joaorosa.io/2018/05/21/life-of-a-c-developer-how-to-build-and-test-an-aws-lambda-locally/challenge-accepted-barney-stinson-06/</link>
  <pubDate>Thu, 17 May 2018 07:55:09 +0000</pubDate>
  <dc:creator>joaoasrosa</dc:creator>
  <guid isPermaLink="false">http://anotherlookontech.files.wordpress.com/2018/05/challenge-accepted-barney-stinson-06.jpg</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>1864</wp:post_id>
  <wp:post_date>2018-05-17 09:55:09</wp:post_date>
  <wp:post_date_gmt>2018-05-17 07:55:09</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>challenge-accepted-barney-stinson-06</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>1863</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://anotherlookontech.files.wordpress.com/2018/05/challenge-accepted-barney-stinson-06.jpg</wp:attachment_url>
</item>
<item>
  <title>AWS Lambda for SMS</title>
  <link>http://joaorosa.io/2018/05/21/life-of-a-c-developer-how-to-build-and-test-an-aws-lambda-locally/aws-lambda-for-sms/</link>
  <pubDate>Thu, 17 May 2018 08:18:26 +0000</pubDate>
  <dc:creator>joaoasrosa</dc:creator>
  <guid isPermaLink="false">http://anotherlookontech.files.wordpress.com/2018/05/aws-lambda-for-sms.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>1865</wp:post_id>
  <wp:post_date>2018-05-17 10:18:26</wp:post_date>
  <wp:post_date_gmt>2018-05-17 08:18:26</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>aws-lambda-for-sms</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>1863</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://anotherlookontech.files.wordpress.com/2018/05/aws-lambda-for-sms.png</wp:attachment_url>
</item>
<item>
  <title>How to configure AWS SAM CLI in TravisCI</title>
  <link>http://joaorosa.io/?p=1870</link>
  <pubDate>Mon, 30 Nov -0001 00:00:00 +0000</pubDate>
  <dc:creator>joaoasrosa</dc:creator>
  <guid isPermaLink="false">http://joaorosa.io/?p=1870</guid>
  <description/>
  <content:encoded><![CDATA[In my previous <a href="http://joaorosa.io/2018/05/21/life-of-a-c-developer-how-to-build-and-test-an-aws-lambda-locally/">blog post</a>, I developed a real-life example of how we can develop AWS Lambda locally. For a developer is very powerful to have a development environmentÂ which is a replica of the production environment. However, we should have a same CI/CD pipeline, where we build and test our solution.

Today I will show how to configure TravisCI in order to build and test our C# AWS Lambda.

[caption id="attachment_1871" align="aligncenter" width="401"]<img class=" size-full wp-image-1871 aligncenter" src="https://anotherlookontech.files.wordpress.com/2018/05/sam-cli-banner.png" alt="sam-cli-banner" width="401" height="266" /> AWS SAM CLI banner fromÂ <a href="https://github.com/awslabs/aws-sam-cli">https://github.com/awslabs/aws-sam-cli</a>[/caption]

<h2>TravisCI</h2>

TravisCI is one alternative for our CI/CD pipeline. It is Linux based and free for open source projects.

To configure our pipeline for the AWS Lambda we need to create the file<code>.travis.yml</code>, containing the Pipeline as a Code (PaaC) instructions.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>1870</wp:post_id>
  <wp:post_date>2018-05-22 14:33:56</wp:post_date>
  <wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name/>
  <wp:status>draft</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="sem-categoria"><![CDATA[Sem categoria]]></category>
  <wp:postmeta>
    <wp:meta_key>_wpcom_is_markdown</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>sam-cli-banner</title>
  <link>http://joaorosa.io/?attachment_id=1871</link>
  <pubDate>Tue, 22 May 2018 12:28:19 +0000</pubDate>
  <dc:creator>joaoasrosa</dc:creator>
  <guid isPermaLink="false">http://anotherlookontech.files.wordpress.com/2018/05/sam-cli-banner.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>1871</wp:post_id>
  <wp:post_date>2018-05-22 14:28:19</wp:post_date>
  <wp:post_date_gmt>2018-05-22 12:28:19</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>sam-cli-banner</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>1870</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://anotherlookontech.files.wordpress.com/2018/05/sam-cli-banner.png</wp:attachment_url>
</item>
<item>
  <title>What I learned from live coding during talks</title>
  <link>http://joaorosa.io/2018/10/07/what-i-learned-from-live-coding-during-talks/</link>
  <pubDate>Sun, 07 Oct 2018 18:01:50 +0000</pubDate>
  <dc:creator>joaoasrosa</dc:creator>
  <guid isPermaLink="false">http://joaorosa.io/?p=1873</guid>
  <description/>
  <content:encoded><![CDATA[Last week, Kenny Baas and I, delivered 2 talks with live coding. We were at <a href="http://nextbuild.nl/">NextBuild</a> (with <a href="http://nextbuild.nl/sessions/from-eventstorming-to-coddding/">From EventStorming to CoDDDing</a>) and <a href="https://techorama.nl/">Techorama NL</a> (with <a href="https://sched.co/EjEe">Improving design and code quality with Property-based testing</a>).

[caption id="attachment_1874" align="alignnone" width="3456"]<img class="alignnone size-full wp-image-1874" src="https://anotherlookontech.files.wordpress.com/2018/10/img_20181007_193500_01-e1538933946611.jpg" alt="Badges" width="3456" height="2874" /> Conference badges[/caption]

In both talks, we used live coding as a tool to pass our message across the audience. It is useful, given the target audience isÂ the developer community. The talks were IDE based, with refactors and new code. We didnât have the need to deploy or run the code anywhere, apart for the tests, which ran from the IDE.

Here is what I have learned from the talks:

<ul>
    <li><strong>If possible pair for the talk</strong>. In both cases, we took a navigator/driver strategy, where one of us coded, and the other navigated the code. We both switched the roles from the talks, and when you are the driver it helps to be focused on the code, rather than code and navigate</li>
    <li><strong>Practice a lot</strong>. 2 weeks before, 1 day before, 2 hours before. And even then, you will get questions that you didnât think of. If you canât answer it, collect the questions, and go back to code, validating it after the talk</li>
    <li><strong>Use local dependencies</strong>. Our talks were in Java and .NET. Both ecosystems have package managers, which allows the usage of local dependencies. Prepare the dependencies on your local machine, for the event of Internet failure</li>
    <li><strong>Have the coding script with you</strong>. Take notes of the major points which you will code, in a small paper or post-its. It helps to have the âhappy pathâ with you, for the event of a blackout</li>
    <li><strong>Use the IDE light colour theme</strong>. Every developer has her/his preferences regarding the colour scheme, but remember that you are delivering a talk. Is for your audience, not for you. The light colour themes work better for projections</li>
    <li><strong>Use the default font</strong>. Again, we tweak your development environments for our preferences; however, the default font shipped with our IDE is widely used, and (usually) is built on years of research</li>
    <li><strong>Increase the font size</strong>. Given that you will present the live coding session with a beamer, increase the font size for better readability. Ask out loud if the font size is good for everyone and tell the audience that they can interrupt if the font size is not good enough</li>
    <li><strong>Allow questions from the audience on the spot</strong>. We were lucky to have really sharp people on the audience. Before you start coding, tell the audience that they can ask questions as we go along. It makes our life âharderâ, given that we do not know what people will ask, and we can deviate from the script. However, it creates a mob programming environment, where we can learn from each other. Again, people came for our talk, we are there to answer their questions</li>
    <li><strong>Have a pen and paper available</strong>. Sometimes you do not have the answer to the audience. Itâs ok, no one knows everything. It is handy to have a pen and paper with you, allowing to take notes and move on</li>
    <li><strong>Do a retrospective after the talk</strong>. Right after the talk do a retrospective with the co-speaker (if you are doing it alone, it can be tricky). It is the best time to get insights on your blind spots, creating notes for further improvement on the topic</li>
</ul>

And thatâs it. What are your learnings from talks with live coding? As a speaker or as an attendee, I would like to know your insights!]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>1873</wp:post_id>
  <wp:post_date>2018-10-07 20:01:50</wp:post_date>
  <wp:post_date_gmt>2018-10-07 18:01:50</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>what-i-learned-from-live-coding-during-talks</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="conferences"><![CDATA[Conferences]]></category>
  <category domain="post_tag" nicename="live-coding"><![CDATA[Live coding]]></category>
  <category domain="post_tag" nicename="public-speaking"><![CDATA[Public speaking]]></category>
  <category domain="post_tag" nicename="soft-skills"><![CDATA[Soft skills]]></category>
  <category domain="category" nicename="speaking"><![CDATA[Speaking]]></category>
  <wp:postmeta>
    <wp:meta_key>_wpcom_is_markdown</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_google_plus_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://plus.google.com/105879670784970671735/posts/YRv9XQU9WKo]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:1:{s:7:"twitter";a:1:{i:15487188;s:57:"https://twitter.com/joaoasrosa/status/1048996884965199872";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>timeline_notification</wp:meta_key>
    <wp:meta_value><![CDATA[1538935314]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_published</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_client_id</wp:meta_key>
    <wp:meta_value><![CDATA[-1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[22939087869]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_15567246</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_15420870</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_15638091</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_15487188</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[joaoasrosa]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_linkedin_url</wp:meta_key>
    <wp:meta_value><![CDATA[www.linkedin.com/updates?topic=6454762581943943168]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_15638097</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_15487191</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>461</wp:comment_id>
    <wp:comment_author><![CDATA[JoÃ«l Grimberg]]></wp:comment_author>
    <wp:comment_author_email>jgrimberg@xebia.com</wp:comment_author_email>
    <wp:comment_author_url>http://www.xebia.com</wp:comment_author_url>
    <wp:comment_author_IP>5.132.6.32</wp:comment_author_IP>
    <wp:comment_date>2018-10-07 20:52:54</wp:comment_date>
    <wp:comment_date_gmt>2018-10-07 18:52:54</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Interresting post, Joao! Just one question about the retrospective: I assume you did the retrospect with the audience or did you do it with your fellow speaker?  In case of the audience, please enlighten us with how you pulled the retrospective off with such a large crowd ð]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:2:{s:4:"time";d:1538938375.331062;s:5:"event";s:9:"check-ham";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_jobid</wp:meta_key>
      <wp:meta_value>22940795149</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_queued</wp:meta_key>
      <wp:meta_value>1538939509</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1538939509</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:3:{s:4:"time";d:1538939509.797848;s:5:"event";s:15:"status-approved";s:4:"user";s:10:"joaoasrosa";}</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>462</wp:comment_id>
    <wp:comment_author><![CDATA[JoÃ£o Rosa]]></wp:comment_author>
    <wp:comment_author_email>joaoasrosa@gmail.com</wp:comment_author_email>
    <wp:comment_author_url>http://anotherlookontech.wordpress.com</wp:comment_author_url>
    <wp:comment_author_IP>94.210.5.79</wp:comment_author_IP>
    <wp:comment_date>2018-10-07 21:12:51</wp:comment_date>
    <wp:comment_date_gmt>2018-10-07 19:12:51</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Hi JoÃ«l. Hi did the retrospective with my fellow speaker. I will update the post. Good spot. :)]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>461</wp:comment_parent>
    <wp:comment_user_id>74848251</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1538939572</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:3:{s:4:"time";d:1538939572.853782;s:5:"event";s:9:"check-ham";s:4:"user";s:10:"joaoasrosa";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_jobid</wp:meta_key>
      <wp:meta_value>22940820166</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_queued</wp:meta_key>
      <wp:meta_value>1538939573</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title>Badges</title>
  <link>http://joaorosa.io/2018/10/07/what-i-learned-from-live-coding-during-talks/img_20181007_193500_01/</link>
  <pubDate>Sun, 07 Oct 2018 17:37:47 +0000</pubDate>
  <dc:creator>joaoasrosa</dc:creator>
  <guid isPermaLink="false">http://anotherlookontech.files.wordpress.com/2018/10/img_20181007_193500_01.jpg</guid>
  <description/>
  <content:encoded><![CDATA[Badges]]></content:encoded>
  <excerpt:encoded><![CDATA[Badges]]></excerpt:encoded>
  <wp:post_id>1874</wp:post_id>
  <wp:post_date>2018-10-07 19:37:47</wp:post_date>
  <wp:post_date_gmt>2018-10-07 17:37:47</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>img_20181007_193500_01</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>1873</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://anotherlookontech.files.wordpress.com/2018/10/img_20181007_193500_01-e1538933946611.jpg</wp:attachment_url>
  <wp:postmeta>
    <wp:meta_key>_wp_attachment_image_alt</wp:meta_key>
    <wp:meta_value><![CDATA[Badges]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_original_post_media</wp:meta_key>
    <wp:meta_value><![CDATA[O:8:"stdClass":6:{s:4:"date";s:25:"2018-10-07T19:38:11+02:00";s:3:"URL";s:80:"https://anotherlookontech.files.wordpress.com/2018/10/img_20181007_193500_01.jpg";s:4:"file";s:26:"img_20181007_193500_01.jpg";s:9:"extension";s:3:"jpg";s:9:"mime_type";s:10:"image/jpeg";s:4:"size";i:2325722;}]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Using Flyway and GitLab to deploy a MySQL database to AWS RDS securely</title>
  <link>http://joaorosa.io/2019/01/13/using-flyway-and-gitlab-to-deploy-a-mysql-database-to-aws-rds-securely/</link>
  <pubDate>Sun, 13 Jan 2019 13:37:39 +0000</pubDate>
  <dc:creator>joaoasrosa</dc:creator>
  <guid isPermaLink="false">http://joaorosa.io/?p=1879</guid>
  <description/>
  <content:encoded><![CDATA[<!-- wp:paragraph -->
<p>One of my passions is to be a trainer. Sharing knowledge, meeting new people, be continuously challenged, it fuels my brain, and I'm always learning something new. I'm creating a new training for software development teams, and one of the components is a MySQL database. Also, I'm using a public cloud provider (in this case AWS), and Xebia provides accounts to cover training, workshops and our own experiments.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>All the application and infrastructure definition (code) is in GitLab. It gives a central place with source code and CI/CD. And I can automate everything! :) The stack is not up and running 24/7, and I do not like to repeat myself executing the scripts manually (in the end <a href="https://www.youtube.com/watch?v=L3wKzyIN1yk">I'm only human</a>, and I will fail in the script execution). Thus, I have a pipeline to validate and lint the CloudFormation templates, build the app and run the tests, deploy the CloudFormation template, deploy the database and finally deploy the app. Pretty standard nowadays.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>To deploy the database, I decided to use <a href="https://flywaydb.org">Flyway</a>. It offers supports to different database technologies, and the Community version (free) has an interesting range of features, the features that I need to deploy the database. It also packs the Flyway CLI in a <a href="https://hub.docker.com/r/boxfuse/flyway/">Docker image</a>, which is precisely what I need for my GitLab pipeline.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Great! I can use the Docker image in my pipeline. My pipeline is multi-stage, and in each stage, I use different Docker images, with the tools needed for that particular stage. Separation of concerns, right?</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>My <code>.gitlab-ci.yml</code> looks like this (omitting parts of the script):</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>stages:
  - validate
  - build
  - deploy
  - deploy-database

validate:
  image: validate-image
  stage: validate
  ...

build:
  image: build-image
  stage: build
  ...

deploy:
  image: deploy-image
  stage: deploy
  ...

deploy-database:
  image: boxfuse/flyway:5.2.4-alpine
  stage: deploy-database
  script:
    - export FLYWAY_PASSWORD=$DB_PASSWORD
    - flyway -configFiles=src/database/conf/flyway.conf info
    - flyway -configFiles=src/database/conf/flyway.conf migrate
    - flyway -configFiles=src/database/conf/flyway.conf info</code></pre>
<!-- /wp:code -->

<!-- wp:html -->
<p>If we take a close look at the <code>deploy-database</code> stage, it:
<ol>
<li>Sets the database password from a secure environment variable</li>
<li>Displays the information from the current database migration</li>
<li>Execute the migrations</li>
<li>Displays the information from the current database migration</li>
</ol>
</p>
<!-- /wp:html -->

<!-- wp:paragraph -->
<p>Let's run it!<br></p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":1883} -->
<figure class="wp-block-image"><img src="https://anotherlookontech.files.wordpress.com/2019/01/screenshot-2019-01-13-at-11.38.24.jpg" alt="" class="wp-image-1883" /><figcaption>Using the Flyway image to deploy the database</figcaption></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>Errrggghhh... It fails. Taking a look into the <a href="https://github.com/flyway/flyway-docker/blob/bf62140795fcdcf8e16bc7038ac74eb88b66985c/alpine/Dockerfile#L14">Dockerfile</a>, I discovered why. The <code>entrypoint</code> is to the Flyway CLI tool, and it expects Flyway commands. Well, a way to bypass it is to create a new Docker image based on the Flyway image and set the <code>entrypoint</code> to <code>/usr/bin/env</code> for example. The Dockerfile:</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>FROM boxfuse/flyway:5.2.4-alpine
LABEL maintainers="JoÃ£o Rosa &lt;https://joaorosa.io&gt;"

ENV PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin

ENTRYPOINT ["/usr/bin/env"]</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>Updating the stage <code>deploy-database</code> in <code>.gitlab-ci.yml</code> to use the new Docker image, and run it we have...</p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":1886} -->
<figure class="wp-block-image"><img src="https://anotherlookontech.files.wordpress.com/2019/01/screenshot-2019-01-13-at-11.54.10.jpg" alt="" class="wp-image-1886" /><figcaption>Successful run of the database deployment! Or not...</figcaption></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>The connection is <strong>not secure</strong>! That is not acceptable. <br>Looking to the <a href="https://dev.mysql.com/doc/refman/5.7/en/encrypted-connections.html">MySQL documentation</a>, it is possible to explicitly indicate to use SSL in the connection. The Flyway URL will look like this: <code>jdbc:mysql://awesome.url:3306/myDatabase?autoReconnect=true&amp;useSSL=true</code>. We can deploy it!</p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":1887} -->
<figure class="wp-block-image"><img src="https://anotherlookontech.files.wordpress.com/2019/01/screenshot-2019-01-13-at-12.24.33.jpg" alt="" class="wp-image-1887" /><figcaption>After enabling the SSL in the connection. Failed again...</figcaption></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>Hmmm... That is strange. Let's take a step back. If I'm using SSL, it needs to use a certificate. But the container is not aware of it. Time to use the Google skills, and looking for the documentation on how to connect to a MySQL RDS instance using SSL. AWS provides <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_MySQL.html#MySQL.Concepts.SSLSupport">it</a>. They have a certificate that can be used to authenticate with the service.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>The Docker image needs to have the certificate, and given that the CLI is based on Java, we can add the certificate to the certificate store using the <code>keytool</code> CLI. The updated Dockerfile looks like:</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>FROM boxfuse/flyway:5.2.4-alpine
LABEL maintainers="JoÃ£o Rosa &lt;https://joaorosa.io&gt;"

ARG STORE_PASS

ENV PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin

ADD https://s3.amazonaws.com/rds-downloads/rds-combined-ca-bundle.pem ./

RUN $JAVA_HOME/bin/keytool -keystore $JAVA_HOME/lib/security/cacerts -storepass $STORE_PASS -noprompt -trustcacerts -importcert -alias rds-combined-ca-bundle -file rds-combined-ca-bundle.pem

ENV JAVA_ARGS=-Djava.security.egd=file:/dev/../dev/urandom -Djavax.net.ssl.trustStore=$JAVA_HOME/lib/security/cacerts -Djavax.net.ssl.trustStorePassword=$STORE_PASS

ENTRYPOINT ["/usr/bin/env"]</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>As we can see, the certificate is downloaded, and using the <code>keytool</code> it is added to the certificate store. The environment variable <code>JAVA_ARGS</code> is updated to use the certificate store.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph {"textColor":"very-dark-gray","backgroundColor":"luminous-vivid-orange"} -->
<p class="has-text-color has-background has-very-dark-gray-color has-luminous-vivid-orange-background-color"><strong>NOTE:</strong> as you can see it needs a password for the certificate store. For this post, I'm using an argument for the Dockerfile, using the secure environment variables from GitLab. However, <strong>it is out of scope for this post</strong> how to rotate and manage the secrets! You can use a parameter store from a public cloud provider, or software such as Hashicorp Vault. Out there are good articles on how to do it!</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Using the new Docker image, we do another round:</p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":1891} -->
<figure class="wp-block-image"><img src="https://anotherlookontech.files.wordpress.com/2019/01/screenshot-2019-01-13-at-12.41.49.jpg" alt="" class="wp-image-1891" /><figcaption>Database deployment using SSL</figcaption></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>As we can see, it deploys the database using an encrypted channel. Happy days, the pipeline is a bit more secure than before. :)</p>
<!-- /wp:paragraph -->]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>1879</wp:post_id>
  <wp:post_date>2019-01-13 14:37:39</wp:post_date>
  <wp:post_date_gmt>2019-01-13 13:37:39</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>using-flyway-and-gitlab-to-deploy-a-mysql-database-to-aws-rds-securely</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="aws"><![CDATA[AWS]]></category>
  <category domain="post_tag" nicename="ci-cd"><![CDATA[CI/CD]]></category>
  <category domain="category" nicename="cloud-computing"><![CDATA[Cloud Computing]]></category>
  <category domain="category" nicename="continuous-deployment"><![CDATA[Continuous Deployment]]></category>
  <category domain="category" nicename="continuous-integration"><![CDATA[Continuous Integration]]></category>
  <category domain="post_tag" nicename="flyway"><![CDATA[Flyway]]></category>
  <category domain="post_tag" nicename="gitlab"><![CDATA[GitLab]]></category>
  <category domain="post_tag" nicename="mysql"><![CDATA[MySQL]]></category>
  <category domain="category" nicename="oss"><![CDATA[OSS]]></category>
  <category domain="post_tag" nicename="rds"><![CDATA[RDS]]></category>
  <wp:postmeta>
    <wp:meta_key>_wpcom_is_markdown</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_external</wp:meta_key>
    <wp:meta_value><![CDATA[a:1:{s:7:"twitter";a:1:{i:15487188;s:57:"https://twitter.com/joaoasrosa/status/1084444405623386117";}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>timeline_notification</wp:meta_key>
    <wp:meta_value><![CDATA[1547386664]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[26486211107]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_google_plus_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://plus.google.com/105879670784970671735/posts/gYAcHE314uy]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_15567246</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_15420870</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_15638091</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_15487188</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_twitter_user</wp:meta_key>
    <wp:meta_value><![CDATA[joaoasrosa]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_linkedin_url</wp:meta_key>
    <wp:meta_value><![CDATA[www.linkedin.com/updates?topic=6490210098873409536]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_15638097</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_15487191</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>11496</wp:comment_id>
    <wp:comment_author><![CDATA[Shaheer]]></wp:comment_author>
    <wp:comment_author_email>shaheer@live.in</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>138.106.57.131</wp:comment_author_IP>
    <wp:comment_date>2019-03-27 17:20:40</wp:comment_date>
    <wp:comment_date_gmt>2019-03-27 16:20:40</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Thank you for the very useful post. Can you share on how we can  specify path to the sql folder in the source repository.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:2:{s:4:"time";d:1553707962.433897;s:5:"event";s:9:"check-ham";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:2:{s:4:"time";d:1553703641.800796;s:5:"event";s:9:"check-ham";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_notqueued</wp:meta_key>
      <wp:meta_value>1555268657</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1555268657</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:3:{s:4:"time";d:1555268658.424056;s:5:"event";s:15:"status-approved";s:4:"user";s:10:"joaoasrosa";}</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>14052</wp:comment_id>
    <wp:comment_author><![CDATA[JoÃ£o Rosa]]></wp:comment_author>
    <wp:comment_author_email>joaoasrosa@gmail.com</wp:comment_author_email>
    <wp:comment_author_url>http://anotherlookontech.wordpress.com</wp:comment_author_url>
    <wp:comment_author_IP>94.210.5.79</wp:comment_author_IP>
    <wp:comment_date>2019-04-14 21:06:15</wp:comment_date>
    <wp:comment_date_gmt>2019-04-14 19:06:15</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Hi, you can follow the Flyway conventions, or if you have an different path, use the Flyway configuration file.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>11496</wp:comment_parent>
    <wp:comment_user_id>74848251</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1555268776</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:3:{s:4:"time";d:1555268776.803677;s:5:"event";s:9:"check-ham";s:4:"user";s:10:"joaoasrosa";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_notqueued</wp:meta_key>
      <wp:meta_value>1555268777</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title>image</title>
  <link>http://joaorosa.io/image/</link>
  <pubDate>Sun, 13 Jan 2019 10:35:53 +0000</pubDate>
  <dc:creator>joaoasrosa</dc:creator>
  <guid isPermaLink="false">http://anotherlookontech.files.wordpress.com/2019/01/image.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>1882</wp:post_id>
  <wp:post_date>2019-01-13 11:35:53</wp:post_date>
  <wp:post_date_gmt>2019-01-13 10:35:53</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>image</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://anotherlookontech.files.wordpress.com/2019/01/image.png</wp:attachment_url>
</item>
<item>
  <title>screenshot-2019-01-13-at-11.38.24</title>
  <link>http://joaorosa.io/screenshot-2019-01-13-at-11-38-24/</link>
  <pubDate>Sun, 13 Jan 2019 10:45:48 +0000</pubDate>
  <dc:creator>joaoasrosa</dc:creator>
  <guid isPermaLink="false">http://anotherlookontech.files.wordpress.com/2019/01/screenshot-2019-01-13-at-11.38.24.jpg</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>1883</wp:post_id>
  <wp:post_date>2019-01-13 11:45:48</wp:post_date>
  <wp:post_date_gmt>2019-01-13 10:45:48</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>screenshot-2019-01-13-at-11-38-24</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://anotherlookontech.files.wordpress.com/2019/01/screenshot-2019-01-13-at-11.38.24.jpg</wp:attachment_url>
</item>
<item>
  <title>screenshot-2019-01-13-at-11.54.10</title>
  <link>http://joaorosa.io/screenshot-2019-01-13-at-11-54-10/</link>
  <pubDate>Sun, 13 Jan 2019 10:57:09 +0000</pubDate>
  <dc:creator>joaoasrosa</dc:creator>
  <guid isPermaLink="false">http://anotherlookontech.files.wordpress.com/2019/01/screenshot-2019-01-13-at-11.54.10.jpg</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>1886</wp:post_id>
  <wp:post_date>2019-01-13 11:57:09</wp:post_date>
  <wp:post_date_gmt>2019-01-13 10:57:09</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>screenshot-2019-01-13-at-11-54-10</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://anotherlookontech.files.wordpress.com/2019/01/screenshot-2019-01-13-at-11.54.10.jpg</wp:attachment_url>
</item>
<item>
  <title>screenshot-2019-01-13-at-12.24.33</title>
  <link>http://joaorosa.io/screenshot-2019-01-13-at-12-24-33/</link>
  <pubDate>Sun, 13 Jan 2019 11:26:21 +0000</pubDate>
  <dc:creator>joaoasrosa</dc:creator>
  <guid isPermaLink="false">http://anotherlookontech.files.wordpress.com/2019/01/screenshot-2019-01-13-at-12.24.33.jpg</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>1887</wp:post_id>
  <wp:post_date>2019-01-13 12:26:21</wp:post_date>
  <wp:post_date_gmt>2019-01-13 11:26:21</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>screenshot-2019-01-13-at-12-24-33</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://anotherlookontech.files.wordpress.com/2019/01/screenshot-2019-01-13-at-12.24.33.jpg</wp:attachment_url>
</item>
<item>
  <title>screenshot-2019-01-13-at-12.41.49</title>
  <link>http://joaorosa.io/screenshot-2019-01-13-at-12-41-49/</link>
  <pubDate>Sun, 13 Jan 2019 11:44:09 +0000</pubDate>
  <dc:creator>joaoasrosa</dc:creator>
  <guid isPermaLink="false">http://anotherlookontech.files.wordpress.com/2019/01/screenshot-2019-01-13-at-12.41.49.jpg</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>1891</wp:post_id>
  <wp:post_date>2019-01-13 12:44:09</wp:post_date>
  <wp:post_date_gmt>2019-01-13 11:44:09</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>screenshot-2019-01-13-at-12-41-49</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://anotherlookontech.files.wordpress.com/2019/01/screenshot-2019-01-13-at-12.41.49.jpg</wp:attachment_url>
</item>
<item>
  <title>Build and secure containers to support your CI/CD pipeline</title>
  <link>http://joaorosa.io/2019/01/24/build-and-secure-containers-to-support-your-ci-cd-pipeline/</link>
  <pubDate>Thu, 24 Jan 2019 20:18:56 +0000</pubDate>
  <dc:creator>joaoasrosa</dc:creator>
  <guid isPermaLink="false">http://joaorosa.io/?p=1900</guid>
  <description/>
  <content:encoded><![CDATA[<!-- wp:paragraph -->
<p>There are 2 systems in any company that are critical: the payroll system, and the CI/CD system. Why? You may ask...<br>If the payroll system doesn't work, people will leave the company and the company (may) face legal problems; the CI/CD system is the gateway to production. If it is down and there is a bug in production, it will affect your business; loss of revenue, loss of customers, loss of money, just to name a few.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Usually, I find these problems regarding the CI/CD tooling:</p>
<!-- /wp:paragraph -->

<!-- wp:html -->
<ul><li>Poor Software Lifecycle Management, with outdated software, containing critical vulnerabilities</li><li>Ancient capabilities in the build agents. In extreme cases, frameworks and tools that are no longer supported by the vendors</li><li>Drifting agents. It means that teams had to do some sorcery to get the software build</li><li>Lack of proper isolation between different builds. It means that a build could access to another build files</li><li>Lead teams to upgrade or install a new framework</li><li>Outdated and strict rules mandated by a operations team. Usually from people that outdated heuristics on how software should be developed</li></ul>
<!-- /wp:html -->

<!-- wp:paragraph -->
<p>To tackle these problems, I usually suggest the use of a SaaS solution where they shift the responsibility of maintaining and securing the tool to the vendor; also, I recommend to select a tool which supports containers where the software is built. It can address several of the issues, such as providing isolation and decreasing the lead time to provide new capabilities. Also, it allows teams to create their own containers, shifting the responsibilities of the platform team to the development teams. Using containers as computing unit, it allows for granular capabilities (comparing to the typical full flagged machine), having a cleaner environment based on specific needs.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>As an added benefit, the platform team is no longer a constraint, since the development teams do not need to request new capabilities for the build/deploy agents. The platform team is responsible for a service provided to the organisation, and the service needs to be stable and secure. It is a paradigm and mindset shift for the typical operations team, which can become a platform team, offering outstanding services to the developers.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>All boxes ticked! Or not...</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>The pivotal change is shifting the responsibilities of the platform team to the development teams. Well, this calls for a great life lesson from Ben Parker: </p>
<!-- /wp:paragraph -->

<!-- wp:quote -->
<blockquote class="wp-block-quote"><p>With great power, comes great responsibilities!</p><cite>Ben Parker, Spider-Man<br></cite></blockquote>
<!-- /wp:quote -->

<!-- wp:paragraph -->
<p>Allowing the teams to build their own containers, who guarantees the security of the containers? Although it ticks some boxes, new challenges arose...</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>It's 0's and 1's</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>The platform team, who offers the service, is in the perfect spot to implement (dogfooding) a pipeline where the containers are tested and scanned for vulnerabilities. When everything passes, the container image is stored in the container registry, and it is continuously monitored. As CVEâs can be disclosed at any moment these images are constantly monitored. Using this approach, the platform team is in control of the CI/CD environment, and it is flexible enough for the development teams to deliver value quickly.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>In the end, it's 0's and 1's. Also known as Infrastructure as Code, and like any piece of code, it should be built, tested, stored in a central artifact store and deployed.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Recapping (or the one image that explains it all)</h2>
<!-- /wp:heading -->

<!-- wp:image {"id":1901} -->
<figure class="wp-block-image"><img src="https://anotherlookontech.files.wordpress.com/2019/01/recapping.png" alt="" class="wp-image-1901" /><figcaption>Explaining the world in one image</figcaption></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>Putting all together, the pipeline can be described by the previous image. The code is in a git repository and a build agent uses an image from the container registry to kick the pipeline. Once the pipeline starts, it builds the code (another container image in this case), testing and scanning it. Finally, if all is sound and safe, it pushes the new image to the container registry. All of this using the typical <a href="https://trunkbaseddevelopment.com/">Trunk Based Development</a>, with Pull Requests to enforce the 4-eyes principle (traceability for audit purposes).</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Amazing, another architecture diagram... And the implementation?</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>A possible implementation can be founded on this <a href="https://github.com/joaoasrosa/packer-goss-docker">open source project</a>. It uses free tools for open source projects, but there are other alternatives.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>The implementation is simple and uses the following tools:</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li><a href="https://github.com">GitHub</a> as the git repository</li><li><a href="https://azure.microsoft.com/en-us/services/devops/">Azure DevOps</a> as CI/CD server</li><li><a href="https://docs.docker.com/engine/reference/builder/">Dockerfile</a> describing the steps to create the container image</li><li><a href="https://github.com/GoogleContainerTools/container-structure-test">Google Container Structure Tests</a> as the test framework</li><li><a href="https://snyk.io/">Snyk</a> as the scanning and monitoring tool</li></ul>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>The decisions behind the tooling were:</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li>Use a testing framework that is language agnostic. Today, some testing frameworks use YAML to describe the expectations of the artifact, and it makes easy to learn when compared to a language-based testing framework. It is important for organisations where there are multiple programming languages</li><li>A scanning tool that can also monitor the artifacts. Given the nature of the disclosure of the CVE's, it is important to have a tool that automates and reports any new findings</li></ul>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>Taking a closer look at the implementation you can see it in action:</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li>Tests failing, TDD all the way (commit b6b0a6c): <a href="https://dev.azure.com/joaoasrosa/joaoasrosa/_build/results?buildId=50">https://dev.azure.com/joaoasrosa/joaoasrosa/_build/results?buildId=50</a></li><li>Scan failing (commit b92b058): <a href="https://dev.azure.com/joaoasrosa/joaoasrosa/_build/results?buildId=51">https://dev.azure.com/joaoasrosa/joaoasrosa/_build/results?buildId=51</a></li><li>Monitoring in place:</li></ul>
<!-- /wp:list -->

<!-- wp:image {"id":1905} -->
<figure class="wp-block-image"><img src="https://anotherlookontech.files.wordpress.com/2019/01/image-1.png" alt="" class="wp-image-1905" /><figcaption>Report monitoring from 2019/01/24</figcaption></figure>
<!-- /wp:image -->

<!-- wp:heading -->
<h2>In conclusion...</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>The implementation empowers the development teams to create their own containers to be used in the build environments, without interfering with other teams. It also enables the platform team to be in control without constraint the development teams, and dictate the "holy rules" of "the platform". However, provides the correct level of security controls, since everything is automated, PR's are enforced, and it is possible to know exactly what and when it was used. It makes the auditors lives easier, and creates a safer environment!</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>If you have alternative implementations or ideas, feel free to shout! This implementation uses some tooling, and perhaps you have better alternatives. I will love to discuss it! </p>
<!-- /wp:paragraph -->]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>1900</wp:post_id>
  <wp:post_date>2019-01-24 21:18:56</wp:post_date>
  <wp:post_date_gmt>2019-01-24 20:18:56</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>build-and-secure-containers-to-support-your-ci-cd-pipeline</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="ci-cd"><![CDATA[CI/CD]]></category>
  <category domain="category" nicename="continuous-deployment"><![CDATA[Continuous Deployment]]></category>
  <category domain="category" nicename="continuous-integration"><![CDATA[Continuous Integration]]></category>
  <category domain="post_tag" nicename="docker"><![CDATA[Docker]]></category>
  <category domain="post_tag" nicename="google-container-structure-tests"><![CDATA[Google Container Structure Tests]]></category>
  <category domain="category" nicename="oss"><![CDATA[OSS]]></category>
  <category domain="category" nicename="security"><![CDATA[Security]]></category>
  <category domain="post_tag" nicename="snyk"><![CDATA[Snyk]]></category>
  <category domain="post_tag" nicename="testing"><![CDATA[Testing]]></category>
  <wp:postmeta>
    <wp:meta_key>_wpcom_is_markdown</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_15487188</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_15487191</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[26892149487]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>timeline_notification</wp:meta_key>
    <wp:meta_value><![CDATA[1548361141]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_google_plus_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://plus.google.com/105879670784970671735/posts/CYvb2rcQeNN]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_15567246</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_15420870</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>603</wp:comment_id>
    <wp:comment_author><![CDATA[Build and secure containers to support your CI/CD pipeline &mdash; Xebia Blog]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>https://xebia.com/blog/build-and-secure-containers-to-support-your-ci-cd-pipeline/</wp:comment_author_url>
    <wp:comment_author_IP>35.205.52.216</wp:comment_author_IP>
    <wp:comment_date>2019-01-24 21:20:06</wp:comment_date>
    <wp:comment_date_gmt>2019-01-24 20:20:06</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[&#8230;] Footnote: This blog post is also in my personal blog. [&#8230;]]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:3:{s:4:"time";d:1548361251.490586;s:5:"event";s:15:"status-approved";s:4:"user";s:10:"joaoasrosa";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1548361250</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:2:{s:4:"time";d:1548361207.035793;s:5:"event";s:9:"check-ham";}</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>670</wp:comment_id>
    <wp:comment_author><![CDATA[riezebosch]]></wp:comment_author>
    <wp:comment_author_email>mriezebosch@gmail.com</wp:comment_author_email>
    <wp:comment_author_url>http://riezebosch.wordpress.com</wp:comment_author_url>
    <wp:comment_author_IP>37.17.208.21</wp:comment_author_IP>
    <wp:comment_date>2019-01-25 15:21:44</wp:comment_date>
    <wp:comment_date_gmt>2019-01-25 14:21:44</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Thumbs up! Open for discussion: You can run your tasks in a container, so no need to run everything from a docker task: <a href="https://blogs.msdn.microsoft.com/devops/2019/01/23/using-containerized-services-in-your-pipeline/" rel="nofollow">https://blogs.msdn.microsoft.com/devops/2019/01/23/using-containerized-services-in-your-pipeline/</a> and you could probably use my extension to download and use packer in the pipeline: <a href="https://marketplace.visualstudio.com/items?itemName=riezebosch.Packer" rel="nofollow">https://marketplace.visualstudio.com/items?itemName=riezebosch.Packer</a>]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>37839372</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:3:{s:4:"time";d:1548426104.693876;s:5:"event";s:9:"check-ham";s:4:"user";s:10:"riezebosch";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:3:{s:4:"time";d:1548430652.271439;s:5:"event";s:9:"check-ham";s:4:"user";s:10:"riezebosch";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_notqueued</wp:meta_key>
      <wp:meta_value>1548535264</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1548535264</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:3:{s:4:"time";d:1548535264.907051;s:5:"event";s:15:"status-approved";s:4:"user";s:10:"joaoasrosa";}</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>972</wp:comment_id>
    <wp:comment_author><![CDATA[JoÃ£o Rosa]]></wp:comment_author>
    <wp:comment_author_email>joaoasrosa@gmail.com</wp:comment_author_email>
    <wp:comment_author_url>http://anotherlookontech.wordpress.com</wp:comment_author_url>
    <wp:comment_author_IP>94.210.5.79</wp:comment_author_IP>
    <wp:comment_date>2019-01-26 21:45:20</wp:comment_date>
    <wp:comment_date_gmt>2019-01-26 20:45:20</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Thanks for the resources. This particular example it's creating a container with packer and goss. There was others, such as having NodeJS and some testing frameworks already installed. 
The advantage is the time to install the dependencies Vs size of container. 
Depending on the context, any approach can work.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>670</wp:comment_parent>
    <wp:comment_user_id>74848251</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1548535522</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:3:{s:4:"time";d:1548535523.094805;s:5:"event";s:9:"check-ham";s:4:"user";s:10:"joaoasrosa";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_notqueued</wp:meta_key>
      <wp:meta_value>1548535523</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title>recapping</title>
  <link>http://joaorosa.io/recapping/</link>
  <pubDate>Wed, 23 Jan 2019 17:17:05 +0000</pubDate>
  <dc:creator>joaoasrosa</dc:creator>
  <guid isPermaLink="false">http://anotherlookontech.files.wordpress.com/2019/01/recapping.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>1901</wp:post_id>
  <wp:post_date>2019-01-23 18:17:05</wp:post_date>
  <wp:post_date_gmt>2019-01-23 17:17:05</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>recapping</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://anotherlookontech.files.wordpress.com/2019/01/recapping.png</wp:attachment_url>
</item>
<item>
  <title>image-1</title>
  <link>http://joaorosa.io/image-1/</link>
  <pubDate>Thu, 24 Jan 2019 09:36:23 +0000</pubDate>
  <dc:creator>joaoasrosa</dc:creator>
  <guid isPermaLink="false">http://anotherlookontech.files.wordpress.com/2019/01/image-1.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>1905</wp:post_id>
  <wp:post_date>2019-01-24 10:36:23</wp:post_date>
  <wp:post_date_gmt>2019-01-24 09:36:23</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>image-1</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://anotherlookontech.files.wordpress.com/2019/01/image-1.png</wp:attachment_url>
</item>
  </channel>
</rss>
